module {
  func @main() {
    %0 = btor.nd_array : vector<8xi8>
    %1 = btor.nd_state 1 : i4
    %2 = btor.nd_state 2 : i4
    %3 = btor.nd_state 3 : i8
    %4 = btor.nd_state 4 : i1
    %5 = btor.nd_array : vector<8xi8>
    %6 = btor.nd_state 6 : i4
    %7 = btor.nd_state 7 : i4
    %8 = btor.nd_state 8 : i8
    %9 = btor.nd_state 9 : i1
    %10 = btor.nd_state 10 : i1
    %11 = btor.nd_state 11 : i4
    %12 = btor.nd_state 12 : i8
    %13 = btor.constant true
    %14 = btor.nd_state 14 : i1
    %15 = btor.nd_state 15 : i1
    %16 = btor.nd_state 16 : i1
    %17 = btor.nd_state 17 : i1
    %18 = btor.nd_state 18 : i1
    %19 = btor.nd_state 19 : i1
    %20 = btor.nd_state 20 : i1
    %21 = btor.nd_state 21 : i1
    br ^bb1(%0, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15, %16, %17, %18, %19, %20, %21 : vector<8xi8>, i4, i4, i8, i1, vector<8xi8>, i4, i4, i8, i1, i1, i4, i8, i1, i1, i1, i1, i1, i1, i1, i1, i1)
  ^bb1(%22: vector<8xi8>, %23: i4, %24: i4, %25: i8, %26: i1, %27: vector<8xi8>, %28: i4, %29: i4, %30: i8, %31: i1, %32: i1, %33: i4, %34: i8, %35: i1, %36: i1, %37: i1, %38: i1, %39: i1, %40: i1, %41: i1, %42: i1, %43: i1):  // 2 preds: ^bb0, ^bb1
    %44 = btor.input 2 : i2
    %45 = btor.constant 1 : i2
    %46 = btor.constant 1 : i2
    %47 = btor.slice %44, %45, %46 : i2, i1
    %48 = btor.uext %47 : i1 to i4
    %49 = btor.add %23, %48 : i4
    %50 = btor.input 5 : i1
    %51 = btor.constant -8 : i4
    %52 = btor.uext %51 : i4 to i8
    %53 = btor.cmp uge, %25, %52 : i8
    %54 = btor.cmp eq, %24, %23 : i4
    %55 = btor.not %54 : i1
    %56 = btor.input 4 : i2
    %57 = btor.constant 1 : i2
    %58 = btor.constant 1 : i2
    %59 = btor.slice %56, %57, %58 : i2, i1
    %60 = btor.and %59, %55 : i1
    %61 = btor.and %60, %53 : i1
    %62 = btor.and %61, %26 : i1
    %63 = btor.or %47, %62 : i1
    %64 = btor.or %63, %50 : i1
    %65 = btor.ite %64, %49, %23 : i4
    %66 = btor.constant 0 : i4
    %67 = btor.ite %50, %66, %65 : i4
    %68 = btor.uext %62 : i1 to i4
    %69 = btor.add %24, %68 : i4
    %70 = btor.ite %64, %69, %24 : i4
    %71 = btor.ite %50, %66, %70 : i4
    %72 = btor.constant -1 : i8
    %73 = btor.not %72 : i8
    %74 = btor.constant 2 : i4
    %75 = btor.constant 0 : i4
    %76 = btor.slice %23, %74, %75 : i4, i3
    %77 = btor.read %22[%76] : vector<8xi8>, i8
    %78 = btor.and %77, %73 : i8
    %79 = btor.read %22[%76] : vector<8xi8>, i8
    %80 = btor.input 1 : i16
    %81 = btor.constant 15 : i16
    %82 = btor.constant 8 : i16
    %83 = btor.slice %80, %81, %82 : i16, i8
    %84 = btor.ite %47, %83, %79 : i8
    %85 = btor.and %84, %72 : i8
    %86 = btor.or %85, %78 : i8
    %87 = btor.write %86, %22[%76] : vector<8xi8>
    %88 = btor.redor %72 : i8
    %89 = btor.ite %88, %87, %22 : vector<8xi8>
    %90 = btor.input 3 : i16
    %91 = btor.constant 15 : i16
    %92 = btor.constant 8 : i16
    %93 = btor.slice %90, %91, %92 : i16, i8
    %94 = btor.add %25, %93 : i8
    %95 = btor.constant true
    %96 = btor.uext %95 : i1 to i3
    %97 = btor.constant false
    %98 = btor.concat %97, %26 : i1, i1, i2
    %99 = btor.uext %98 : i2 to i3
    %100 = btor.add %99, %96 : i3
    %101 = btor.constant 0 : i3
    %102 = btor.constant 0 : i3
    %103 = btor.slice %100, %101, %102 : i3, i1
    %104 = btor.uext %103 : i1 to i2
    %105 = btor.cmp eq, %29, %28 : i4
    %106 = btor.not %105 : i1
    %107 = btor.constant 0 : i2
    %108 = btor.constant 0 : i2
    %109 = btor.slice %56, %107, %108 : i2, i1
    %110 = btor.and %109, %106 : i1
    %111 = btor.concat %60, %110 : i1, i1, i2
    %112 = btor.srl %111, %104 : i2
    %113 = btor.constant 0 : i2
    %114 = btor.constant 0 : i2
    %115 = btor.slice %112, %113, %114 : i2, i1
    %116 = btor.ite %115, %103, %26 : i1
    %117 = btor.uext %95 : i1 to i3
    %118 = btor.uext %95 : i1 to i2
    %119 = btor.uext %26 : i1 to i2
    %120 = btor.add %119, %118 : i2
    %121 = btor.uext %120 : i2 to i3
    %122 = btor.add %121, %117 : i3
    %123 = btor.constant 0 : i3
    %124 = btor.constant 0 : i3
    %125 = btor.slice %122, %123, %124 : i3, i1
    %126 = btor.not %115 : i1
    %127 = btor.uext %125 : i1 to i2
    %128 = btor.srl %111, %127 : i2
    %129 = btor.constant 0 : i2
    %130 = btor.constant 0 : i2
    %131 = btor.slice %128, %129, %130 : i2, i1
    %132 = btor.and %131, %126 : i1
    %133 = btor.ite %132, %125, %116 : i1
    %134 = btor.ite %133, %94, %25 : i8
    %135 = btor.uext %51 : i4 to i8
    %136 = btor.sub %134, %135 : i8
    %137 = btor.ite %62, %136, %134 : i8
    %138 = btor.not %60 : i1
    %139 = btor.and %26, %138 : i1
    %140 = btor.ite %139, %25, %137 : i8
    %141 = btor.constant 0 : i8
    %142 = btor.ite %50, %141, %140 : i8
    %143 = btor.or %133, %26 : i1
    %144 = btor.ite %143, %142, %25 : i8
    %145 = btor.ite %50, %141, %144 : i8
    %146 = btor.uext %51 : i4 to i8
    %147 = btor.cmp ult, %142, %146 : i8
    %148 = btor.or %138, %147 : i1
    %149 = btor.and %26, %148 : i1
    %150 = btor.and %62, %149 : i1
    %151 = btor.uext %51 : i4 to i8
    %152 = btor.constant 7 : i16
    %153 = btor.constant 0 : i16
    %154 = btor.slice %90, %152, %153 : i16, i8
    %155 = btor.add %30, %154 : i8
    %156 = btor.ite %133, %30, %155 : i8
    %157 = btor.uext %51 : i4 to i8
    %158 = btor.sub %156, %157 : i8
    %159 = btor.not %26 : i1
    %160 = btor.uext %51 : i4 to i8
    %161 = btor.cmp uge, %30, %160 : i8
    %162 = btor.and %110, %161 : i1
    %163 = btor.and %162, %159 : i1
    %164 = btor.ite %163, %158, %156 : i8
    %165 = btor.not %110 : i1
    %166 = btor.and %159, %165 : i1
    %167 = btor.ite %166, %30, %164 : i8
    %168 = btor.ite %50, %141, %167 : i8
    %169 = btor.cmp ult, %168, %151 : i8
    %170 = btor.or %165, %169 : i1
    %171 = btor.and %159, %170 : i1
    %172 = btor.and %163, %171 : i1
    %173 = btor.concat %172, %150 : i1, i1, i2
    %174 = btor.redor %173 : i2
    %175 = btor.ite %174, %133, %26 : i1
    %176 = btor.ite %50, %97, %175 : i1
    %177 = btor.constant 0 : i2
    %178 = btor.constant 0 : i2
    %179 = btor.slice %44, %177, %178 : i2, i1
    %180 = btor.uext %179 : i1 to i4
    %181 = btor.add %28, %180 : i4
    %182 = btor.or %179, %163 : i1
    %183 = btor.or %182, %50 : i1
    %184 = btor.ite %183, %181, %28 : i4
    %185 = btor.ite %50, %66, %184 : i4
    %186 = btor.uext %163 : i1 to i4
    %187 = btor.add %29, %186 : i4
    %188 = btor.ite %183, %187, %29 : i4
    %189 = btor.ite %50, %66, %188 : i4
    %190 = btor.not %72 : i8
    %191 = btor.constant 2 : i4
    %192 = btor.constant 0 : i4
    %193 = btor.slice %28, %191, %192 : i4, i3
    %194 = btor.read %27[%193] : vector<8xi8>, i8
    %195 = btor.and %194, %190 : i8
    %196 = btor.read %27[%193] : vector<8xi8>, i8
    %197 = btor.constant 7 : i16
    %198 = btor.constant 0 : i16
    %199 = btor.slice %80, %197, %198 : i16, i8
    %200 = btor.ite %179, %199, %196 : i8
    %201 = btor.and %200, %72 : i8
    %202 = btor.or %201, %195 : i8
    %203 = btor.write %202, %27[%193] : vector<8xi8>
    %204 = btor.redor %72 : i8
    %205 = btor.ite %204, %203, %27 : vector<8xi8>
    %206 = btor.not %133 : i1
    %207 = btor.or %206, %159 : i1
    %208 = btor.ite %207, %168, %30 : i8
    %209 = btor.ite %50, %141, %208 : i8
    %210 = btor.input 6 : i1
    %211 = btor.and %210, %179 : i1
    %212 = btor.or %31, %211 : i1
    %213 = btor.ite %31, %95, %212 : i1
    %214 = btor.ite %50, %97, %213 : i1
    %215 = btor.uext %163 : i1 to i4
    %216 = btor.not %31 : i1
    %217 = btor.and %179, %216 : i1
    %218 = btor.uext %217 : i1 to i4
    %219 = btor.add %33, %218 : i4
    %220 = btor.sub %219, %215 : i4
    %221 = btor.ite %50, %66, %220 : i4
    %222 = btor.redor %221 : i4
    %223 = btor.not %222 : i1
    %224 = btor.redor %33 : i4
    %225 = btor.not %32 : i1
    %226 = btor.and %31, %225 : i1
    %227 = btor.and %226, %224 : i1
    %228 = btor.and %227, %223 : i1
    %229 = btor.or %228, %32 : i1
    %230 = btor.ite %50, %97, %229 : i1
    %231 = btor.or %183, %31 : i1
    %232 = btor.ite %231, %221, %33 : i4
    %233 = btor.ite %50, %66, %232 : i4
    %234 = btor.and %211, %216 : i1
    %235 = btor.ite %234, %199, %34 : i8
    %236 = btor.ite %50, %141, %235 : i8
    %237 = btor.not %95 : i1
    %238 = btor.not %109 : i1
    %239 = btor.not %105 : i1
    %240 = btor.or %239, %238 : i1
    %241 = btor.or %240, %237 : i1
    btor.constraint(%241)
    %242 = btor.not %95 : i1
    %243 = btor.not %59 : i1
    %244 = btor.not %54 : i1
    %245 = btor.or %244, %243 : i1
    %246 = btor.or %245, %242 : i1
    btor.constraint(%246)
    %247 = btor.not %95 : i1
    %248 = btor.not %179 : i1
    %249 = btor.constant 3 : i4
    %250 = btor.constant 3 : i4
    %251 = btor.slice %28, %249, %250 : i4, i1
    %252 = btor.constant 3 : i4
    %253 = btor.constant 3 : i4
    %254 = btor.slice %29, %252, %253 : i4, i1
    %255 = btor.cmp ne, %254, %251 : i1
    %256 = btor.constant 2 : i4
    %257 = btor.constant 0 : i4
    %258 = btor.slice %29, %256, %257 : i4, i3
    %259 = btor.cmp eq, %258, %193 : i3
    %260 = btor.and %259, %255 : i1
    %261 = btor.not %260 : i1
    %262 = btor.or %261, %248 : i1
    %263 = btor.or %262, %247 : i1
    btor.constraint(%263)
    %264 = btor.not %95 : i1
    %265 = btor.not %47 : i1
    %266 = btor.constant 3 : i4
    %267 = btor.constant 3 : i4
    %268 = btor.slice %23, %266, %267 : i4, i1
    %269 = btor.constant 3 : i4
    %270 = btor.constant 3 : i4
    %271 = btor.slice %24, %269, %270 : i4, i1
    %272 = btor.cmp ne, %271, %268 : i1
    %273 = btor.constant 2 : i4
    %274 = btor.constant 0 : i4
    %275 = btor.slice %24, %273, %274 : i4, i3
    %276 = btor.cmp eq, %275, %76 : i3
    %277 = btor.and %276, %272 : i1
    %278 = btor.not %277 : i1
    %279 = btor.or %278, %265 : i1
    %280 = btor.or %279, %264 : i1
    btor.constraint(%280)
    %281 = btor.not %95 : i1
    %282 = btor.cmp eq, %35, %50 : i1
    %283 = btor.or %282, %281 : i1
    btor.constraint(%283)
    %284 = btor.concat %163, %163 : i1, i1, i2
    %285 = btor.concat %163, %284 : i1, i2, i3
    %286 = btor.concat %163, %285 : i1, i3, i4
    %287 = btor.concat %163, %286 : i1, i4, i5
    %288 = btor.concat %163, %287 : i1, i5, i6
    %289 = btor.concat %163, %288 : i1, i6, i7
    %290 = btor.concat %163, %289 : i1, i7, i8
    %291 = btor.read %27[%258] : vector<8xi8>, i8
    %292 = btor.and %291, %290 : i8
    %293 = btor.concat %62, %62 : i1, i1, i2
    %294 = btor.concat %62, %293 : i1, i2, i3
    %295 = btor.concat %62, %294 : i1, i3, i4
    %296 = btor.concat %62, %295 : i1, i4, i5
    %297 = btor.concat %62, %296 : i1, i5, i6
    %298 = btor.concat %62, %297 : i1, i6, i7
    %299 = btor.concat %62, %298 : i1, i7, i8
    %300 = btor.read %22[%275] : vector<8xi8>, i8
    %301 = btor.and %300, %299 : i8
    %302 = btor.or %301, %292 : i8
    %303 = btor.cmp eq, %34, %302 : i8
    %304 = btor.not %228 : i1
    %305 = btor.or %304, %303 : i1
    %306 = btor.not %305 : i1
    %307 = btor.ite %35, %97, %95 : i1
    %308 = btor.and %307, %306 : i1
    btor.assert_not(%308)
    %309 = btor.nd_state 14 : i1
    %310 = btor.nd_state 15 : i1
    %311 = btor.nd_state 16 : i1
    %312 = btor.nd_state 17 : i1
    %313 = btor.nd_state 18 : i1
    %314 = btor.nd_state 19 : i1
    %315 = btor.nd_state 20 : i1
    %316 = btor.nd_state 21 : i1
    br ^bb1(%89, %67, %71, %145, %176, %205, %185, %189, %209, %214, %230, %233, %236, %97, %309, %310, %311, %312, %313, %314, %315, %316 : vector<8xi8>, i4, i4, i8, i1, vector<8xi8>, i4, i4, i8, i1, i1, i4, i8, i1, i1, i1, i1, i1, i1, i1, i1, i1)
  }
}
