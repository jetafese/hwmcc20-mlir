module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_array1024xbv32() -> vector<1024xi32>
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv16_st0() -> i16
  llvm.func @main() {
    %0 = llvm.call @nd_bv16_st0() : () -> i16
    %1 = llvm.mlir.constant(10 : i10) : i10
    %2 = llvm.zext %1 : i10 to i64
    %3 = llvm.mlir.constant(0 : i64) : i64
    %4 = llvm.zext %0 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%3, %4, %2) : (i64, i64, i64) -> ()
    %5 = llvm.trunc %0 : i16 to i10
    %6 = llvm.call @nd_array1024xbv32() : () -> vector<1024xi32>
    %7 = llvm.mlir.constant(0 : i10) : i10
    llvm.br ^bb1(%5, %6, %7 : i10, vector<1024xi32>, i10)
  ^bb1(%8: i10, %9: vector<1024xi32>, %10: i10):  // 2 preds: ^bb0, ^bb2
    %11 = llvm.mlir.constant(1 : i10) : i10
    %12 = llvm.add %10, %11  : i10
    %13 = llvm.mlir.constant(32 : i10) : i10
    %14 = llvm.icmp "ule" %10, %13 : i10
    %15 = llvm.select %14, %12, %10 : i1, i10
    %16 = llvm.mlir.constant(0 : i32) : i32
    %17 = llvm.insertelement %16, %9[%10 : i10] : vector<1024xi32>
    %18 = llvm.extractelement %9[%8 : i10] : vector<1024xi32>
    %19 = llvm.icmp "ne" %18, %16 : i32
    %20 = llvm.icmp "ult" %8, %10 : i10
    %21 = llvm.and %20, %19  : i1
    %22 = llvm.mlir.constant(true) : i1
    %23 = llvm.xor %21, %22  : i1
    llvm.cond_br %23, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %24 = llvm.call @nd_bv16_st0() : () -> i16
    %25 = llvm.mlir.constant(10 : i10) : i10
    %26 = llvm.zext %25 : i10 to i64
    %27 = llvm.mlir.constant(0 : i64) : i64
    %28 = llvm.zext %24 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%27, %28, %26) : (i64, i64, i64) -> ()
    %29 = llvm.trunc %24 : i16 to i10
    llvm.br ^bb1(%29, %17, %15 : i10, vector<1024xi32>, i10)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

