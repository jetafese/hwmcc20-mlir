module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_array1024xbv32() -> vector<1024xi32>
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv16_st4() -> i16
  llvm.func @main() {
    %0 = llvm.call @nd_array1024xbv32() : () -> vector<1024xi32>
    %1 = llvm.mlir.constant(0 : i10) : i10
    %2 = llvm.call @nd_array1024xbv32() : () -> vector<1024xi32>
    %3 = llvm.call @nd_bv16_st4() : () -> i16
    %4 = llvm.mlir.constant(10 : i10) : i10
    %5 = llvm.zext %4 : i10 to i64
    %6 = llvm.mlir.constant(4 : i64) : i64
    %7 = llvm.zext %3 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%6, %7, %5) : (i64, i64, i64) -> ()
    %8 = llvm.trunc %3 : i16 to i10
    llvm.br ^bb1(%0, %1, %2, %2, %8 : vector<1024xi32>, i10, vector<1024xi32>, vector<1024xi32>, i10)
  ^bb1(%9: vector<1024xi32>, %10: i10, %11: vector<1024xi32>, %12: vector<1024xi32>, %13: i10):  // 2 preds: ^bb0, ^bb2
    %14 = llvm.mlir.constant(true) : i1
    %15 = llvm.zext %14 : i1 to i10
    %16 = llvm.add %10, %15  : i10
    %17 = llvm.mlir.constant(-2 : i10) : i10
    %18 = llvm.icmp "ule" %10, %17 : i10
    %19 = llvm.select %18, %16, %10 : i1, i10
    %20 = llvm.mlir.constant(-1 : i32) : i32
    %21 = llvm.mlir.constant(-1 : i32) : i32
    %22 = llvm.xor %20, %21  : i32
    %23 = llvm.extractelement %9[%10 : i10] : vector<1024xi32>
    %24 = llvm.and %23, %22  : i32
    %25 = llvm.extractelement %11[%10 : i10] : vector<1024xi32>
    %26 = llvm.and %25, %20  : i32
    %27 = llvm.or %26, %24  : i32
    %28 = llvm.insertelement %27, %9[%10 : i10] : vector<1024xi32>
    %29 = llvm.bitcast %20 : i32 to vector<32xi1>
    %30 = "llvm.intr.vector.reduce.or"(%29) : (vector<32xi1>) -> i1
    %31 = llvm.select %30, %28, %9 : i1, vector<1024xi32>
    %32 = llvm.mlir.constant(-1 : i32) : i32
    %33 = llvm.xor %20, %32  : i32
    %34 = llvm.extractelement %11[%10 : i10] : vector<1024xi32>
    %35 = llvm.and %34, %33  : i32
    %36 = llvm.extractelement %9[%10 : i10] : vector<1024xi32>
    %37 = llvm.and %36, %20  : i32
    %38 = llvm.or %37, %35  : i32
    %39 = llvm.insertelement %38, %11[%10 : i10] : vector<1024xi32>
    %40 = llvm.bitcast %20 : i32 to vector<32xi1>
    %41 = "llvm.intr.vector.reduce.or"(%40) : (vector<32xi1>) -> i1
    %42 = llvm.select %41, %39, %11 : i1, vector<1024xi32>
    %43 = llvm.extractelement %12[%13 : i10] : vector<1024xi32>
    %44 = llvm.extractelement %9[%13 : i10] : vector<1024xi32>
    %45 = llvm.icmp "ne" %44, %43 : i32
    %46 = llvm.icmp "ult" %13, %10 : i10
    %47 = llvm.and %46, %45  : i1
    %48 = llvm.mlir.constant(true) : i1
    %49 = llvm.xor %47, %48  : i1
    llvm.cond_br %49, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %50 = llvm.call @nd_bv16_st4() : () -> i16
    %51 = llvm.mlir.constant(10 : i10) : i10
    %52 = llvm.zext %51 : i10 to i64
    %53 = llvm.mlir.constant(4 : i64) : i64
    %54 = llvm.zext %50 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%53, %54, %52) : (i64, i64, i64) -> ()
    %55 = llvm.trunc %50 : i16 to i10
    llvm.br ^bb1(%31, %19, %42, %12, %55 : vector<1024xi32>, i10, vector<1024xi32>, vector<1024xi32>, i10)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

