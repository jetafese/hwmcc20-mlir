module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_array1024xbv32() -> vector<1024xi32>
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv16_st4() -> i16
  llvm.func @main() {
    %0 = llvm.mlir.constant(0 : i10) : i10
    %1 = llvm.call @nd_array1024xbv32() : () -> vector<1024xi32>
    %2 = llvm.call @nd_bv16_st4() : () -> i16
    %3 = llvm.trunc %2 : i16 to i10
    llvm.br ^bb1(%1, %0, %1, %1, %3 : vector<1024xi32>, i10, vector<1024xi32>, vector<1024xi32>, i10)
  ^bb1(%4: vector<1024xi32>, %5: i10, %6: vector<1024xi32>, %7: vector<1024xi32>, %8: i10):  // 2 preds: ^bb0, ^bb2
    %9 = llvm.mlir.constant(true) : i1
    %10 = llvm.zext %9 : i1 to i10
    %11 = llvm.add %5, %10  : i10
    %12 = llvm.mlir.constant(-2 : i10) : i10
    %13 = llvm.icmp "ule" %5, %12 : i10
    %14 = llvm.select %13, %11, %5 : i1, i10
    %15 = llvm.mlir.constant(-1 : i32) : i32
    %16 = llvm.mlir.constant(-1 : i32) : i32
    %17 = llvm.xor %15, %16  : i32
    %18 = llvm.extractelement %4[%5 : i10] : vector<1024xi32>
    %19 = llvm.and %18, %17  : i32
    %20 = llvm.extractelement %6[%5 : i10] : vector<1024xi32>
    %21 = llvm.and %20, %15  : i32
    %22 = llvm.or %21, %19  : i32
    %23 = llvm.insertelement %22, %4[%5 : i10] : vector<1024xi32>
    %24 = llvm.bitcast %15 : i32 to vector<32xi1>
    %25 = "llvm.intr.vector.reduce.or"(%24) : (vector<32xi1>) -> i1
    %26 = llvm.select %25, %23, %4 : i1, vector<1024xi32>
    %27 = llvm.mlir.constant(-1 : i32) : i32
    %28 = llvm.xor %15, %27  : i32
    %29 = llvm.extractelement %6[%5 : i10] : vector<1024xi32>
    %30 = llvm.and %29, %28  : i32
    %31 = llvm.extractelement %4[%5 : i10] : vector<1024xi32>
    %32 = llvm.and %31, %15  : i32
    %33 = llvm.or %32, %30  : i32
    %34 = llvm.insertelement %33, %6[%5 : i10] : vector<1024xi32>
    %35 = llvm.bitcast %15 : i32 to vector<32xi1>
    %36 = "llvm.intr.vector.reduce.or"(%35) : (vector<32xi1>) -> i1
    %37 = llvm.select %36, %34, %6 : i1, vector<1024xi32>
    %38 = llvm.extractelement %7[%8 : i10] : vector<1024xi32>
    %39 = llvm.extractelement %4[%8 : i10] : vector<1024xi32>
    %40 = llvm.icmp "ne" %39, %38 : i32
    %41 = llvm.icmp "ult" %8, %5 : i10
    %42 = llvm.and %41, %40  : i1
    %43 = llvm.mlir.constant(true) : i1
    %44 = llvm.xor %42, %43  : i1
    llvm.cond_br %44, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %45 = llvm.call @nd_bv16_st4() : () -> i16
    %46 = llvm.trunc %45 : i16 to i10
    llvm.br ^bb1(%26, %14, %37, %7, %46 : vector<1024xi32>, i10, vector<1024xi32>, vector<1024xi32>, i10)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

