module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv128_in8() -> i128
  llvm.func @nd_bv128_in9() -> i128
  llvm.func @nd_bv128_in10() -> i128
  llvm.func @nd_bv128_in11() -> i128
  llvm.func @nd_bv128_in12() -> i128
  llvm.func @nd_bv128_in13() -> i128
  llvm.func @nd_bv128_in14() -> i128
  llvm.func @nd_bv128_in15() -> i128
  llvm.func @nd_bv128_in20() -> i128
  llvm.func @nd_bv128_in0() -> i128
  llvm.func @nd_bv128_in1() -> i128
  llvm.func @nd_bv128_in2() -> i128
  llvm.func @nd_bv128_in3() -> i128
  llvm.func @nd_bv128_in4() -> i128
  llvm.func @nd_bv128_in5() -> i128
  llvm.func @nd_bv128_in6() -> i128
  llvm.func @nd_bv128_in7() -> i128
  llvm.func @nd_bv8_in19() -> i8
  llvm.func @nd_bv128_in18() -> i128
  llvm.func @nd_bv8_in16() -> i8
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in21() -> i8
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.mlir.constant(0 : i1029) : i1029
    llvm.br ^bb1(%0, %0, %1, %1 : i1, i1, i1029, i1029)
  ^bb1(%2: i1, %3: i1, %4: i1029, %5: i1029):  // 2 preds: ^bb0, ^bb2
    %6 = llvm.mlir.constant(0 : i1029) : i1029
    %7 = llvm.lshr %4, %6  : i1029
    %8 = llvm.trunc %7 : i1029 to i4
    %9 = llvm.mlir.constant(0 : i1029) : i1029
    %10 = llvm.lshr %5, %9  : i1029
    %11 = llvm.trunc %10 : i1029 to i4
    %12 = llvm.icmp "eq" %11, %8 : i4
    %13 = llvm.mlir.constant(1028 : i1029) : i1029
    %14 = llvm.lshr %4, %13  : i1029
    %15 = llvm.trunc %14 : i1029 to i1
    %16 = llvm.mlir.constant(1028 : i1029) : i1029
    %17 = llvm.lshr %5, %16  : i1029
    %18 = llvm.trunc %17 : i1029 to i1
    %19 = llvm.xor %18, %15  : i1
    %20 = llvm.mlir.constant(true) : i1
    %21 = llvm.xor %19, %20  : i1
    %22 = llvm.and %21, %12  : i1
    %23 = llvm.mlir.constant(false) : i1
    %24 = llvm.call @nd_bv8_in21() : () -> i8
    %25 = llvm.mlir.constant(true) : i1
    %26 = llvm.zext %25 : i1 to i64
    %27 = llvm.mlir.constant(21 : i64) : i64
    %28 = llvm.zext %24 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%27, %28, %26) : (i64, i64, i64) -> ()
    %29 = llvm.trunc %24 : i8 to i1
    %30 = llvm.select %29, %23, %22 : i1, i1
    %31 = llvm.mlir.constant(true) : i1
    %32 = llvm.xor %22, %31  : i1
    %33 = llvm.select %29, %23, %32 : i1, i1
    %34 = llvm.mlir.constant(900 : i1029) : i1029
    %35 = llvm.lshr %4, %34  : i1029
    %36 = llvm.trunc %35 : i1029 to i128
    %37 = llvm.mlir.constant(900 : i1029) : i1029
    %38 = llvm.lshr %5, %37  : i1029
    %39 = llvm.trunc %38 : i1029 to i128
    %40 = llvm.mlir.constant(772 : i1029) : i1029
    %41 = llvm.lshr %4, %40  : i1029
    %42 = llvm.trunc %41 : i1029 to i128
    %43 = llvm.mlir.constant(772 : i1029) : i1029
    %44 = llvm.lshr %5, %43  : i1029
    %45 = llvm.trunc %44 : i1029 to i128
    %46 = llvm.mlir.constant(644 : i1029) : i1029
    %47 = llvm.lshr %4, %46  : i1029
    %48 = llvm.trunc %47 : i1029 to i128
    %49 = llvm.mlir.constant(644 : i1029) : i1029
    %50 = llvm.lshr %5, %49  : i1029
    %51 = llvm.trunc %50 : i1029 to i128
    %52 = llvm.mlir.constant(516 : i1029) : i1029
    %53 = llvm.lshr %4, %52  : i1029
    %54 = llvm.trunc %53 : i1029 to i128
    %55 = llvm.mlir.constant(516 : i1029) : i1029
    %56 = llvm.lshr %5, %55  : i1029
    %57 = llvm.trunc %56 : i1029 to i128
    %58 = llvm.mlir.constant(388 : i1029) : i1029
    %59 = llvm.lshr %4, %58  : i1029
    %60 = llvm.trunc %59 : i1029 to i128
    %61 = llvm.mlir.constant(388 : i1029) : i1029
    %62 = llvm.lshr %5, %61  : i1029
    %63 = llvm.trunc %62 : i1029 to i128
    %64 = llvm.mlir.constant(260 : i1029) : i1029
    %65 = llvm.lshr %4, %64  : i1029
    %66 = llvm.trunc %65 : i1029 to i128
    %67 = llvm.mlir.constant(260 : i1029) : i1029
    %68 = llvm.lshr %5, %67  : i1029
    %69 = llvm.trunc %68 : i1029 to i128
    %70 = llvm.mlir.constant(132 : i1029) : i1029
    %71 = llvm.lshr %4, %70  : i1029
    %72 = llvm.trunc %71 : i1029 to i128
    %73 = llvm.mlir.constant(132 : i1029) : i1029
    %74 = llvm.lshr %5, %73  : i1029
    %75 = llvm.trunc %74 : i1029 to i128
    %76 = llvm.mlir.constant(4 : i1029) : i1029
    %77 = llvm.lshr %4, %76  : i1029
    %78 = llvm.trunc %77 : i1029 to i128
    %79 = llvm.mlir.constant(4 : i1029) : i1029
    %80 = llvm.lshr %5, %79  : i1029
    %81 = llvm.trunc %80 : i1029 to i128
    %82 = llvm.mlir.constant(true) : i1
    %83 = llvm.call @nd_bv8_in16() : () -> i8
    %84 = llvm.mlir.constant(4 : i4) : i4
    %85 = llvm.zext %84 : i4 to i64
    %86 = llvm.mlir.constant(16 : i64) : i64
    %87 = llvm.zext %83 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%86, %87, %85) : (i64, i64, i64) -> ()
    %88 = llvm.call @nd_bv128_in18() : () -> i128
    %89 = llvm.trunc %88 : i128 to i128
    %90 = llvm.mlir.constant(-8 : i4) : i4
    %91 = llvm.call @nd_bv8_in19() : () -> i8
    %92 = llvm.mlir.constant(true) : i1
    %93 = llvm.zext %92 : i1 to i64
    %94 = llvm.mlir.constant(19 : i64) : i64
    %95 = llvm.zext %91 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%94, %95, %93) : (i64, i64, i64) -> ()
    %96 = llvm.trunc %91 : i8 to i1
    %97 = llvm.mlir.constant(0 : i4) : i4
    %98 = llvm.call @nd_bv128_in7() : () -> i128
    %99 = llvm.call @nd_bv128_in6() : () -> i128
    %100 = llvm.call @nd_bv128_in5() : () -> i128
    %101 = llvm.call @nd_bv128_in4() : () -> i128
    %102 = llvm.call @nd_bv128_in3() : () -> i128
    %103 = llvm.call @nd_bv128_in2() : () -> i128
    %104 = llvm.call @nd_bv128_in1() : () -> i128
    %105 = llvm.call @nd_bv128_in0() : () -> i128
    %106 = llvm.zext %82 : i1 to i4
    %107 = llvm.add %8, %106  : i4
    %108 = llvm.call @nd_bv128_in20() : () -> i128
    %109 = llvm.trunc %108 : i128 to i128
    %110 = llvm.mlir.constant(3 : i1029) : i1029
    %111 = llvm.lshr %4, %110  : i1029
    %112 = llvm.trunc %111 : i1029 to i1
    %113 = llvm.mlir.constant(true) : i1
    %114 = llvm.xor %112, %113  : i1
    %115 = llvm.mlir.constant(0 : i1029) : i1029
    %116 = llvm.lshr %4, %115  : i1029
    %117 = llvm.trunc %116 : i1029 to i3
    %118 = llvm.zext %117 : i3 to i8
    %119 = llvm.zext %82 : i1 to i8
    %120 = llvm.shl %119, %118  : i8
    %121 = llvm.mlir.constant(0 : i8) : i8
    %122 = llvm.lshr %120, %121  : i8
    %123 = llvm.trunc %122 : i8 to i1
    %124 = llvm.and %123, %114  : i1
    %125 = llvm.select %124, %109, %78 : i1, i128
    %126 = llvm.mlir.constant(4 : i132) : i132
    %127 = llvm.zext %125 : i128 to i132
    %128 = llvm.shl %127, %126  : i132
    %129 = llvm.zext %107 : i4 to i132
    %130 = llvm.or %128, %129  : i132
    %131 = llvm.mlir.constant(1 : i8) : i8
    %132 = llvm.lshr %120, %131  : i8
    %133 = llvm.trunc %132 : i8 to i1
    %134 = llvm.and %133, %114  : i1
    %135 = llvm.select %134, %109, %72 : i1, i128
    %136 = llvm.mlir.constant(132 : i260) : i260
    %137 = llvm.zext %135 : i128 to i260
    %138 = llvm.shl %137, %136  : i260
    %139 = llvm.zext %130 : i132 to i260
    %140 = llvm.or %138, %139  : i260
    %141 = llvm.mlir.constant(2 : i8) : i8
    %142 = llvm.lshr %120, %141  : i8
    %143 = llvm.trunc %142 : i8 to i1
    %144 = llvm.and %143, %114  : i1
    %145 = llvm.select %144, %109, %66 : i1, i128
    %146 = llvm.mlir.constant(260 : i388) : i388
    %147 = llvm.zext %145 : i128 to i388
    %148 = llvm.shl %147, %146  : i388
    %149 = llvm.zext %140 : i260 to i388
    %150 = llvm.or %148, %149  : i388
    %151 = llvm.mlir.constant(3 : i8) : i8
    %152 = llvm.lshr %120, %151  : i8
    %153 = llvm.trunc %152 : i8 to i1
    %154 = llvm.and %153, %114  : i1
    %155 = llvm.select %154, %109, %60 : i1, i128
    %156 = llvm.mlir.constant(388 : i516) : i516
    %157 = llvm.zext %155 : i128 to i516
    %158 = llvm.shl %157, %156  : i516
    %159 = llvm.zext %150 : i388 to i516
    %160 = llvm.or %158, %159  : i516
    %161 = llvm.mlir.constant(4 : i8) : i8
    %162 = llvm.lshr %120, %161  : i8
    %163 = llvm.trunc %162 : i8 to i1
    %164 = llvm.and %163, %114  : i1
    %165 = llvm.select %164, %109, %54 : i1, i128
    %166 = llvm.mlir.constant(516 : i644) : i644
    %167 = llvm.zext %165 : i128 to i644
    %168 = llvm.shl %167, %166  : i644
    %169 = llvm.zext %160 : i516 to i644
    %170 = llvm.or %168, %169  : i644
    %171 = llvm.mlir.constant(5 : i8) : i8
    %172 = llvm.lshr %120, %171  : i8
    %173 = llvm.trunc %172 : i8 to i1
    %174 = llvm.and %173, %114  : i1
    %175 = llvm.select %174, %109, %48 : i1, i128
    %176 = llvm.mlir.constant(644 : i772) : i772
    %177 = llvm.zext %175 : i128 to i772
    %178 = llvm.shl %177, %176  : i772
    %179 = llvm.zext %170 : i644 to i772
    %180 = llvm.or %178, %179  : i772
    %181 = llvm.mlir.constant(6 : i8) : i8
    %182 = llvm.lshr %120, %181  : i8
    %183 = llvm.trunc %182 : i8 to i1
    %184 = llvm.and %183, %114  : i1
    %185 = llvm.select %184, %109, %42 : i1, i128
    %186 = llvm.mlir.constant(772 : i900) : i900
    %187 = llvm.zext %185 : i128 to i900
    %188 = llvm.shl %187, %186  : i900
    %189 = llvm.zext %180 : i772 to i900
    %190 = llvm.or %188, %189  : i900
    %191 = llvm.mlir.constant(7 : i8) : i8
    %192 = llvm.lshr %120, %191  : i8
    %193 = llvm.trunc %192 : i8 to i1
    %194 = llvm.and %193, %114  : i1
    %195 = llvm.select %194, %109, %36 : i1, i128
    %196 = llvm.mlir.constant(900 : i1028) : i1028
    %197 = llvm.zext %195 : i128 to i1028
    %198 = llvm.shl %197, %196  : i1028
    %199 = llvm.zext %190 : i900 to i1028
    %200 = llvm.or %198, %199  : i1028
    %201 = llvm.icmp "eq" %8, %90 : i4
    %202 = llvm.or %15, %201  : i1
    %203 = llvm.mlir.constant(1028 : i1029) : i1029
    %204 = llvm.zext %202 : i1 to i1029
    %205 = llvm.shl %204, %203  : i1029
    %206 = llvm.zext %200 : i1028 to i1029
    %207 = llvm.or %205, %206  : i1029
    %208 = llvm.select %96, %207, %4 : i1, i1029
    %209 = llvm.call @nd_bv128_in15() : () -> i128
    %210 = llvm.trunc %209 : i128 to i128
    %211 = llvm.mlir.constant(4 : i132) : i132
    %212 = llvm.zext %210 : i128 to i132
    %213 = llvm.shl %212, %211  : i132
    %214 = llvm.zext %97 : i4 to i132
    %215 = llvm.or %213, %214  : i132
    %216 = llvm.call @nd_bv128_in14() : () -> i128
    %217 = llvm.trunc %216 : i128 to i128
    %218 = llvm.mlir.constant(132 : i260) : i260
    %219 = llvm.zext %217 : i128 to i260
    %220 = llvm.shl %219, %218  : i260
    %221 = llvm.zext %215 : i132 to i260
    %222 = llvm.or %220, %221  : i260
    %223 = llvm.call @nd_bv128_in13() : () -> i128
    %224 = llvm.trunc %223 : i128 to i128
    %225 = llvm.mlir.constant(260 : i388) : i388
    %226 = llvm.zext %224 : i128 to i388
    %227 = llvm.shl %226, %225  : i388
    %228 = llvm.zext %222 : i260 to i388
    %229 = llvm.or %227, %228  : i388
    %230 = llvm.call @nd_bv128_in12() : () -> i128
    %231 = llvm.trunc %230 : i128 to i128
    %232 = llvm.mlir.constant(388 : i516) : i516
    %233 = llvm.zext %231 : i128 to i516
    %234 = llvm.shl %233, %232  : i516
    %235 = llvm.zext %229 : i388 to i516
    %236 = llvm.or %234, %235  : i516
    %237 = llvm.call @nd_bv128_in11() : () -> i128
    %238 = llvm.trunc %237 : i128 to i128
    %239 = llvm.mlir.constant(516 : i644) : i644
    %240 = llvm.zext %238 : i128 to i644
    %241 = llvm.shl %240, %239  : i644
    %242 = llvm.zext %236 : i516 to i644
    %243 = llvm.or %241, %242  : i644
    %244 = llvm.call @nd_bv128_in10() : () -> i128
    %245 = llvm.trunc %244 : i128 to i128
    %246 = llvm.mlir.constant(644 : i772) : i772
    %247 = llvm.zext %245 : i128 to i772
    %248 = llvm.shl %247, %246  : i772
    %249 = llvm.zext %243 : i644 to i772
    %250 = llvm.or %248, %249  : i772
    %251 = llvm.call @nd_bv128_in9() : () -> i128
    %252 = llvm.trunc %251 : i128 to i128
    %253 = llvm.mlir.constant(772 : i900) : i900
    %254 = llvm.zext %252 : i128 to i900
    %255 = llvm.shl %254, %253  : i900
    %256 = llvm.zext %250 : i772 to i900
    %257 = llvm.or %255, %256  : i900
    %258 = llvm.call @nd_bv128_in8() : () -> i128
    %259 = llvm.trunc %258 : i128 to i128
    %260 = llvm.mlir.constant(900 : i1028) : i1028
    %261 = llvm.zext %259 : i128 to i1028
    %262 = llvm.shl %261, %260  : i1028
    %263 = llvm.zext %257 : i900 to i1028
    %264 = llvm.or %262, %263  : i1028
    %265 = llvm.mlir.constant(1028 : i1029) : i1029
    %266 = llvm.zext %23 : i1 to i1029
    %267 = llvm.shl %266, %265  : i1029
    %268 = llvm.zext %264 : i1028 to i1029
    %269 = llvm.or %267, %268  : i1029
    %270 = llvm.select %29, %269, %208 : i1, i1029
    %271 = llvm.zext %82 : i1 to i4
    %272 = llvm.add %11, %271  : i4
    %273 = llvm.mlir.constant(3 : i1029) : i1029
    %274 = llvm.lshr %5, %273  : i1029
    %275 = llvm.trunc %274 : i1029 to i1
    %276 = llvm.mlir.constant(true) : i1
    %277 = llvm.xor %275, %276  : i1
    %278 = llvm.mlir.constant(0 : i1029) : i1029
    %279 = llvm.lshr %5, %278  : i1029
    %280 = llvm.trunc %279 : i1029 to i3
    %281 = llvm.zext %280 : i3 to i8
    %282 = llvm.zext %82 : i1 to i8
    %283 = llvm.shl %282, %281  : i8
    %284 = llvm.mlir.constant(0 : i8) : i8
    %285 = llvm.lshr %283, %284  : i8
    %286 = llvm.trunc %285 : i8 to i1
    %287 = llvm.and %286, %277  : i1
    %288 = llvm.select %287, %89, %81 : i1, i128
    %289 = llvm.mlir.constant(4 : i132) : i132
    %290 = llvm.zext %288 : i128 to i132
    %291 = llvm.shl %290, %289  : i132
    %292 = llvm.zext %272 : i4 to i132
    %293 = llvm.or %291, %292  : i132
    %294 = llvm.mlir.constant(1 : i8) : i8
    %295 = llvm.lshr %283, %294  : i8
    %296 = llvm.trunc %295 : i8 to i1
    %297 = llvm.and %296, %277  : i1
    %298 = llvm.select %297, %89, %75 : i1, i128
    %299 = llvm.mlir.constant(132 : i260) : i260
    %300 = llvm.zext %298 : i128 to i260
    %301 = llvm.shl %300, %299  : i260
    %302 = llvm.zext %293 : i132 to i260
    %303 = llvm.or %301, %302  : i260
    %304 = llvm.mlir.constant(2 : i8) : i8
    %305 = llvm.lshr %283, %304  : i8
    %306 = llvm.trunc %305 : i8 to i1
    %307 = llvm.and %306, %277  : i1
    %308 = llvm.select %307, %89, %69 : i1, i128
    %309 = llvm.mlir.constant(260 : i388) : i388
    %310 = llvm.zext %308 : i128 to i388
    %311 = llvm.shl %310, %309  : i388
    %312 = llvm.zext %303 : i260 to i388
    %313 = llvm.or %311, %312  : i388
    %314 = llvm.mlir.constant(3 : i8) : i8
    %315 = llvm.lshr %283, %314  : i8
    %316 = llvm.trunc %315 : i8 to i1
    %317 = llvm.and %316, %277  : i1
    %318 = llvm.select %317, %89, %63 : i1, i128
    %319 = llvm.mlir.constant(388 : i516) : i516
    %320 = llvm.zext %318 : i128 to i516
    %321 = llvm.shl %320, %319  : i516
    %322 = llvm.zext %313 : i388 to i516
    %323 = llvm.or %321, %322  : i516
    %324 = llvm.mlir.constant(4 : i8) : i8
    %325 = llvm.lshr %283, %324  : i8
    %326 = llvm.trunc %325 : i8 to i1
    %327 = llvm.and %326, %277  : i1
    %328 = llvm.select %327, %89, %57 : i1, i128
    %329 = llvm.mlir.constant(516 : i644) : i644
    %330 = llvm.zext %328 : i128 to i644
    %331 = llvm.shl %330, %329  : i644
    %332 = llvm.zext %323 : i516 to i644
    %333 = llvm.or %331, %332  : i644
    %334 = llvm.mlir.constant(5 : i8) : i8
    %335 = llvm.lshr %283, %334  : i8
    %336 = llvm.trunc %335 : i8 to i1
    %337 = llvm.and %336, %277  : i1
    %338 = llvm.select %337, %89, %51 : i1, i128
    %339 = llvm.mlir.constant(644 : i772) : i772
    %340 = llvm.zext %338 : i128 to i772
    %341 = llvm.shl %340, %339  : i772
    %342 = llvm.zext %333 : i644 to i772
    %343 = llvm.or %341, %342  : i772
    %344 = llvm.mlir.constant(6 : i8) : i8
    %345 = llvm.lshr %283, %344  : i8
    %346 = llvm.trunc %345 : i8 to i1
    %347 = llvm.and %346, %277  : i1
    %348 = llvm.select %347, %89, %45 : i1, i128
    %349 = llvm.mlir.constant(772 : i900) : i900
    %350 = llvm.zext %348 : i128 to i900
    %351 = llvm.shl %350, %349  : i900
    %352 = llvm.zext %343 : i772 to i900
    %353 = llvm.or %351, %352  : i900
    %354 = llvm.mlir.constant(7 : i8) : i8
    %355 = llvm.lshr %283, %354  : i8
    %356 = llvm.trunc %355 : i8 to i1
    %357 = llvm.and %356, %277  : i1
    %358 = llvm.select %357, %89, %39 : i1, i128
    %359 = llvm.mlir.constant(900 : i1028) : i1028
    %360 = llvm.zext %358 : i128 to i1028
    %361 = llvm.shl %360, %359  : i1028
    %362 = llvm.zext %353 : i900 to i1028
    %363 = llvm.or %361, %362  : i1028
    %364 = llvm.icmp "eq" %11, %90 : i4
    %365 = llvm.or %18, %364  : i1
    %366 = llvm.mlir.constant(1028 : i1029) : i1029
    %367 = llvm.zext %365 : i1 to i1029
    %368 = llvm.shl %367, %366  : i1029
    %369 = llvm.zext %363 : i1028 to i1029
    %370 = llvm.or %368, %369  : i1029
    %371 = llvm.select %96, %370, %5 : i1, i1029
    %372 = llvm.select %29, %269, %371 : i1, i1029
    %373 = llvm.select %29, %23, %2 : i1, i1
    %374 = llvm.mlir.constant(true) : i1
    %375 = llvm.xor %373, %374  : i1
    %376 = llvm.select %29, %23, %3 : i1, i1
    %377 = llvm.and %376, %375  : i1
    %378 = llvm.mlir.constant(true) : i1
    %379 = llvm.xor %377, %378  : i1
    llvm.cond_br %379, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%30, %33, %270, %372 : i1, i1, i1029, i1029)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

