module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv128_in8() -> i128
  llvm.func @nd_bv128_in9() -> i128
  llvm.func @nd_bv128_in10() -> i128
  llvm.func @nd_bv128_in11() -> i128
  llvm.func @nd_bv128_in12() -> i128
  llvm.func @nd_bv128_in13() -> i128
  llvm.func @nd_bv128_in14() -> i128
  llvm.func @nd_bv128_in15() -> i128
  llvm.func @nd_bv128_in20() -> i128
  llvm.func @nd_bv128_in0() -> i128
  llvm.func @nd_bv128_in1() -> i128
  llvm.func @nd_bv128_in2() -> i128
  llvm.func @nd_bv128_in3() -> i128
  llvm.func @nd_bv128_in4() -> i128
  llvm.func @nd_bv128_in5() -> i128
  llvm.func @nd_bv128_in6() -> i128
  llvm.func @nd_bv128_in7() -> i128
  llvm.func @nd_bv8_in19() -> i8
  llvm.func @nd_bv128_in18() -> i128
  llvm.func @nd_bv8_in16() -> i8
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in21() -> i8
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.mlir.constant(0 : i1029) : i1029
    llvm.br ^bb1(%0, %0, %1, %1 : i1, i1, i1029, i1029)
  ^bb1(%2: i1, %3: i1, %4: i1029, %5: i1029):  // 2 preds: ^bb0, ^bb2
    %6 = llvm.mlir.constant(0 : i1029) : i1029
    %7 = llvm.lshr %4, %6  : i1029
    %8 = llvm.trunc %7 : i1029 to i4
    %9 = llvm.mlir.constant(0 : i1029) : i1029
    %10 = llvm.lshr %5, %9  : i1029
    %11 = llvm.trunc %10 : i1029 to i4
    %12 = llvm.icmp "eq" %11, %8 : i4
    %13 = llvm.mlir.constant(1028 : i1029) : i1029
    %14 = llvm.lshr %4, %13  : i1029
    %15 = llvm.trunc %14 : i1029 to i1
    %16 = llvm.mlir.constant(1028 : i1029) : i1029
    %17 = llvm.lshr %5, %16  : i1029
    %18 = llvm.trunc %17 : i1029 to i1
    %19 = llvm.xor %18, %15  : i1
    %20 = llvm.mlir.constant(true) : i1
    %21 = llvm.xor %19, %20  : i1
    %22 = llvm.and %21, %12  : i1
    %23 = llvm.mlir.constant(false) : i1
    %24 = llvm.call @nd_bv8_in21() : () -> i8
    %25 = llvm.trunc %24 : i8 to i1
    %26 = llvm.select %25, %23, %22 : i1, i1
    %27 = llvm.mlir.constant(true) : i1
    %28 = llvm.xor %22, %27  : i1
    %29 = llvm.select %25, %23, %28 : i1, i1
    %30 = llvm.mlir.constant(900 : i1029) : i1029
    %31 = llvm.lshr %4, %30  : i1029
    %32 = llvm.trunc %31 : i1029 to i128
    %33 = llvm.mlir.constant(900 : i1029) : i1029
    %34 = llvm.lshr %5, %33  : i1029
    %35 = llvm.trunc %34 : i1029 to i128
    %36 = llvm.mlir.constant(772 : i1029) : i1029
    %37 = llvm.lshr %4, %36  : i1029
    %38 = llvm.trunc %37 : i1029 to i128
    %39 = llvm.mlir.constant(772 : i1029) : i1029
    %40 = llvm.lshr %5, %39  : i1029
    %41 = llvm.trunc %40 : i1029 to i128
    %42 = llvm.mlir.constant(644 : i1029) : i1029
    %43 = llvm.lshr %4, %42  : i1029
    %44 = llvm.trunc %43 : i1029 to i128
    %45 = llvm.mlir.constant(644 : i1029) : i1029
    %46 = llvm.lshr %5, %45  : i1029
    %47 = llvm.trunc %46 : i1029 to i128
    %48 = llvm.mlir.constant(516 : i1029) : i1029
    %49 = llvm.lshr %4, %48  : i1029
    %50 = llvm.trunc %49 : i1029 to i128
    %51 = llvm.mlir.constant(516 : i1029) : i1029
    %52 = llvm.lshr %5, %51  : i1029
    %53 = llvm.trunc %52 : i1029 to i128
    %54 = llvm.mlir.constant(388 : i1029) : i1029
    %55 = llvm.lshr %4, %54  : i1029
    %56 = llvm.trunc %55 : i1029 to i128
    %57 = llvm.mlir.constant(388 : i1029) : i1029
    %58 = llvm.lshr %5, %57  : i1029
    %59 = llvm.trunc %58 : i1029 to i128
    %60 = llvm.mlir.constant(260 : i1029) : i1029
    %61 = llvm.lshr %4, %60  : i1029
    %62 = llvm.trunc %61 : i1029 to i128
    %63 = llvm.mlir.constant(260 : i1029) : i1029
    %64 = llvm.lshr %5, %63  : i1029
    %65 = llvm.trunc %64 : i1029 to i128
    %66 = llvm.mlir.constant(132 : i1029) : i1029
    %67 = llvm.lshr %4, %66  : i1029
    %68 = llvm.trunc %67 : i1029 to i128
    %69 = llvm.mlir.constant(132 : i1029) : i1029
    %70 = llvm.lshr %5, %69  : i1029
    %71 = llvm.trunc %70 : i1029 to i128
    %72 = llvm.mlir.constant(4 : i1029) : i1029
    %73 = llvm.lshr %4, %72  : i1029
    %74 = llvm.trunc %73 : i1029 to i128
    %75 = llvm.mlir.constant(4 : i1029) : i1029
    %76 = llvm.lshr %5, %75  : i1029
    %77 = llvm.trunc %76 : i1029 to i128
    %78 = llvm.mlir.constant(true) : i1
    %79 = llvm.call @nd_bv8_in16() : () -> i8
    %80 = llvm.call @nd_bv128_in18() : () -> i128
    %81 = llvm.trunc %80 : i128 to i128
    %82 = llvm.mlir.constant(-8 : i4) : i4
    %83 = llvm.call @nd_bv8_in19() : () -> i8
    %84 = llvm.trunc %83 : i8 to i1
    %85 = llvm.mlir.constant(0 : i4) : i4
    %86 = llvm.call @nd_bv128_in7() : () -> i128
    %87 = llvm.call @nd_bv128_in6() : () -> i128
    %88 = llvm.call @nd_bv128_in5() : () -> i128
    %89 = llvm.call @nd_bv128_in4() : () -> i128
    %90 = llvm.call @nd_bv128_in3() : () -> i128
    %91 = llvm.call @nd_bv128_in2() : () -> i128
    %92 = llvm.call @nd_bv128_in1() : () -> i128
    %93 = llvm.call @nd_bv128_in0() : () -> i128
    %94 = llvm.zext %78 : i1 to i4
    %95 = llvm.add %8, %94  : i4
    %96 = llvm.call @nd_bv128_in20() : () -> i128
    %97 = llvm.trunc %96 : i128 to i128
    %98 = llvm.mlir.constant(3 : i1029) : i1029
    %99 = llvm.lshr %4, %98  : i1029
    %100 = llvm.trunc %99 : i1029 to i1
    %101 = llvm.mlir.constant(true) : i1
    %102 = llvm.xor %100, %101  : i1
    %103 = llvm.mlir.constant(0 : i1029) : i1029
    %104 = llvm.lshr %4, %103  : i1029
    %105 = llvm.trunc %104 : i1029 to i3
    %106 = llvm.zext %105 : i3 to i8
    %107 = llvm.zext %78 : i1 to i8
    %108 = llvm.shl %107, %106  : i8
    %109 = llvm.mlir.constant(0 : i8) : i8
    %110 = llvm.lshr %108, %109  : i8
    %111 = llvm.trunc %110 : i8 to i1
    %112 = llvm.and %111, %102  : i1
    %113 = llvm.select %112, %97, %74 : i1, i128
    %114 = llvm.mlir.constant(4 : i132) : i132
    %115 = llvm.zext %113 : i128 to i132
    %116 = llvm.shl %115, %114  : i132
    %117 = llvm.zext %95 : i4 to i132
    %118 = llvm.or %116, %117  : i132
    %119 = llvm.mlir.constant(1 : i8) : i8
    %120 = llvm.lshr %108, %119  : i8
    %121 = llvm.trunc %120 : i8 to i1
    %122 = llvm.and %121, %102  : i1
    %123 = llvm.select %122, %97, %68 : i1, i128
    %124 = llvm.mlir.constant(132 : i260) : i260
    %125 = llvm.zext %123 : i128 to i260
    %126 = llvm.shl %125, %124  : i260
    %127 = llvm.zext %118 : i132 to i260
    %128 = llvm.or %126, %127  : i260
    %129 = llvm.mlir.constant(2 : i8) : i8
    %130 = llvm.lshr %108, %129  : i8
    %131 = llvm.trunc %130 : i8 to i1
    %132 = llvm.and %131, %102  : i1
    %133 = llvm.select %132, %97, %62 : i1, i128
    %134 = llvm.mlir.constant(260 : i388) : i388
    %135 = llvm.zext %133 : i128 to i388
    %136 = llvm.shl %135, %134  : i388
    %137 = llvm.zext %128 : i260 to i388
    %138 = llvm.or %136, %137  : i388
    %139 = llvm.mlir.constant(3 : i8) : i8
    %140 = llvm.lshr %108, %139  : i8
    %141 = llvm.trunc %140 : i8 to i1
    %142 = llvm.and %141, %102  : i1
    %143 = llvm.select %142, %97, %56 : i1, i128
    %144 = llvm.mlir.constant(388 : i516) : i516
    %145 = llvm.zext %143 : i128 to i516
    %146 = llvm.shl %145, %144  : i516
    %147 = llvm.zext %138 : i388 to i516
    %148 = llvm.or %146, %147  : i516
    %149 = llvm.mlir.constant(4 : i8) : i8
    %150 = llvm.lshr %108, %149  : i8
    %151 = llvm.trunc %150 : i8 to i1
    %152 = llvm.and %151, %102  : i1
    %153 = llvm.select %152, %97, %50 : i1, i128
    %154 = llvm.mlir.constant(516 : i644) : i644
    %155 = llvm.zext %153 : i128 to i644
    %156 = llvm.shl %155, %154  : i644
    %157 = llvm.zext %148 : i516 to i644
    %158 = llvm.or %156, %157  : i644
    %159 = llvm.mlir.constant(5 : i8) : i8
    %160 = llvm.lshr %108, %159  : i8
    %161 = llvm.trunc %160 : i8 to i1
    %162 = llvm.and %161, %102  : i1
    %163 = llvm.select %162, %97, %44 : i1, i128
    %164 = llvm.mlir.constant(644 : i772) : i772
    %165 = llvm.zext %163 : i128 to i772
    %166 = llvm.shl %165, %164  : i772
    %167 = llvm.zext %158 : i644 to i772
    %168 = llvm.or %166, %167  : i772
    %169 = llvm.mlir.constant(6 : i8) : i8
    %170 = llvm.lshr %108, %169  : i8
    %171 = llvm.trunc %170 : i8 to i1
    %172 = llvm.and %171, %102  : i1
    %173 = llvm.select %172, %97, %38 : i1, i128
    %174 = llvm.mlir.constant(772 : i900) : i900
    %175 = llvm.zext %173 : i128 to i900
    %176 = llvm.shl %175, %174  : i900
    %177 = llvm.zext %168 : i772 to i900
    %178 = llvm.or %176, %177  : i900
    %179 = llvm.mlir.constant(7 : i8) : i8
    %180 = llvm.lshr %108, %179  : i8
    %181 = llvm.trunc %180 : i8 to i1
    %182 = llvm.and %181, %102  : i1
    %183 = llvm.select %182, %97, %32 : i1, i128
    %184 = llvm.mlir.constant(900 : i1028) : i1028
    %185 = llvm.zext %183 : i128 to i1028
    %186 = llvm.shl %185, %184  : i1028
    %187 = llvm.zext %178 : i900 to i1028
    %188 = llvm.or %186, %187  : i1028
    %189 = llvm.icmp "eq" %8, %82 : i4
    %190 = llvm.or %15, %189  : i1
    %191 = llvm.mlir.constant(1028 : i1029) : i1029
    %192 = llvm.zext %190 : i1 to i1029
    %193 = llvm.shl %192, %191  : i1029
    %194 = llvm.zext %188 : i1028 to i1029
    %195 = llvm.or %193, %194  : i1029
    %196 = llvm.select %84, %195, %4 : i1, i1029
    %197 = llvm.call @nd_bv128_in15() : () -> i128
    %198 = llvm.trunc %197 : i128 to i128
    %199 = llvm.mlir.constant(4 : i132) : i132
    %200 = llvm.zext %198 : i128 to i132
    %201 = llvm.shl %200, %199  : i132
    %202 = llvm.zext %85 : i4 to i132
    %203 = llvm.or %201, %202  : i132
    %204 = llvm.call @nd_bv128_in14() : () -> i128
    %205 = llvm.trunc %204 : i128 to i128
    %206 = llvm.mlir.constant(132 : i260) : i260
    %207 = llvm.zext %205 : i128 to i260
    %208 = llvm.shl %207, %206  : i260
    %209 = llvm.zext %203 : i132 to i260
    %210 = llvm.or %208, %209  : i260
    %211 = llvm.call @nd_bv128_in13() : () -> i128
    %212 = llvm.trunc %211 : i128 to i128
    %213 = llvm.mlir.constant(260 : i388) : i388
    %214 = llvm.zext %212 : i128 to i388
    %215 = llvm.shl %214, %213  : i388
    %216 = llvm.zext %210 : i260 to i388
    %217 = llvm.or %215, %216  : i388
    %218 = llvm.call @nd_bv128_in12() : () -> i128
    %219 = llvm.trunc %218 : i128 to i128
    %220 = llvm.mlir.constant(388 : i516) : i516
    %221 = llvm.zext %219 : i128 to i516
    %222 = llvm.shl %221, %220  : i516
    %223 = llvm.zext %217 : i388 to i516
    %224 = llvm.or %222, %223  : i516
    %225 = llvm.call @nd_bv128_in11() : () -> i128
    %226 = llvm.trunc %225 : i128 to i128
    %227 = llvm.mlir.constant(516 : i644) : i644
    %228 = llvm.zext %226 : i128 to i644
    %229 = llvm.shl %228, %227  : i644
    %230 = llvm.zext %224 : i516 to i644
    %231 = llvm.or %229, %230  : i644
    %232 = llvm.call @nd_bv128_in10() : () -> i128
    %233 = llvm.trunc %232 : i128 to i128
    %234 = llvm.mlir.constant(644 : i772) : i772
    %235 = llvm.zext %233 : i128 to i772
    %236 = llvm.shl %235, %234  : i772
    %237 = llvm.zext %231 : i644 to i772
    %238 = llvm.or %236, %237  : i772
    %239 = llvm.call @nd_bv128_in9() : () -> i128
    %240 = llvm.trunc %239 : i128 to i128
    %241 = llvm.mlir.constant(772 : i900) : i900
    %242 = llvm.zext %240 : i128 to i900
    %243 = llvm.shl %242, %241  : i900
    %244 = llvm.zext %238 : i772 to i900
    %245 = llvm.or %243, %244  : i900
    %246 = llvm.call @nd_bv128_in8() : () -> i128
    %247 = llvm.trunc %246 : i128 to i128
    %248 = llvm.mlir.constant(900 : i1028) : i1028
    %249 = llvm.zext %247 : i128 to i1028
    %250 = llvm.shl %249, %248  : i1028
    %251 = llvm.zext %245 : i900 to i1028
    %252 = llvm.or %250, %251  : i1028
    %253 = llvm.mlir.constant(1028 : i1029) : i1029
    %254 = llvm.zext %23 : i1 to i1029
    %255 = llvm.shl %254, %253  : i1029
    %256 = llvm.zext %252 : i1028 to i1029
    %257 = llvm.or %255, %256  : i1029
    %258 = llvm.select %25, %257, %196 : i1, i1029
    %259 = llvm.zext %78 : i1 to i4
    %260 = llvm.add %11, %259  : i4
    %261 = llvm.mlir.constant(3 : i1029) : i1029
    %262 = llvm.lshr %5, %261  : i1029
    %263 = llvm.trunc %262 : i1029 to i1
    %264 = llvm.mlir.constant(true) : i1
    %265 = llvm.xor %263, %264  : i1
    %266 = llvm.mlir.constant(0 : i1029) : i1029
    %267 = llvm.lshr %5, %266  : i1029
    %268 = llvm.trunc %267 : i1029 to i3
    %269 = llvm.zext %268 : i3 to i8
    %270 = llvm.zext %78 : i1 to i8
    %271 = llvm.shl %270, %269  : i8
    %272 = llvm.mlir.constant(0 : i8) : i8
    %273 = llvm.lshr %271, %272  : i8
    %274 = llvm.trunc %273 : i8 to i1
    %275 = llvm.and %274, %265  : i1
    %276 = llvm.select %275, %81, %77 : i1, i128
    %277 = llvm.mlir.constant(4 : i132) : i132
    %278 = llvm.zext %276 : i128 to i132
    %279 = llvm.shl %278, %277  : i132
    %280 = llvm.zext %260 : i4 to i132
    %281 = llvm.or %279, %280  : i132
    %282 = llvm.mlir.constant(1 : i8) : i8
    %283 = llvm.lshr %271, %282  : i8
    %284 = llvm.trunc %283 : i8 to i1
    %285 = llvm.and %284, %265  : i1
    %286 = llvm.select %285, %81, %71 : i1, i128
    %287 = llvm.mlir.constant(132 : i260) : i260
    %288 = llvm.zext %286 : i128 to i260
    %289 = llvm.shl %288, %287  : i260
    %290 = llvm.zext %281 : i132 to i260
    %291 = llvm.or %289, %290  : i260
    %292 = llvm.mlir.constant(2 : i8) : i8
    %293 = llvm.lshr %271, %292  : i8
    %294 = llvm.trunc %293 : i8 to i1
    %295 = llvm.and %294, %265  : i1
    %296 = llvm.select %295, %81, %65 : i1, i128
    %297 = llvm.mlir.constant(260 : i388) : i388
    %298 = llvm.zext %296 : i128 to i388
    %299 = llvm.shl %298, %297  : i388
    %300 = llvm.zext %291 : i260 to i388
    %301 = llvm.or %299, %300  : i388
    %302 = llvm.mlir.constant(3 : i8) : i8
    %303 = llvm.lshr %271, %302  : i8
    %304 = llvm.trunc %303 : i8 to i1
    %305 = llvm.and %304, %265  : i1
    %306 = llvm.select %305, %81, %59 : i1, i128
    %307 = llvm.mlir.constant(388 : i516) : i516
    %308 = llvm.zext %306 : i128 to i516
    %309 = llvm.shl %308, %307  : i516
    %310 = llvm.zext %301 : i388 to i516
    %311 = llvm.or %309, %310  : i516
    %312 = llvm.mlir.constant(4 : i8) : i8
    %313 = llvm.lshr %271, %312  : i8
    %314 = llvm.trunc %313 : i8 to i1
    %315 = llvm.and %314, %265  : i1
    %316 = llvm.select %315, %81, %53 : i1, i128
    %317 = llvm.mlir.constant(516 : i644) : i644
    %318 = llvm.zext %316 : i128 to i644
    %319 = llvm.shl %318, %317  : i644
    %320 = llvm.zext %311 : i516 to i644
    %321 = llvm.or %319, %320  : i644
    %322 = llvm.mlir.constant(5 : i8) : i8
    %323 = llvm.lshr %271, %322  : i8
    %324 = llvm.trunc %323 : i8 to i1
    %325 = llvm.and %324, %265  : i1
    %326 = llvm.select %325, %81, %47 : i1, i128
    %327 = llvm.mlir.constant(644 : i772) : i772
    %328 = llvm.zext %326 : i128 to i772
    %329 = llvm.shl %328, %327  : i772
    %330 = llvm.zext %321 : i644 to i772
    %331 = llvm.or %329, %330  : i772
    %332 = llvm.mlir.constant(6 : i8) : i8
    %333 = llvm.lshr %271, %332  : i8
    %334 = llvm.trunc %333 : i8 to i1
    %335 = llvm.and %334, %265  : i1
    %336 = llvm.select %335, %81, %41 : i1, i128
    %337 = llvm.mlir.constant(772 : i900) : i900
    %338 = llvm.zext %336 : i128 to i900
    %339 = llvm.shl %338, %337  : i900
    %340 = llvm.zext %331 : i772 to i900
    %341 = llvm.or %339, %340  : i900
    %342 = llvm.mlir.constant(7 : i8) : i8
    %343 = llvm.lshr %271, %342  : i8
    %344 = llvm.trunc %343 : i8 to i1
    %345 = llvm.and %344, %265  : i1
    %346 = llvm.select %345, %81, %35 : i1, i128
    %347 = llvm.mlir.constant(900 : i1028) : i1028
    %348 = llvm.zext %346 : i128 to i1028
    %349 = llvm.shl %348, %347  : i1028
    %350 = llvm.zext %341 : i900 to i1028
    %351 = llvm.or %349, %350  : i1028
    %352 = llvm.icmp "eq" %11, %82 : i4
    %353 = llvm.or %18, %352  : i1
    %354 = llvm.mlir.constant(1028 : i1029) : i1029
    %355 = llvm.zext %353 : i1 to i1029
    %356 = llvm.shl %355, %354  : i1029
    %357 = llvm.zext %351 : i1028 to i1029
    %358 = llvm.or %356, %357  : i1029
    %359 = llvm.select %84, %358, %5 : i1, i1029
    %360 = llvm.select %25, %257, %359 : i1, i1029
    %361 = llvm.select %25, %23, %2 : i1, i1
    %362 = llvm.mlir.constant(true) : i1
    %363 = llvm.xor %361, %362  : i1
    %364 = llvm.select %25, %23, %3 : i1, i1
    %365 = llvm.and %364, %363  : i1
    %366 = llvm.mlir.constant(true) : i1
    %367 = llvm.xor %365, %366  : i1
    llvm.cond_br %367, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%26, %29, %258, %360 : i1, i1, i1029, i1029)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

