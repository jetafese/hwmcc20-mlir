module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv16_in0() -> i16
  llvm.func @nd_bv16_in1() -> i16
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv8_st0() -> i8
  llvm.func @main() {
    %0 = llvm.mlir.constant(0 : i16) : i16
    %1 = llvm.mlir.constant(true) : i1
    %2 = llvm.call @nd_bv8_st0() : () -> i8
    %3 = llvm.trunc %2 : i8 to i4
    llvm.br ^bb1(%3, %0, %1 : i4, i16, i1)
  ^bb1(%4: i4, %5: i16, %6: i1):  // 2 preds: ^bb0, ^bb2
    %7 = llvm.mlir.constant(0 : i4) : i4
    %8 = llvm.select %6, %7, %4 : i1, i4
    %9 = llvm.mlir.constant(true) : i1
    %10 = llvm.zext %9 : i1 to i16
    %11 = llvm.add %5, %10  : i16
    %12 = llvm.mlir.constant(false) : i1
    %13 = llvm.call @nd_bv8_in3() : () -> i8
    %14 = llvm.trunc %13 : i8 to i1
    %15 = llvm.call @nd_bv16_in1() : () -> i16
    %16 = llvm.trunc %15 : i16 to i16
    %17 = llvm.call @nd_bv16_in0() : () -> i16
    %18 = llvm.trunc %17 : i16 to i16
    %19 = llvm.add %18, %16  : i16
    %20 = llvm.sub %18, %16  : i16
    %21 = llvm.bitcast %4 : i4 to vector<4xi1>
    %22 = "llvm.intr.vector.reduce.or"(%21) : (vector<4xi1>) -> i1
    %23 = llvm.mlir.constant(true) : i1
    %24 = llvm.xor %22, %23  : i1
    %25 = llvm.select %24, %19, %20 : i1, i16
    %26 = llvm.icmp "eq" %25, %19 : i16
    %27 = llvm.zext %12 : i1 to i16
    %28 = llvm.icmp "ugt" %5, %27 : i16
    %29 = llvm.select %28, %26, %14 : i1, i1
    %30 = llvm.mlir.constant(true) : i1
    %31 = llvm.xor %29, %30  : i1
    %32 = llvm.select %28, %9, %12 : i1, i1
    %33 = llvm.and %32, %31  : i1
    %34 = llvm.mlir.constant(true) : i1
    %35 = llvm.xor %33, %34  : i1
    llvm.cond_br %35, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%8, %11, %12 : i4, i16, i1)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

