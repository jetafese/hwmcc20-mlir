module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv16_in0() -> i16
  llvm.func @nd_bv16_in1() -> i16
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv8_st0() -> i8
  llvm.func @main() {
    %0 = llvm.call @nd_bv8_st0() : () -> i8
    %1 = llvm.mlir.constant(4 : i4) : i4
    %2 = llvm.zext %1 : i4 to i64
    %3 = llvm.mlir.constant(0 : i64) : i64
    %4 = llvm.zext %0 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%3, %4, %2) : (i64, i64, i64) -> ()
    %5 = llvm.trunc %0 : i8 to i4
    %6 = llvm.mlir.constant(0 : i16) : i16
    %7 = llvm.mlir.constant(true) : i1
    llvm.br ^bb1(%5, %6, %7 : i4, i16, i1)
  ^bb1(%8: i4, %9: i16, %10: i1):  // 2 preds: ^bb0, ^bb2
    %11 = llvm.mlir.constant(0 : i4) : i4
    %12 = llvm.select %10, %11, %8 : i1, i4
    %13 = llvm.mlir.constant(true) : i1
    %14 = llvm.zext %13 : i1 to i16
    %15 = llvm.add %9, %14  : i16
    %16 = llvm.mlir.constant(false) : i1
    %17 = llvm.call @nd_bv8_in3() : () -> i8
    %18 = llvm.mlir.constant(true) : i1
    %19 = llvm.zext %18 : i1 to i64
    %20 = llvm.mlir.constant(3 : i64) : i64
    %21 = llvm.zext %17 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%20, %21, %19) : (i64, i64, i64) -> ()
    %22 = llvm.trunc %17 : i8 to i1
    %23 = llvm.call @nd_bv16_in1() : () -> i16
    %24 = llvm.mlir.constant(16 : i16) : i16
    %25 = llvm.zext %24 : i16 to i64
    %26 = llvm.mlir.constant(1 : i64) : i64
    %27 = llvm.zext %23 : i16 to i64
    llvm.call @btor2mlir_print_input_num(%26, %27, %25) : (i64, i64, i64) -> ()
    %28 = llvm.trunc %23 : i16 to i16
    %29 = llvm.call @nd_bv16_in0() : () -> i16
    %30 = llvm.mlir.constant(16 : i16) : i16
    %31 = llvm.zext %30 : i16 to i64
    %32 = llvm.mlir.constant(0 : i64) : i64
    %33 = llvm.zext %29 : i16 to i64
    llvm.call @btor2mlir_print_input_num(%32, %33, %31) : (i64, i64, i64) -> ()
    %34 = llvm.trunc %29 : i16 to i16
    %35 = llvm.add %34, %28  : i16
    %36 = llvm.sub %34, %28  : i16
    %37 = llvm.bitcast %8 : i4 to vector<4xi1>
    %38 = "llvm.intr.vector.reduce.or"(%37) : (vector<4xi1>) -> i1
    %39 = llvm.mlir.constant(true) : i1
    %40 = llvm.xor %38, %39  : i1
    %41 = llvm.select %40, %35, %36 : i1, i16
    %42 = llvm.icmp "eq" %41, %35 : i16
    %43 = llvm.zext %16 : i1 to i16
    %44 = llvm.icmp "ugt" %9, %43 : i16
    %45 = llvm.select %44, %42, %22 : i1, i1
    %46 = llvm.mlir.constant(true) : i1
    %47 = llvm.xor %45, %46  : i1
    %48 = llvm.select %44, %13, %16 : i1, i1
    %49 = llvm.and %48, %47  : i1
    %50 = llvm.mlir.constant(true) : i1
    %51 = llvm.xor %49, %50  : i1
    llvm.cond_br %51, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%12, %15, %16 : i4, i16, i1)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

