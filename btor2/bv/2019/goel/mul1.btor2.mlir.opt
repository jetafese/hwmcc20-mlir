module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv8_in2() -> i8
  llvm.func @nd_bv32_in4() -> i32
  llvm.func @nd_bv8_in1() -> i8
  llvm.func @nd_bv32_in3() -> i32
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @main() {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(0 : i32) : i32
    %2 = llvm.mlir.constant(true) : i1
    llvm.br ^bb1(%0, %0, %1, %1, %2, %2, %1, %1 : i64, i64, i32, i32, i1, i1, i32, i32)
  ^bb1(%3: i64, %4: i64, %5: i32, %6: i32, %7: i1, %8: i1, %9: i32, %10: i32):  // 2 preds: ^bb0, ^bb2
    %11 = llvm.zext %6 : i32 to i64
    %12 = llvm.zext %5 : i32 to i64
    %13 = llvm.mul %12, %11  : i64
    %14 = llvm.mlir.constant(0 : i64) : i64
    %15 = llvm.call @nd_bv8_in5() : () -> i8
    %16 = llvm.mlir.constant(true) : i1
    %17 = llvm.zext %16 : i1 to i64
    %18 = llvm.mlir.constant(5 : i64) : i64
    %19 = llvm.zext %15 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%18, %19, %17) : (i64, i64, i64) -> ()
    %20 = llvm.trunc %15 : i8 to i1
    %21 = llvm.select %20, %14, %13 : i1, i64
    %22 = llvm.zext %10 : i32 to i64
    %23 = llvm.zext %9 : i32 to i64
    %24 = llvm.mul %23, %22  : i64
    %25 = llvm.or %7, %8  : i1
    %26 = llvm.select %25, %24, %4 : i1, i64
    %27 = llvm.select %20, %14, %26 : i1, i64
    %28 = llvm.call @nd_bv32_in3() : () -> i32
    %29 = llvm.mlir.constant(32 : i32) : i32
    %30 = llvm.zext %29 : i32 to i64
    %31 = llvm.mlir.constant(3 : i64) : i64
    %32 = llvm.zext %28 : i32 to i64
    llvm.call @btor2mlir_print_input_num(%31, %32, %30) : (i64, i64, i64) -> ()
    %33 = llvm.trunc %28 : i32 to i32
    %34 = llvm.call @nd_bv8_in1() : () -> i8
    %35 = llvm.mlir.constant(true) : i1
    %36 = llvm.zext %35 : i1 to i64
    %37 = llvm.mlir.constant(1 : i64) : i64
    %38 = llvm.zext %34 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%37, %38, %36) : (i64, i64, i64) -> ()
    %39 = llvm.trunc %34 : i8 to i1
    %40 = llvm.select %39, %33, %5 : i1, i32
    %41 = llvm.mlir.constant(0 : i32) : i32
    %42 = llvm.select %20, %41, %40 : i1, i32
    %43 = llvm.call @nd_bv32_in4() : () -> i32
    %44 = llvm.mlir.constant(32 : i32) : i32
    %45 = llvm.zext %44 : i32 to i64
    %46 = llvm.mlir.constant(4 : i64) : i64
    %47 = llvm.zext %43 : i32 to i64
    llvm.call @btor2mlir_print_input_num(%46, %47, %45) : (i64, i64, i64) -> ()
    %48 = llvm.trunc %43 : i32 to i32
    %49 = llvm.call @nd_bv8_in2() : () -> i8
    %50 = llvm.mlir.constant(true) : i1
    %51 = llvm.zext %50 : i1 to i64
    %52 = llvm.mlir.constant(2 : i64) : i64
    %53 = llvm.zext %49 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%52, %53, %51) : (i64, i64, i64) -> ()
    %54 = llvm.trunc %49 : i8 to i1
    %55 = llvm.select %54, %48, %6 : i1, i32
    %56 = llvm.select %20, %41, %55 : i1, i32
    %57 = llvm.mlir.constant(true) : i1
    %58 = llvm.select %20, %57, %39 : i1, i1
    %59 = llvm.select %20, %57, %54 : i1, i1
    %60 = llvm.select %39, %33, %9 : i1, i32
    %61 = llvm.select %20, %41, %60 : i1, i32
    %62 = llvm.select %54, %48, %10 : i1, i32
    %63 = llvm.select %20, %41, %62 : i1, i32
    %64 = llvm.icmp "eq" %3, %4 : i64
    %65 = llvm.mlir.constant(true) : i1
    %66 = llvm.xor %64, %65  : i1
    %67 = llvm.and %57, %66  : i1
    %68 = llvm.mlir.constant(true) : i1
    %69 = llvm.xor %67, %68  : i1
    llvm.cond_br %69, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%21, %27, %42, %56, %58, %59, %61, %63 : i64, i64, i32, i32, i1, i1, i32, i32)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

