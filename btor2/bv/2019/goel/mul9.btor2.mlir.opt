module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv8_in6() -> i8
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @nd_bv32_in1() -> i32
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv32_in2() -> i32
  llvm.func @main() {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(false) : i1
    %2 = llvm.mlir.constant(0 : i32) : i32
    llvm.br ^bb1(%0, %1, %0, %1, %2, %1, %2, %1, %2, %1, %2, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1 : i64, i1, i64, i1, i32, i1, i32, i1, i32, i1, i32, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)
  ^bb1(%3: i64, %4: i1, %5: i64, %6: i1, %7: i32, %8: i1, %9: i32, %10: i1, %11: i32, %12: i1, %13: i32, %14: i1, %15: i1, %16: i1, %17: i1, %18: i1, %19: i1, %20: i1, %21: i1, %22: i1, %23: i1, %24: i1, %25: i1, %26: i1, %27: i1, %28: i1, %29: i1, %30: i1, %31: i1):  // 2 preds: ^bb0, ^bb2
    %32 = llvm.mlir.constant(0 : i64) : i64
    %33 = llvm.zext %11 : i32 to i64
    %34 = llvm.zext %7 : i32 to i64
    %35 = llvm.mul %34, %33  : i64
    %36 = llvm.mlir.constant(1 : i32) : i32
    %37 = llvm.zext %36 : i32 to i64
    %38 = llvm.add %35, %37  : i64
    %39 = llvm.mlir.constant(12245771 : i32) : i32
    %40 = llvm.call @nd_bv32_in2() : () -> i32
    %41 = llvm.trunc %40 : i32 to i32
    %42 = llvm.icmp "eq" %41, %39 : i32
    %43 = llvm.mlir.constant(-559038737 : i32) : i32
    %44 = llvm.call @nd_bv32_in1() : () -> i32
    %45 = llvm.trunc %44 : i32 to i32
    %46 = llvm.icmp "eq" %45, %43 : i32
    %47 = llvm.mlir.constant(true) : i1
    %48 = llvm.mlir.constant(false) : i1
    %49 = llvm.xor %48, %15  : i1
    %50 = llvm.select %49, %15, %48 : i1, i1
    %51 = llvm.xor %48, %16  : i1
    %52 = llvm.select %51, %16, %50 : i1, i1
    %53 = llvm.xor %47, %20  : i1
    %54 = llvm.select %53, %20, %52 : i1, i1
    %55 = llvm.xor %48, %21  : i1
    %56 = llvm.select %55, %21, %54 : i1, i1
    %57 = llvm.xor %48, %22  : i1
    %58 = llvm.select %57, %22, %56 : i1, i1
    %59 = llvm.xor %47, %23  : i1
    %60 = llvm.select %59, %23, %58 : i1, i1
    %61 = llvm.xor %47, %24  : i1
    %62 = llvm.select %61, %24, %60 : i1, i1
    %63 = llvm.xor %48, %25  : i1
    %64 = llvm.select %63, %25, %62 : i1, i1
    %65 = llvm.xor %48, %26  : i1
    %66 = llvm.select %65, %26, %64 : i1, i1
    %67 = llvm.xor %48, %27  : i1
    %68 = llvm.select %67, %27, %66 : i1, i1
    %69 = llvm.xor %48, %17  : i1
    %70 = llvm.select %69, %17, %68 : i1, i1
    %71 = llvm.xor %48, %18  : i1
    %72 = llvm.select %71, %18, %70 : i1, i1
    %73 = llvm.xor %48, %19  : i1
    %74 = llvm.select %73, %19, %72 : i1, i1
    %75 = llvm.icmp "eq" %74, %47 : i1
    %76 = llvm.and %75, %46  : i1
    %77 = llvm.and %76, %42  : i1
    %78 = llvm.select %77, %38, %35 : i1, i64
    %79 = llvm.mlir.constant(2 : i64) : i64
    %80 = llvm.lshr %78, %79  : i64
    %81 = llvm.trunc %80 : i64 to i60
    %82 = llvm.mlir.constant(0 : i4) : i4
    %83 = llvm.mlir.constant(60 : i64) : i64
    %84 = llvm.zext %82 : i4 to i64
    %85 = llvm.shl %84, %83  : i64
    %86 = llvm.zext %81 : i60 to i64
    %87 = llvm.or %85, %86  : i64
    %88 = llvm.select %28, %87, %32 : i1, i64
    %89 = llvm.zext %13 : i32 to i64
    %90 = llvm.zext %9 : i32 to i64
    %91 = llvm.mul %90, %89  : i64
    %92 = llvm.mlir.constant(2 : i64) : i64
    %93 = llvm.lshr %91, %92  : i64
    %94 = llvm.trunc %93 : i64 to i60
    %95 = llvm.mlir.constant(60 : i64) : i64
    %96 = llvm.zext %82 : i4 to i64
    %97 = llvm.shl %96, %95  : i64
    %98 = llvm.zext %94 : i60 to i64
    %99 = llvm.or %97, %98  : i64
    %100 = llvm.select %30, %99, %32 : i1, i64
    %101 = llvm.select %31, %100, %5 : i1, i64
    %102 = llvm.call @nd_bv8_in5() : () -> i8
    %103 = llvm.trunc %102 : i8 to i1
    %104 = llvm.call @nd_bv8_in3() : () -> i8
    %105 = llvm.trunc %104 : i8 to i1
    %106 = llvm.call @nd_bv8_in4() : () -> i8
    %107 = llvm.trunc %106 : i8 to i1
    %108 = llvm.and %107, %105  : i1
    %109 = llvm.or %103, %108  : i1
    %110 = llvm.select %109, %45, %9 : i1, i32
    %111 = llvm.call @nd_bv8_in6() : () -> i8
    %112 = llvm.trunc %111 : i8 to i1
    %113 = llvm.or %112, %108  : i1
    %114 = llvm.select %113, %41, %13 : i1, i32
    %115 = llvm.icmp "ne" %15, %47 : i1
    %116 = llvm.icmp "ne" %115, %48 : i1
    %117 = llvm.and %15, %47  : i1
    %118 = llvm.or %15, %47  : i1
    %119 = llvm.select %48, %118, %117 : i1, i1
    %120 = llvm.icmp "ne" %16, %48 : i1
    %121 = llvm.icmp "ne" %120, %119 : i1
    %122 = llvm.and %27, %48  : i1
    %123 = llvm.or %27, %48  : i1
    %124 = llvm.and %26, %48  : i1
    %125 = llvm.or %26, %48  : i1
    %126 = llvm.and %25, %48  : i1
    %127 = llvm.or %25, %48  : i1
    %128 = llvm.and %24, %48  : i1
    %129 = llvm.or %24, %48  : i1
    %130 = llvm.and %23, %48  : i1
    %131 = llvm.or %23, %48  : i1
    %132 = llvm.and %22, %48  : i1
    %133 = llvm.or %22, %48  : i1
    %134 = llvm.and %21, %48  : i1
    %135 = llvm.or %21, %48  : i1
    %136 = llvm.and %20, %48  : i1
    %137 = llvm.or %20, %48  : i1
    %138 = llvm.and %16, %48  : i1
    %139 = llvm.or %16, %48  : i1
    %140 = llvm.select %119, %139, %138 : i1, i1
    %141 = llvm.select %140, %137, %136 : i1, i1
    %142 = llvm.select %141, %135, %134 : i1, i1
    %143 = llvm.select %142, %133, %132 : i1, i1
    %144 = llvm.select %143, %131, %130 : i1, i1
    %145 = llvm.select %144, %129, %128 : i1, i1
    %146 = llvm.select %145, %127, %126 : i1, i1
    %147 = llvm.select %146, %125, %124 : i1, i1
    %148 = llvm.select %147, %123, %122 : i1, i1
    %149 = llvm.icmp "ne" %17, %48 : i1
    %150 = llvm.icmp "ne" %149, %148 : i1
    %151 = llvm.and %17, %48  : i1
    %152 = llvm.or %17, %48  : i1
    %153 = llvm.select %148, %152, %151 : i1, i1
    %154 = llvm.icmp "ne" %18, %48 : i1
    %155 = llvm.icmp "ne" %154, %153 : i1
    %156 = llvm.and %18, %48  : i1
    %157 = llvm.or %18, %48  : i1
    %158 = llvm.select %153, %157, %156 : i1, i1
    %159 = llvm.icmp "ne" %19, %48 : i1
    %160 = llvm.icmp "ne" %159, %158 : i1
    %161 = llvm.icmp "ne" %20, %48 : i1
    %162 = llvm.icmp "ne" %161, %140 : i1
    %163 = llvm.icmp "ne" %21, %48 : i1
    %164 = llvm.icmp "ne" %163, %141 : i1
    %165 = llvm.icmp "ne" %22, %48 : i1
    %166 = llvm.icmp "ne" %165, %142 : i1
    %167 = llvm.icmp "ne" %23, %48 : i1
    %168 = llvm.icmp "ne" %167, %143 : i1
    %169 = llvm.icmp "ne" %24, %48 : i1
    %170 = llvm.icmp "ne" %169, %144 : i1
    %171 = llvm.icmp "ne" %25, %48 : i1
    %172 = llvm.icmp "ne" %171, %145 : i1
    %173 = llvm.icmp "ne" %26, %48 : i1
    %174 = llvm.icmp "ne" %173, %146 : i1
    %175 = llvm.icmp "ne" %27, %48 : i1
    %176 = llvm.icmp "ne" %175, %147 : i1
    %177 = llvm.mlir.constant(0 : i32) : i32
    %178 = llvm.select %14, %13, %177 : i1, i32
    %179 = llvm.select %12, %11, %177 : i1, i32
    %180 = llvm.icmp "eq" %179, %178 : i32
    %181 = llvm.select %10, %9, %177 : i1, i32
    %182 = llvm.select %8, %7, %177 : i1, i32
    %183 = llvm.icmp "eq" %182, %181 : i32
    %184 = llvm.select %6, %5, %32 : i1, i64
    %185 = llvm.select %4, %3, %32 : i1, i64
    %186 = llvm.icmp "eq" %185, %184 : i64
    %187 = llvm.and %186, %183  : i1
    %188 = llvm.and %187, %180  : i1
    %189 = llvm.mlir.constant(true) : i1
    %190 = llvm.xor %188, %189  : i1
    %191 = llvm.and %47, %190  : i1
    %192 = llvm.mlir.constant(true) : i1
    %193 = llvm.xor %191, %192  : i1
    llvm.cond_br %193, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%88, %29, %101, %31, %45, %103, %110, %103, %41, %112, %114, %112, %116, %121, %150, %155, %160, %162, %164, %166, %168, %170, %172, %174, %176, %105, %107, %105, %107 : i64, i1, i64, i1, i32, i1, i32, i1, i32, i1, i32, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

