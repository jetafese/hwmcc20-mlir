module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv8_in6() -> i8
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @nd_bv32_in1() -> i32
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv32_in2() -> i32
  llvm.func @main() {
    %0 = llvm.mlir.constant(0 : i64) : i64
    %1 = llvm.mlir.constant(false) : i1
    %2 = llvm.mlir.constant(0 : i32) : i32
    llvm.br ^bb1(%0, %1, %0, %1, %2, %1, %2, %1, %2, %1, %2, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1 : i64, i1, i64, i1, i32, i1, i32, i1, i32, i1, i32, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)
  ^bb1(%3: i64, %4: i1, %5: i64, %6: i1, %7: i32, %8: i1, %9: i32, %10: i1, %11: i32, %12: i1, %13: i32, %14: i1, %15: i1, %16: i1, %17: i1, %18: i1, %19: i1, %20: i1, %21: i1, %22: i1, %23: i1, %24: i1, %25: i1, %26: i1, %27: i1, %28: i1, %29: i1, %30: i1, %31: i1):  // 2 preds: ^bb0, ^bb2
    %32 = llvm.mlir.constant(0 : i64) : i64
    %33 = llvm.zext %11 : i32 to i64
    %34 = llvm.zext %7 : i32 to i64
    %35 = llvm.mul %34, %33  : i64
    %36 = llvm.mlir.constant(1 : i32) : i32
    %37 = llvm.zext %36 : i32 to i64
    %38 = llvm.add %35, %37  : i64
    %39 = llvm.mlir.constant(12245771 : i32) : i32
    %40 = llvm.call @nd_bv32_in2() : () -> i32
    %41 = llvm.mlir.constant(32 : i32) : i32
    %42 = llvm.zext %41 : i32 to i64
    %43 = llvm.mlir.constant(2 : i64) : i64
    %44 = llvm.zext %40 : i32 to i64
    llvm.call @btor2mlir_print_input_num(%43, %44, %42) : (i64, i64, i64) -> ()
    %45 = llvm.trunc %40 : i32 to i32
    %46 = llvm.icmp "eq" %45, %39 : i32
    %47 = llvm.mlir.constant(-559038737 : i32) : i32
    %48 = llvm.call @nd_bv32_in1() : () -> i32
    %49 = llvm.mlir.constant(32 : i32) : i32
    %50 = llvm.zext %49 : i32 to i64
    %51 = llvm.mlir.constant(1 : i64) : i64
    %52 = llvm.zext %48 : i32 to i64
    llvm.call @btor2mlir_print_input_num(%51, %52, %50) : (i64, i64, i64) -> ()
    %53 = llvm.trunc %48 : i32 to i32
    %54 = llvm.icmp "eq" %53, %47 : i32
    %55 = llvm.mlir.constant(true) : i1
    %56 = llvm.mlir.constant(false) : i1
    %57 = llvm.xor %56, %15  : i1
    %58 = llvm.select %57, %15, %56 : i1, i1
    %59 = llvm.xor %56, %16  : i1
    %60 = llvm.select %59, %16, %58 : i1, i1
    %61 = llvm.xor %55, %20  : i1
    %62 = llvm.select %61, %20, %60 : i1, i1
    %63 = llvm.xor %56, %21  : i1
    %64 = llvm.select %63, %21, %62 : i1, i1
    %65 = llvm.xor %56, %22  : i1
    %66 = llvm.select %65, %22, %64 : i1, i1
    %67 = llvm.xor %55, %23  : i1
    %68 = llvm.select %67, %23, %66 : i1, i1
    %69 = llvm.xor %55, %24  : i1
    %70 = llvm.select %69, %24, %68 : i1, i1
    %71 = llvm.xor %56, %25  : i1
    %72 = llvm.select %71, %25, %70 : i1, i1
    %73 = llvm.xor %56, %26  : i1
    %74 = llvm.select %73, %26, %72 : i1, i1
    %75 = llvm.xor %56, %27  : i1
    %76 = llvm.select %75, %27, %74 : i1, i1
    %77 = llvm.xor %56, %17  : i1
    %78 = llvm.select %77, %17, %76 : i1, i1
    %79 = llvm.xor %56, %18  : i1
    %80 = llvm.select %79, %18, %78 : i1, i1
    %81 = llvm.xor %56, %19  : i1
    %82 = llvm.select %81, %19, %80 : i1, i1
    %83 = llvm.icmp "eq" %82, %55 : i1
    %84 = llvm.and %83, %54  : i1
    %85 = llvm.and %84, %46  : i1
    %86 = llvm.select %85, %38, %35 : i1, i64
    %87 = llvm.mlir.constant(2 : i64) : i64
    %88 = llvm.lshr %86, %87  : i64
    %89 = llvm.trunc %88 : i64 to i60
    %90 = llvm.mlir.constant(0 : i4) : i4
    %91 = llvm.mlir.constant(60 : i64) : i64
    %92 = llvm.zext %90 : i4 to i64
    %93 = llvm.shl %92, %91  : i64
    %94 = llvm.zext %89 : i60 to i64
    %95 = llvm.or %93, %94  : i64
    %96 = llvm.select %28, %95, %32 : i1, i64
    %97 = llvm.zext %13 : i32 to i64
    %98 = llvm.zext %9 : i32 to i64
    %99 = llvm.mul %98, %97  : i64
    %100 = llvm.mlir.constant(2 : i64) : i64
    %101 = llvm.lshr %99, %100  : i64
    %102 = llvm.trunc %101 : i64 to i60
    %103 = llvm.mlir.constant(60 : i64) : i64
    %104 = llvm.zext %90 : i4 to i64
    %105 = llvm.shl %104, %103  : i64
    %106 = llvm.zext %102 : i60 to i64
    %107 = llvm.or %105, %106  : i64
    %108 = llvm.select %30, %107, %32 : i1, i64
    %109 = llvm.select %31, %108, %5 : i1, i64
    %110 = llvm.call @nd_bv8_in5() : () -> i8
    %111 = llvm.mlir.constant(true) : i1
    %112 = llvm.zext %111 : i1 to i64
    %113 = llvm.mlir.constant(5 : i64) : i64
    %114 = llvm.zext %110 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%113, %114, %112) : (i64, i64, i64) -> ()
    %115 = llvm.trunc %110 : i8 to i1
    %116 = llvm.call @nd_bv8_in3() : () -> i8
    %117 = llvm.mlir.constant(true) : i1
    %118 = llvm.zext %117 : i1 to i64
    %119 = llvm.mlir.constant(3 : i64) : i64
    %120 = llvm.zext %116 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%119, %120, %118) : (i64, i64, i64) -> ()
    %121 = llvm.trunc %116 : i8 to i1
    %122 = llvm.call @nd_bv8_in4() : () -> i8
    %123 = llvm.mlir.constant(true) : i1
    %124 = llvm.zext %123 : i1 to i64
    %125 = llvm.mlir.constant(4 : i64) : i64
    %126 = llvm.zext %122 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%125, %126, %124) : (i64, i64, i64) -> ()
    %127 = llvm.trunc %122 : i8 to i1
    %128 = llvm.and %127, %121  : i1
    %129 = llvm.or %115, %128  : i1
    %130 = llvm.select %129, %53, %9 : i1, i32
    %131 = llvm.call @nd_bv8_in6() : () -> i8
    %132 = llvm.mlir.constant(true) : i1
    %133 = llvm.zext %132 : i1 to i64
    %134 = llvm.mlir.constant(6 : i64) : i64
    %135 = llvm.zext %131 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%134, %135, %133) : (i64, i64, i64) -> ()
    %136 = llvm.trunc %131 : i8 to i1
    %137 = llvm.or %136, %128  : i1
    %138 = llvm.select %137, %45, %13 : i1, i32
    %139 = llvm.icmp "ne" %15, %55 : i1
    %140 = llvm.icmp "ne" %139, %56 : i1
    %141 = llvm.and %15, %55  : i1
    %142 = llvm.or %15, %55  : i1
    %143 = llvm.select %56, %142, %141 : i1, i1
    %144 = llvm.icmp "ne" %16, %56 : i1
    %145 = llvm.icmp "ne" %144, %143 : i1
    %146 = llvm.and %27, %56  : i1
    %147 = llvm.or %27, %56  : i1
    %148 = llvm.and %26, %56  : i1
    %149 = llvm.or %26, %56  : i1
    %150 = llvm.and %25, %56  : i1
    %151 = llvm.or %25, %56  : i1
    %152 = llvm.and %24, %56  : i1
    %153 = llvm.or %24, %56  : i1
    %154 = llvm.and %23, %56  : i1
    %155 = llvm.or %23, %56  : i1
    %156 = llvm.and %22, %56  : i1
    %157 = llvm.or %22, %56  : i1
    %158 = llvm.and %21, %56  : i1
    %159 = llvm.or %21, %56  : i1
    %160 = llvm.and %20, %56  : i1
    %161 = llvm.or %20, %56  : i1
    %162 = llvm.and %16, %56  : i1
    %163 = llvm.or %16, %56  : i1
    %164 = llvm.select %143, %163, %162 : i1, i1
    %165 = llvm.select %164, %161, %160 : i1, i1
    %166 = llvm.select %165, %159, %158 : i1, i1
    %167 = llvm.select %166, %157, %156 : i1, i1
    %168 = llvm.select %167, %155, %154 : i1, i1
    %169 = llvm.select %168, %153, %152 : i1, i1
    %170 = llvm.select %169, %151, %150 : i1, i1
    %171 = llvm.select %170, %149, %148 : i1, i1
    %172 = llvm.select %171, %147, %146 : i1, i1
    %173 = llvm.icmp "ne" %17, %56 : i1
    %174 = llvm.icmp "ne" %173, %172 : i1
    %175 = llvm.and %17, %56  : i1
    %176 = llvm.or %17, %56  : i1
    %177 = llvm.select %172, %176, %175 : i1, i1
    %178 = llvm.icmp "ne" %18, %56 : i1
    %179 = llvm.icmp "ne" %178, %177 : i1
    %180 = llvm.and %18, %56  : i1
    %181 = llvm.or %18, %56  : i1
    %182 = llvm.select %177, %181, %180 : i1, i1
    %183 = llvm.icmp "ne" %19, %56 : i1
    %184 = llvm.icmp "ne" %183, %182 : i1
    %185 = llvm.icmp "ne" %20, %56 : i1
    %186 = llvm.icmp "ne" %185, %164 : i1
    %187 = llvm.icmp "ne" %21, %56 : i1
    %188 = llvm.icmp "ne" %187, %165 : i1
    %189 = llvm.icmp "ne" %22, %56 : i1
    %190 = llvm.icmp "ne" %189, %166 : i1
    %191 = llvm.icmp "ne" %23, %56 : i1
    %192 = llvm.icmp "ne" %191, %167 : i1
    %193 = llvm.icmp "ne" %24, %56 : i1
    %194 = llvm.icmp "ne" %193, %168 : i1
    %195 = llvm.icmp "ne" %25, %56 : i1
    %196 = llvm.icmp "ne" %195, %169 : i1
    %197 = llvm.icmp "ne" %26, %56 : i1
    %198 = llvm.icmp "ne" %197, %170 : i1
    %199 = llvm.icmp "ne" %27, %56 : i1
    %200 = llvm.icmp "ne" %199, %171 : i1
    %201 = llvm.mlir.constant(0 : i32) : i32
    %202 = llvm.select %14, %13, %201 : i1, i32
    %203 = llvm.select %12, %11, %201 : i1, i32
    %204 = llvm.icmp "eq" %203, %202 : i32
    %205 = llvm.select %10, %9, %201 : i1, i32
    %206 = llvm.select %8, %7, %201 : i1, i32
    %207 = llvm.icmp "eq" %206, %205 : i32
    %208 = llvm.select %6, %5, %32 : i1, i64
    %209 = llvm.select %4, %3, %32 : i1, i64
    %210 = llvm.icmp "eq" %209, %208 : i64
    %211 = llvm.and %210, %207  : i1
    %212 = llvm.and %211, %204  : i1
    %213 = llvm.mlir.constant(true) : i1
    %214 = llvm.xor %212, %213  : i1
    %215 = llvm.and %55, %214  : i1
    %216 = llvm.mlir.constant(true) : i1
    %217 = llvm.xor %215, %216  : i1
    llvm.cond_br %217, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%96, %29, %109, %31, %53, %115, %130, %115, %45, %136, %138, %136, %140, %145, %174, %179, %184, %186, %188, %190, %192, %194, %196, %198, %200, %121, %127, %121, %127 : i64, i1, i64, i1, i32, i1, i32, i1, i32, i1, i32, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

