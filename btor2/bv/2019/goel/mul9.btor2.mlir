module {
  func @main() {
    %0 = btor.constant 0 : i64
    %1 = btor.constant false
    %2 = btor.constant 0 : i32
    br ^bb1(%0, %1, %0, %1, %2, %1, %2, %1, %2, %1, %2, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1 : i64, i1, i64, i1, i32, i1, i32, i1, i32, i1, i32, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)
  ^bb1(%3: i64, %4: i1, %5: i64, %6: i1, %7: i32, %8: i1, %9: i32, %10: i1, %11: i32, %12: i1, %13: i32, %14: i1, %15: i1, %16: i1, %17: i1, %18: i1, %19: i1, %20: i1, %21: i1, %22: i1, %23: i1, %24: i1, %25: i1, %26: i1, %27: i1, %28: i1, %29: i1, %30: i1, %31: i1):  // 2 preds: ^bb0, ^bb1
    %32 = btor.constant 0 : i64
    %33 = btor.uext %11 : i32 to i64
    %34 = btor.uext %7 : i32 to i64
    %35 = btor.mul %34, %33 : i64
    %36 = btor.constant 1 : i32
    %37 = btor.uext %36 : i32 to i64
    %38 = btor.add %35, %37 : i64
    %39 = btor.constant 12245771 : i32
    %40 = btor.input 2 : i32
    %41 = btor.cmp eq, %40, %39 : i32
    %42 = btor.constant -559038737 : i32
    %43 = btor.input 1 : i32
    %44 = btor.cmp eq, %43, %42 : i32
    %45 = btor.constant true
    %46 = btor.constant false
    %47 = btor.xor %46, %15 : i1
    %48 = btor.ite %47, %15, %46 : i1
    %49 = btor.xor %46, %16 : i1
    %50 = btor.ite %49, %16, %48 : i1
    %51 = btor.xor %45, %20 : i1
    %52 = btor.ite %51, %20, %50 : i1
    %53 = btor.xor %46, %21 : i1
    %54 = btor.ite %53, %21, %52 : i1
    %55 = btor.xor %46, %22 : i1
    %56 = btor.ite %55, %22, %54 : i1
    %57 = btor.xor %45, %23 : i1
    %58 = btor.ite %57, %23, %56 : i1
    %59 = btor.xor %45, %24 : i1
    %60 = btor.ite %59, %24, %58 : i1
    %61 = btor.xor %46, %25 : i1
    %62 = btor.ite %61, %25, %60 : i1
    %63 = btor.xor %46, %26 : i1
    %64 = btor.ite %63, %26, %62 : i1
    %65 = btor.xor %46, %27 : i1
    %66 = btor.ite %65, %27, %64 : i1
    %67 = btor.xor %46, %17 : i1
    %68 = btor.ite %67, %17, %66 : i1
    %69 = btor.xor %46, %18 : i1
    %70 = btor.ite %69, %18, %68 : i1
    %71 = btor.xor %46, %19 : i1
    %72 = btor.ite %71, %19, %70 : i1
    %73 = btor.cmp eq, %72, %45 : i1
    %74 = btor.and %73, %44 : i1
    %75 = btor.and %74, %41 : i1
    %76 = btor.ite %75, %38, %35 : i64
    %77 = btor.constant 61 : i64
    %78 = btor.constant 2 : i64
    %79 = btor.slice %76, %77, %78 : i64, i60
    %80 = btor.constant 0 : i4
    %81 = btor.concat %80, %79 : i4, i60, i64
    %82 = btor.ite %28, %81, %32 : i64
    %83 = btor.uext %13 : i32 to i64
    %84 = btor.uext %9 : i32 to i64
    %85 = btor.mul %84, %83 : i64
    %86 = btor.constant 61 : i64
    %87 = btor.constant 2 : i64
    %88 = btor.slice %85, %86, %87 : i64, i60
    %89 = btor.concat %80, %88 : i4, i60, i64
    %90 = btor.ite %30, %89, %32 : i64
    %91 = btor.ite %31, %90, %5 : i64
    %92 = btor.input 5 : i1
    %93 = btor.input 3 : i1
    %94 = btor.input 4 : i1
    %95 = btor.and %94, %93 : i1
    %96 = btor.or %92, %95 : i1
    %97 = btor.ite %96, %43, %9 : i32
    %98 = btor.input 6 : i1
    %99 = btor.or %98, %95 : i1
    %100 = btor.ite %99, %40, %13 : i32
    %101 = btor.cmp ne, %15, %45 : i1
    %102 = btor.cmp ne, %101, %46 : i1
    %103 = btor.and %15, %45 : i1
    %104 = btor.or %15, %45 : i1
    %105 = btor.ite %46, %104, %103 : i1
    %106 = btor.cmp ne, %16, %46 : i1
    %107 = btor.cmp ne, %106, %105 : i1
    %108 = btor.and %27, %46 : i1
    %109 = btor.or %27, %46 : i1
    %110 = btor.and %26, %46 : i1
    %111 = btor.or %26, %46 : i1
    %112 = btor.and %25, %46 : i1
    %113 = btor.or %25, %46 : i1
    %114 = btor.and %24, %46 : i1
    %115 = btor.or %24, %46 : i1
    %116 = btor.and %23, %46 : i1
    %117 = btor.or %23, %46 : i1
    %118 = btor.and %22, %46 : i1
    %119 = btor.or %22, %46 : i1
    %120 = btor.and %21, %46 : i1
    %121 = btor.or %21, %46 : i1
    %122 = btor.and %20, %46 : i1
    %123 = btor.or %20, %46 : i1
    %124 = btor.and %16, %46 : i1
    %125 = btor.or %16, %46 : i1
    %126 = btor.ite %105, %125, %124 : i1
    %127 = btor.ite %126, %123, %122 : i1
    %128 = btor.ite %127, %121, %120 : i1
    %129 = btor.ite %128, %119, %118 : i1
    %130 = btor.ite %129, %117, %116 : i1
    %131 = btor.ite %130, %115, %114 : i1
    %132 = btor.ite %131, %113, %112 : i1
    %133 = btor.ite %132, %111, %110 : i1
    %134 = btor.ite %133, %109, %108 : i1
    %135 = btor.cmp ne, %17, %46 : i1
    %136 = btor.cmp ne, %135, %134 : i1
    %137 = btor.and %17, %46 : i1
    %138 = btor.or %17, %46 : i1
    %139 = btor.ite %134, %138, %137 : i1
    %140 = btor.cmp ne, %18, %46 : i1
    %141 = btor.cmp ne, %140, %139 : i1
    %142 = btor.and %18, %46 : i1
    %143 = btor.or %18, %46 : i1
    %144 = btor.ite %139, %143, %142 : i1
    %145 = btor.cmp ne, %19, %46 : i1
    %146 = btor.cmp ne, %145, %144 : i1
    %147 = btor.cmp ne, %20, %46 : i1
    %148 = btor.cmp ne, %147, %126 : i1
    %149 = btor.cmp ne, %21, %46 : i1
    %150 = btor.cmp ne, %149, %127 : i1
    %151 = btor.cmp ne, %22, %46 : i1
    %152 = btor.cmp ne, %151, %128 : i1
    %153 = btor.cmp ne, %23, %46 : i1
    %154 = btor.cmp ne, %153, %129 : i1
    %155 = btor.cmp ne, %24, %46 : i1
    %156 = btor.cmp ne, %155, %130 : i1
    %157 = btor.cmp ne, %25, %46 : i1
    %158 = btor.cmp ne, %157, %131 : i1
    %159 = btor.cmp ne, %26, %46 : i1
    %160 = btor.cmp ne, %159, %132 : i1
    %161 = btor.cmp ne, %27, %46 : i1
    %162 = btor.cmp ne, %161, %133 : i1
    %163 = btor.constant 0 : i32
    %164 = btor.ite %14, %13, %163 : i32
    %165 = btor.ite %12, %11, %163 : i32
    %166 = btor.cmp eq, %165, %164 : i32
    %167 = btor.ite %10, %9, %163 : i32
    %168 = btor.ite %8, %7, %163 : i32
    %169 = btor.cmp eq, %168, %167 : i32
    %170 = btor.ite %6, %5, %32 : i64
    %171 = btor.ite %4, %3, %32 : i64
    %172 = btor.cmp eq, %171, %170 : i64
    %173 = btor.and %172, %169 : i1
    %174 = btor.and %173, %166 : i1
    %175 = btor.not %174 : i1
    %176 = btor.and %45, %175 : i1
    btor.assert_not(%176)
    br ^bb1(%82, %29, %91, %31, %43, %92, %97, %92, %40, %98, %100, %98, %102, %107, %136, %141, %146, %148, %150, %152, %154, %156, %158, %160, %162, %93, %94, %93, %94 : i64, i1, i64, i1, i32, i1, i32, i1, i32, i1, i32, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)
  }
}
