module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv8_in8() -> i8
  llvm.func @nd_bv8_in6() -> i8
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @nd_bv8_in7() -> i8
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @nd_bv256_in9() -> i256
  llvm.func @nd_bv8_in2() -> i8
  llvm.func @nd_bv8_in0() -> i8
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv16_in1() -> i16
  llvm.func @nd_bv8_st7() -> i8
  llvm.func @nd_bv8_st3() -> i8
  llvm.func @nd_bv256_st1() -> i256
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv256_st0() -> i256
  llvm.func @main() {
    %0 = llvm.call @nd_bv256_st0() : () -> i256
    %1 = llvm.trunc %0 : i256 to i256
    %2 = llvm.call @nd_bv256_st1() : () -> i256
    %3 = llvm.trunc %2 : i256 to i256
    %4 = llvm.mlir.constant(false) : i1
    %5 = llvm.call @nd_bv8_st3() : () -> i8
    %6 = llvm.mlir.constant(true) : i1
    %7 = llvm.zext %6 : i1 to i64
    %8 = llvm.mlir.constant(3 : i64) : i64
    %9 = llvm.zext %5 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%8, %9, %7) : (i64, i64, i64) -> ()
    %10 = llvm.trunc %5 : i8 to i1
    %11 = llvm.call @nd_bv8_st7() : () -> i8
    %12 = llvm.mlir.constant(true) : i1
    %13 = llvm.zext %12 : i1 to i64
    %14 = llvm.mlir.constant(7 : i64) : i64
    %15 = llvm.zext %11 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%14, %15, %13) : (i64, i64, i64) -> ()
    %16 = llvm.trunc %11 : i8 to i1
    llvm.br ^bb1(%1, %3, %4, %10, %4, %4, %4, %16 : i256, i256, i1, i1, i1, i1, i1, i1)
  ^bb1(%17: i256, %18: i256, %19: i1, %20: i1, %21: i1, %22: i1, %23: i1, %24: i1):  // 2 preds: ^bb0, ^bb2
    %25 = llvm.call @nd_bv16_in1() : () -> i16
    %26 = llvm.mlir.constant(13 : i13) : i13
    %27 = llvm.zext %26 : i13 to i64
    %28 = llvm.mlir.constant(1 : i64) : i64
    %29 = llvm.zext %25 : i16 to i64
    llvm.call @btor2mlir_print_input_num(%28, %29, %27) : (i64, i64, i64) -> ()
    %30 = llvm.trunc %25 : i16 to i13
    %31 = llvm.mlir.constant(12 : i13) : i13
    %32 = llvm.lshr %30, %31  : i13
    %33 = llvm.trunc %32 : i13 to i1
    %34 = llvm.mlir.constant(11 : i13) : i13
    %35 = llvm.lshr %30, %34  : i13
    %36 = llvm.trunc %35 : i13 to i1
    %37 = llvm.or %36, %33  : i1
    %38 = llvm.select %37, %18, %17 : i1, i256
    %39 = llvm.mlir.constant(0 : i256) : i256
    %40 = llvm.call @nd_bv8_in0() : () -> i8
    %41 = llvm.mlir.constant(true) : i1
    %42 = llvm.zext %41 : i1 to i64
    %43 = llvm.mlir.constant(0 : i64) : i64
    %44 = llvm.zext %40 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%43, %44, %42) : (i64, i64, i64) -> ()
    %45 = llvm.trunc %40 : i8 to i1
    %46 = llvm.select %45, %39, %38 : i1, i256
    %47 = llvm.call @nd_bv8_in2() : () -> i8
    %48 = llvm.mlir.constant(true) : i1
    %49 = llvm.zext %48 : i1 to i64
    %50 = llvm.mlir.constant(2 : i64) : i64
    %51 = llvm.zext %47 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%50, %51, %49) : (i64, i64, i64) -> ()
    %52 = llvm.trunc %47 : i8 to i1
    %53 = llvm.select %52, %46, %17 : i1, i256
    %54 = llvm.mlir.constant(false) : i1
    %55 = llvm.select %54, %39, %53 : i1, i256
    %56 = llvm.call @nd_bv256_in9() : () -> i256
    %57 = llvm.trunc %56 : i256 to i256
    %58 = llvm.mlir.constant(true) : i1
    %59 = llvm.xor %52, %58  : i1
    %60 = llvm.icmp "eq" %45, %20 : i1
    %61 = llvm.mlir.constant(true) : i1
    %62 = llvm.xor %45, %61  : i1
    %63 = llvm.and %62, %60  : i1
    %64 = llvm.and %23, %63  : i1
    %65 = llvm.and %64, %22  : i1
    %66 = llvm.mlir.constant(10 : i13) : i13
    %67 = llvm.lshr %30, %66  : i13
    %68 = llvm.trunc %67 : i13 to i1
    %69 = llvm.or %68, %36  : i1
    %70 = llvm.or %45, %69  : i1
    %71 = llvm.mlir.constant(true) : i1
    %72 = llvm.xor %70, %71  : i1
    %73 = llvm.or %72, %65  : i1
    %74 = llvm.or %73, %59  : i1
    %75 = llvm.select %74, %18, %57 : i1, i256
    %76 = llvm.select %54, %39, %75 : i1, i256
    %77 = llvm.select %52, %73, %19 : i1, i1
    %78 = llvm.select %54, %54, %77 : i1, i1
    %79 = llvm.select %52, %45, %20 : i1, i1
    %80 = llvm.select %54, %54, %79 : i1, i1
    %81 = llvm.or %45, %37  : i1
    %82 = llvm.and %19, %63  : i1
    %83 = llvm.and %82, %21  : i1
    %84 = llvm.mlir.constant(true) : i1
    %85 = llvm.xor %83, %84  : i1
    %86 = llvm.select %85, %81, %21 : i1, i1
    %87 = llvm.select %52, %86, %21 : i1, i1
    %88 = llvm.select %54, %54, %87 : i1, i1
    %89 = llvm.mlir.constant(true) : i1
    %90 = llvm.xor %65, %89  : i1
    %91 = llvm.select %90, %70, %22 : i1, i1
    %92 = llvm.select %52, %91, %22 : i1, i1
    %93 = llvm.select %54, %54, %92 : i1, i1
    %94 = llvm.call @nd_bv8_in3() : () -> i8
    %95 = llvm.mlir.constant(true) : i1
    %96 = llvm.zext %95 : i1 to i64
    %97 = llvm.mlir.constant(3 : i64) : i64
    %98 = llvm.zext %94 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%97, %98, %96) : (i64, i64, i64) -> ()
    %99 = llvm.trunc %94 : i8 to i1
    %100 = llvm.mlir.constant(true) : i1
    %101 = llvm.xor %99, %100  : i1
    %102 = llvm.mlir.constant(-3 : i3) : i3
    %103 = llvm.call @nd_bv8_in5() : () -> i8
    %104 = llvm.mlir.constant(3 : i3) : i3
    %105 = llvm.zext %104 : i3 to i64
    %106 = llvm.mlir.constant(5 : i64) : i64
    %107 = llvm.zext %103 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%106, %107, %105) : (i64, i64, i64) -> ()
    %108 = llvm.trunc %103 : i8 to i3
    %109 = llvm.icmp "eq" %108, %102 : i3
    %110 = llvm.and %24, %109  : i1
    %111 = llvm.and %110, %101  : i1
    %112 = llvm.call @nd_bv8_in7() : () -> i8
    %113 = llvm.mlir.constant(true) : i1
    %114 = llvm.zext %113 : i1 to i64
    %115 = llvm.mlir.constant(7 : i64) : i64
    %116 = llvm.zext %112 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%115, %116, %114) : (i64, i64, i64) -> ()
    %117 = llvm.trunc %112 : i8 to i1
    %118 = llvm.mlir.constant(9 : i13) : i13
    %119 = llvm.lshr %30, %118  : i13
    %120 = llvm.trunc %119 : i13 to i1
    %121 = llvm.and %120, %117  : i1
    %122 = llvm.mlir.constant(8 : i13) : i13
    %123 = llvm.lshr %30, %122  : i13
    %124 = llvm.trunc %123 : i13 to i1
    %125 = llvm.or %45, %124  : i1
    %126 = llvm.or %125, %121  : i1
    %127 = llvm.or %126, %111  : i1
    %128 = llvm.mlir.constant(true) : i1
    %129 = llvm.xor %124, %128  : i1
    %130 = llvm.or %45, %129  : i1
    %131 = llvm.or %130, %120  : i1
    %132 = llvm.and %131, %127  : i1
    %133 = llvm.mlir.constant(true) : i1
    %134 = llvm.xor %132, %133  : i1
    %135 = llvm.select %52, %134, %23 : i1, i1
    %136 = llvm.select %54, %54, %135 : i1, i1
    %137 = llvm.call @nd_bv8_in4() : () -> i8
    %138 = llvm.mlir.constant(true) : i1
    %139 = llvm.zext %138 : i1 to i64
    %140 = llvm.mlir.constant(4 : i64) : i64
    %141 = llvm.zext %137 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%140, %141, %139) : (i64, i64, i64) -> ()
    %142 = llvm.trunc %137 : i8 to i1
    %143 = llvm.mlir.constant(1 : i3) : i3
    %144 = llvm.call @nd_bv8_in6() : () -> i8
    %145 = llvm.mlir.constant(3 : i3) : i3
    %146 = llvm.zext %145 : i3 to i64
    %147 = llvm.mlir.constant(6 : i64) : i64
    %148 = llvm.zext %144 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%147, %148, %146) : (i64, i64, i64) -> ()
    %149 = llvm.trunc %144 : i8 to i3
    %150 = llvm.icmp "eq" %149, %143 : i3
    %151 = llvm.select %150, %54, %54 : i1, i1
    %152 = llvm.mlir.constant(3 : i3) : i3
    %153 = llvm.icmp "eq" %149, %152 : i3
    %154 = llvm.select %153, %54, %54 : i1, i1
    %155 = llvm.mlir.constant(2 : i3) : i3
    %156 = llvm.icmp "eq" %149, %155 : i3
    %157 = llvm.or %156, %153  : i1
    %158 = llvm.select %157, %154, %151 : i1, i1
    %159 = llvm.mlir.constant(true) : i1
    %160 = llvm.icmp "eq" %149, %102 : i3
    %161 = llvm.select %160, %159, %54 : i1, i1
    %162 = llvm.mlir.constant(-1 : i3) : i3
    %163 = llvm.icmp "eq" %149, %162 : i3
    %164 = llvm.select %163, %54, %54 : i1, i1
    %165 = llvm.mlir.constant(-2 : i3) : i3
    %166 = llvm.icmp "eq" %149, %165 : i3
    %167 = llvm.or %166, %163  : i1
    %168 = llvm.select %167, %164, %161 : i1, i1
    %169 = llvm.mlir.constant(-4 : i3) : i3
    %170 = llvm.icmp "eq" %149, %169 : i3
    %171 = llvm.mlir.constant(1 : i2) : i2
    %172 = llvm.zext %160 : i1 to i2
    %173 = llvm.shl %172, %171  : i2
    %174 = llvm.zext %170 : i1 to i2
    %175 = llvm.or %173, %174  : i2
    %176 = llvm.mlir.constant(2 : i3) : i3
    %177 = llvm.zext %167 : i1 to i3
    %178 = llvm.shl %177, %176  : i3
    %179 = llvm.zext %175 : i2 to i3
    %180 = llvm.or %178, %179  : i3
    %181 = llvm.bitcast %180 : i3 to vector<3xi1>
    %182 = "llvm.intr.vector.reduce.or"(%181) : (vector<3xi1>) -> i1
    %183 = llvm.select %182, %168, %158 : i1, i1
    %184 = llvm.icmp "eq" %108, %143 : i3
    %185 = llvm.select %184, %54, %183 : i1, i1
    %186 = llvm.icmp "eq" %108, %152 : i3
    %187 = llvm.select %186, %54, %54 : i1, i1
    %188 = llvm.icmp "eq" %108, %155 : i3
    %189 = llvm.or %188, %186  : i1
    %190 = llvm.select %189, %187, %185 : i1, i1
    %191 = llvm.icmp "eq" %108, %102 : i3
    %192 = llvm.select %191, %54, %54 : i1, i1
    %193 = llvm.icmp "eq" %108, %162 : i3
    %194 = llvm.select %193, %54, %54 : i1, i1
    %195 = llvm.icmp "eq" %108, %165 : i3
    %196 = llvm.or %195, %193  : i1
    %197 = llvm.select %196, %194, %192 : i1, i1
    %198 = llvm.icmp "eq" %108, %169 : i3
    %199 = llvm.mlir.constant(1 : i2) : i2
    %200 = llvm.zext %191 : i1 to i2
    %201 = llvm.shl %200, %199  : i2
    %202 = llvm.zext %198 : i1 to i2
    %203 = llvm.or %201, %202  : i2
    %204 = llvm.mlir.constant(2 : i3) : i3
    %205 = llvm.zext %196 : i1 to i3
    %206 = llvm.shl %205, %204  : i3
    %207 = llvm.zext %203 : i2 to i3
    %208 = llvm.or %206, %207  : i3
    %209 = llvm.bitcast %208 : i3 to vector<3xi1>
    %210 = "llvm.intr.vector.reduce.or"(%209) : (vector<3xi1>) -> i1
    %211 = llvm.select %210, %197, %190 : i1, i1
    %212 = llvm.or %45, %211  : i1
    %213 = llvm.mlir.constant(true) : i1
    %214 = llvm.xor %212, %213  : i1
    %215 = llvm.or %214, %59  : i1
    %216 = llvm.select %215, %24, %142 : i1, i1
    %217 = llvm.select %54, %54, %216 : i1, i1
    %218 = llvm.call @nd_bv8_in8() : () -> i8
    %219 = llvm.mlir.constant(true) : i1
    %220 = llvm.zext %219 : i1 to i64
    %221 = llvm.mlir.constant(8 : i64) : i64
    %222 = llvm.zext %218 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%221, %222, %220) : (i64, i64, i64) -> ()
    %223 = llvm.trunc %218 : i8 to i1
    %224 = llvm.or %223, %85  : i1
    %225 = llvm.and %37, %224  : i1
    %226 = llvm.select %225, %18, %17 : i1, i256
    %227 = llvm.select %224, %39, %17 : i1, i256
    %228 = llvm.select %45, %227, %226 : i1, i256
    %229 = llvm.select %52, %228, %17 : i1, i256
    %230 = llvm.icmp "eq" %53, %229 : i256
    %231 = llvm.mlir.constant(true) : i1
    %232 = llvm.xor %230, %231  : i1
    %233 = llvm.and %159, %232  : i1
    %234 = llvm.mlir.constant(true) : i1
    %235 = llvm.xor %233, %234  : i1
    llvm.cond_br %235, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%55, %76, %78, %80, %88, %93, %136, %217 : i256, i256, i1, i1, i1, i1, i1, i1)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

