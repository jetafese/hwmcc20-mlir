module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv8_in8() -> i8
  llvm.func @nd_bv8_in6() -> i8
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @nd_bv8_in7() -> i8
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @nd_bv256_in9() -> i256
  llvm.func @nd_bv8_in2() -> i8
  llvm.func @nd_bv8_in0() -> i8
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv16_in1() -> i16
  llvm.func @nd_bv8_st7() -> i8
  llvm.func @nd_bv8_st3() -> i8
  llvm.func @nd_bv256_st1() -> i256
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv256_st0() -> i256
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.call @nd_bv256_st0() : () -> i256
    %2 = llvm.trunc %1 : i256 to i256
    %3 = llvm.call @nd_bv256_st1() : () -> i256
    %4 = llvm.trunc %3 : i256 to i256
    %5 = llvm.call @nd_bv8_st3() : () -> i8
    %6 = llvm.trunc %5 : i8 to i1
    %7 = llvm.call @nd_bv8_st7() : () -> i8
    %8 = llvm.trunc %7 : i8 to i1
    llvm.br ^bb1(%2, %4, %0, %6, %0, %0, %0, %8 : i256, i256, i1, i1, i1, i1, i1, i1)
  ^bb1(%9: i256, %10: i256, %11: i1, %12: i1, %13: i1, %14: i1, %15: i1, %16: i1):  // 2 preds: ^bb0, ^bb2
    %17 = llvm.call @nd_bv16_in1() : () -> i16
    %18 = llvm.trunc %17 : i16 to i13
    %19 = llvm.mlir.constant(12 : i13) : i13
    %20 = llvm.lshr %18, %19  : i13
    %21 = llvm.trunc %20 : i13 to i1
    %22 = llvm.mlir.constant(11 : i13) : i13
    %23 = llvm.lshr %18, %22  : i13
    %24 = llvm.trunc %23 : i13 to i1
    %25 = llvm.or %24, %21  : i1
    %26 = llvm.select %25, %10, %9 : i1, i256
    %27 = llvm.mlir.constant(0 : i256) : i256
    %28 = llvm.call @nd_bv8_in0() : () -> i8
    %29 = llvm.trunc %28 : i8 to i1
    %30 = llvm.select %29, %27, %26 : i1, i256
    %31 = llvm.call @nd_bv8_in2() : () -> i8
    %32 = llvm.trunc %31 : i8 to i1
    %33 = llvm.select %32, %30, %9 : i1, i256
    %34 = llvm.mlir.constant(false) : i1
    %35 = llvm.select %34, %27, %33 : i1, i256
    %36 = llvm.call @nd_bv256_in9() : () -> i256
    %37 = llvm.trunc %36 : i256 to i256
    %38 = llvm.mlir.constant(true) : i1
    %39 = llvm.xor %32, %38  : i1
    %40 = llvm.icmp "eq" %29, %12 : i1
    %41 = llvm.mlir.constant(true) : i1
    %42 = llvm.xor %29, %41  : i1
    %43 = llvm.and %42, %40  : i1
    %44 = llvm.and %15, %43  : i1
    %45 = llvm.and %44, %14  : i1
    %46 = llvm.mlir.constant(10 : i13) : i13
    %47 = llvm.lshr %18, %46  : i13
    %48 = llvm.trunc %47 : i13 to i1
    %49 = llvm.or %48, %24  : i1
    %50 = llvm.or %29, %49  : i1
    %51 = llvm.mlir.constant(true) : i1
    %52 = llvm.xor %50, %51  : i1
    %53 = llvm.or %52, %45  : i1
    %54 = llvm.or %53, %39  : i1
    %55 = llvm.select %54, %10, %37 : i1, i256
    %56 = llvm.select %34, %27, %55 : i1, i256
    %57 = llvm.select %32, %53, %11 : i1, i1
    %58 = llvm.select %34, %34, %57 : i1, i1
    %59 = llvm.select %32, %29, %12 : i1, i1
    %60 = llvm.select %34, %34, %59 : i1, i1
    %61 = llvm.or %29, %25  : i1
    %62 = llvm.and %11, %43  : i1
    %63 = llvm.and %62, %13  : i1
    %64 = llvm.mlir.constant(true) : i1
    %65 = llvm.xor %63, %64  : i1
    %66 = llvm.select %65, %61, %13 : i1, i1
    %67 = llvm.select %32, %66, %13 : i1, i1
    %68 = llvm.select %34, %34, %67 : i1, i1
    %69 = llvm.mlir.constant(true) : i1
    %70 = llvm.xor %45, %69  : i1
    %71 = llvm.select %70, %50, %14 : i1, i1
    %72 = llvm.select %32, %71, %14 : i1, i1
    %73 = llvm.select %34, %34, %72 : i1, i1
    %74 = llvm.call @nd_bv8_in3() : () -> i8
    %75 = llvm.trunc %74 : i8 to i1
    %76 = llvm.mlir.constant(true) : i1
    %77 = llvm.xor %75, %76  : i1
    %78 = llvm.mlir.constant(-3 : i3) : i3
    %79 = llvm.call @nd_bv8_in5() : () -> i8
    %80 = llvm.trunc %79 : i8 to i3
    %81 = llvm.icmp "eq" %80, %78 : i3
    %82 = llvm.and %16, %81  : i1
    %83 = llvm.and %82, %77  : i1
    %84 = llvm.call @nd_bv8_in7() : () -> i8
    %85 = llvm.trunc %84 : i8 to i1
    %86 = llvm.mlir.constant(9 : i13) : i13
    %87 = llvm.lshr %18, %86  : i13
    %88 = llvm.trunc %87 : i13 to i1
    %89 = llvm.and %88, %85  : i1
    %90 = llvm.mlir.constant(8 : i13) : i13
    %91 = llvm.lshr %18, %90  : i13
    %92 = llvm.trunc %91 : i13 to i1
    %93 = llvm.or %29, %92  : i1
    %94 = llvm.or %93, %89  : i1
    %95 = llvm.or %94, %83  : i1
    %96 = llvm.mlir.constant(true) : i1
    %97 = llvm.xor %92, %96  : i1
    %98 = llvm.or %29, %97  : i1
    %99 = llvm.or %98, %88  : i1
    %100 = llvm.and %99, %95  : i1
    %101 = llvm.mlir.constant(true) : i1
    %102 = llvm.xor %100, %101  : i1
    %103 = llvm.select %32, %102, %15 : i1, i1
    %104 = llvm.select %34, %34, %103 : i1, i1
    %105 = llvm.call @nd_bv8_in4() : () -> i8
    %106 = llvm.trunc %105 : i8 to i1
    %107 = llvm.mlir.constant(1 : i3) : i3
    %108 = llvm.call @nd_bv8_in6() : () -> i8
    %109 = llvm.trunc %108 : i8 to i3
    %110 = llvm.icmp "eq" %109, %107 : i3
    %111 = llvm.select %110, %34, %34 : i1, i1
    %112 = llvm.mlir.constant(3 : i3) : i3
    %113 = llvm.icmp "eq" %109, %112 : i3
    %114 = llvm.select %113, %34, %34 : i1, i1
    %115 = llvm.mlir.constant(2 : i3) : i3
    %116 = llvm.icmp "eq" %109, %115 : i3
    %117 = llvm.or %116, %113  : i1
    %118 = llvm.select %117, %114, %111 : i1, i1
    %119 = llvm.mlir.constant(true) : i1
    %120 = llvm.icmp "eq" %109, %78 : i3
    %121 = llvm.select %120, %119, %34 : i1, i1
    %122 = llvm.mlir.constant(-1 : i3) : i3
    %123 = llvm.icmp "eq" %109, %122 : i3
    %124 = llvm.select %123, %34, %34 : i1, i1
    %125 = llvm.mlir.constant(-2 : i3) : i3
    %126 = llvm.icmp "eq" %109, %125 : i3
    %127 = llvm.or %126, %123  : i1
    %128 = llvm.select %127, %124, %121 : i1, i1
    %129 = llvm.mlir.constant(-4 : i3) : i3
    %130 = llvm.icmp "eq" %109, %129 : i3
    %131 = llvm.mlir.constant(1 : i2) : i2
    %132 = llvm.zext %120 : i1 to i2
    %133 = llvm.shl %132, %131  : i2
    %134 = llvm.zext %130 : i1 to i2
    %135 = llvm.or %133, %134  : i2
    %136 = llvm.mlir.constant(2 : i3) : i3
    %137 = llvm.zext %127 : i1 to i3
    %138 = llvm.shl %137, %136  : i3
    %139 = llvm.zext %135 : i2 to i3
    %140 = llvm.or %138, %139  : i3
    %141 = llvm.bitcast %140 : i3 to vector<3xi1>
    %142 = "llvm.intr.vector.reduce.or"(%141) : (vector<3xi1>) -> i1
    %143 = llvm.select %142, %128, %118 : i1, i1
    %144 = llvm.icmp "eq" %80, %107 : i3
    %145 = llvm.select %144, %34, %143 : i1, i1
    %146 = llvm.icmp "eq" %80, %112 : i3
    %147 = llvm.select %146, %34, %34 : i1, i1
    %148 = llvm.icmp "eq" %80, %115 : i3
    %149 = llvm.or %148, %146  : i1
    %150 = llvm.select %149, %147, %145 : i1, i1
    %151 = llvm.icmp "eq" %80, %78 : i3
    %152 = llvm.select %151, %34, %34 : i1, i1
    %153 = llvm.icmp "eq" %80, %122 : i3
    %154 = llvm.select %153, %34, %34 : i1, i1
    %155 = llvm.icmp "eq" %80, %125 : i3
    %156 = llvm.or %155, %153  : i1
    %157 = llvm.select %156, %154, %152 : i1, i1
    %158 = llvm.icmp "eq" %80, %129 : i3
    %159 = llvm.mlir.constant(1 : i2) : i2
    %160 = llvm.zext %151 : i1 to i2
    %161 = llvm.shl %160, %159  : i2
    %162 = llvm.zext %158 : i1 to i2
    %163 = llvm.or %161, %162  : i2
    %164 = llvm.mlir.constant(2 : i3) : i3
    %165 = llvm.zext %156 : i1 to i3
    %166 = llvm.shl %165, %164  : i3
    %167 = llvm.zext %163 : i2 to i3
    %168 = llvm.or %166, %167  : i3
    %169 = llvm.bitcast %168 : i3 to vector<3xi1>
    %170 = "llvm.intr.vector.reduce.or"(%169) : (vector<3xi1>) -> i1
    %171 = llvm.select %170, %157, %150 : i1, i1
    %172 = llvm.or %29, %171  : i1
    %173 = llvm.mlir.constant(true) : i1
    %174 = llvm.xor %172, %173  : i1
    %175 = llvm.or %174, %39  : i1
    %176 = llvm.select %175, %16, %106 : i1, i1
    %177 = llvm.select %34, %34, %176 : i1, i1
    %178 = llvm.call @nd_bv8_in8() : () -> i8
    %179 = llvm.trunc %178 : i8 to i1
    %180 = llvm.or %179, %65  : i1
    %181 = llvm.and %25, %180  : i1
    %182 = llvm.select %181, %10, %9 : i1, i256
    %183 = llvm.select %180, %27, %9 : i1, i256
    %184 = llvm.select %29, %183, %182 : i1, i256
    %185 = llvm.select %32, %184, %9 : i1, i256
    %186 = llvm.icmp "eq" %33, %185 : i256
    %187 = llvm.mlir.constant(true) : i1
    %188 = llvm.xor %186, %187  : i1
    %189 = llvm.and %119, %188  : i1
    %190 = llvm.mlir.constant(true) : i1
    %191 = llvm.xor %189, %190  : i1
    llvm.cond_br %191, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%35, %56, %58, %60, %68, %73, %104, %177 : i256, i256, i1, i1, i1, i1, i1, i1)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

