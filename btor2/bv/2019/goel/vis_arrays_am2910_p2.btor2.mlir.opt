module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv16_in3() -> i16
  llvm.func @nd_bv8_in6() -> i8
  llvm.func @nd_bv8_in1() -> i8
  llvm.func @nd_bv8_in0() -> i8
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.mlir.constant(0 : i3) : i3
    %2 = llvm.mlir.constant(0 : i12) : i12
    llvm.br ^bb1(%0, %1, %1, %2 : i1, i3, i3, i12)
  ^bb1(%3: i1, %4: i3, %5: i3, %6: i12):  // 2 preds: ^bb0, ^bb2
    %7 = llvm.mlir.constant(true) : i1
    %8 = llvm.mlir.constant(0 : i3) : i3
    %9 = llvm.mlir.constant(0 : i4) : i4
    %10 = llvm.call @nd_bv8_in4() : () -> i8
    %11 = llvm.trunc %10 : i8 to i4
    %12 = llvm.icmp "eq" %11, %9 : i4
    %13 = llvm.select %12, %8, %5 : i1, i3
    %14 = llvm.mlir.constant(1 : i3) : i3
    %15 = llvm.add %5, %14  : i3
    %16 = llvm.mlir.constant(-3 : i3) : i3
    %17 = llvm.icmp "ne" %5, %16 : i3
    %18 = llvm.mlir.constant(5 : i4) : i4
    %19 = llvm.icmp "eq" %11, %18 : i4
    %20 = llvm.mlir.constant(4 : i4) : i4
    %21 = llvm.icmp "eq" %11, %20 : i4
    %22 = llvm.mlir.constant(1 : i4) : i4
    %23 = llvm.icmp "eq" %11, %22 : i4
    %24 = llvm.call @nd_bv8_in0() : () -> i8
    %25 = llvm.trunc %24 : i8 to i1
    %26 = llvm.mlir.constant(true) : i1
    %27 = llvm.xor %25, %26  : i1
    %28 = llvm.call @nd_bv8_in1() : () -> i8
    %29 = llvm.trunc %28 : i8 to i1
    %30 = llvm.and %29, %27  : i1
    %31 = llvm.mlir.constant(true) : i1
    %32 = llvm.xor %30, %31  : i1
    %33 = llvm.and %32, %23  : i1
    %34 = llvm.or %33, %21  : i1
    %35 = llvm.or %34, %19  : i1
    %36 = llvm.and %35, %17  : i1
    %37 = llvm.select %36, %15, %13 : i1, i3
    %38 = llvm.sub %5, %14  : i3
    %39 = llvm.icmp "ne" %5, %8 : i3
    %40 = llvm.mlir.constant(-1 : i4) : i4
    %41 = llvm.icmp "eq" %11, %40 : i4
    %42 = llvm.mlir.constant(-8 : i4) : i4
    %43 = llvm.icmp "eq" %11, %42 : i4
    %44 = llvm.or %43, %41  : i1
    %45 = llvm.bitcast %6 : i12 to vector<12xi1>
    %46 = "llvm.intr.vector.reduce.or"(%45) : (vector<12xi1>) -> i1
    %47 = llvm.mlir.constant(true) : i1
    %48 = llvm.xor %46, %47  : i1
    %49 = llvm.and %48, %44  : i1
    %50 = llvm.icmp "eq" %11, %40 : i4
    %51 = llvm.mlir.constant(-3 : i4) : i4
    %52 = llvm.icmp "eq" %11, %51 : i4
    %53 = llvm.mlir.constant(-5 : i4) : i4
    %54 = llvm.icmp "eq" %11, %53 : i4
    %55 = llvm.mlir.constant(-6 : i4) : i4
    %56 = llvm.icmp "eq" %11, %55 : i4
    %57 = llvm.or %56, %54  : i1
    %58 = llvm.or %57, %52  : i1
    %59 = llvm.or %58, %50  : i1
    %60 = llvm.mlir.constant(true) : i1
    %61 = llvm.xor %30, %60  : i1
    %62 = llvm.and %61, %59  : i1
    %63 = llvm.or %62, %49  : i1
    %64 = llvm.and %63, %39  : i1
    %65 = llvm.select %64, %38, %37 : i1, i3
    %66 = llvm.mlir.constant(1 : i12) : i12
    %67 = llvm.sub %6, %66  : i12
    %68 = llvm.call @nd_bv8_in6() : () -> i8
    %69 = llvm.trunc %68 : i8 to i1
    %70 = llvm.icmp "eq" %11, %40 : i4
    %71 = llvm.mlir.constant(-7 : i4) : i4
    %72 = llvm.icmp "eq" %11, %71 : i4
    %73 = llvm.icmp "eq" %11, %42 : i4
    %74 = llvm.or %73, %72  : i1
    %75 = llvm.or %74, %70  : i1
    %76 = llvm.and %46, %75  : i1
    %77 = llvm.and %76, %69  : i1
    %78 = llvm.select %77, %67, %6 : i1, i12
    %79 = llvm.call @nd_bv16_in3() : () -> i16
    %80 = llvm.trunc %79 : i16 to i12
    %81 = llvm.mlir.constant(true) : i1
    %82 = llvm.xor %69, %81  : i1
    %83 = llvm.icmp "eq" %11, %20 : i4
    %84 = llvm.mlir.constant(true) : i1
    %85 = llvm.xor %30, %84  : i1
    %86 = llvm.and %85, %83  : i1
    %87 = llvm.mlir.constant(-4 : i4) : i4
    %88 = llvm.icmp "eq" %11, %87 : i4
    %89 = llvm.or %88, %86  : i1
    %90 = llvm.or %89, %82  : i1
    %91 = llvm.select %90, %80, %78 : i1, i12
    %92 = llvm.mlir.constant(-1 : i3) : i3
    %93 = llvm.icmp "eq" %5, %92 : i3
    %94 = llvm.mlir.constant(-2 : i3) : i3
    %95 = llvm.icmp "ne" %4, %94 : i3
    %96 = llvm.mlir.constant(false) : i1
    %97 = llvm.icmp "eq" %3, %96 : i1
    %98 = llvm.or %97, %95  : i1
    %99 = llvm.or %98, %93  : i1
    %100 = llvm.mlir.constant(true) : i1
    %101 = llvm.xor %99, %100  : i1
    %102 = llvm.and %7, %101  : i1
    %103 = llvm.mlir.constant(true) : i1
    %104 = llvm.xor %102, %103  : i1
    llvm.cond_br %104, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%7, %5, %65, %91 : i1, i3, i3, i12)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

