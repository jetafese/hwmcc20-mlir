module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv16_in3() -> i16
  llvm.func @nd_bv8_in6() -> i8
  llvm.func @nd_bv8_in1() -> i8
  llvm.func @nd_bv8_in0() -> i8
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.mlir.constant(0 : i3) : i3
    %2 = llvm.mlir.constant(0 : i12) : i12
    llvm.br ^bb1(%0, %1, %1, %2 : i1, i3, i3, i12)
  ^bb1(%3: i1, %4: i3, %5: i3, %6: i12):  // 2 preds: ^bb0, ^bb2
    %7 = llvm.mlir.constant(true) : i1
    %8 = llvm.mlir.constant(0 : i3) : i3
    %9 = llvm.mlir.constant(0 : i4) : i4
    %10 = llvm.call @nd_bv8_in4() : () -> i8
    %11 = llvm.mlir.constant(4 : i4) : i4
    %12 = llvm.zext %11 : i4 to i64
    %13 = llvm.mlir.constant(4 : i64) : i64
    %14 = llvm.zext %10 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%13, %14, %12) : (i64, i64, i64) -> ()
    %15 = llvm.trunc %10 : i8 to i4
    %16 = llvm.icmp "eq" %15, %9 : i4
    %17 = llvm.select %16, %8, %5 : i1, i3
    %18 = llvm.mlir.constant(1 : i3) : i3
    %19 = llvm.add %5, %18  : i3
    %20 = llvm.mlir.constant(-3 : i3) : i3
    %21 = llvm.icmp "ne" %5, %20 : i3
    %22 = llvm.mlir.constant(5 : i4) : i4
    %23 = llvm.icmp "eq" %15, %22 : i4
    %24 = llvm.mlir.constant(4 : i4) : i4
    %25 = llvm.icmp "eq" %15, %24 : i4
    %26 = llvm.mlir.constant(1 : i4) : i4
    %27 = llvm.icmp "eq" %15, %26 : i4
    %28 = llvm.call @nd_bv8_in0() : () -> i8
    %29 = llvm.mlir.constant(true) : i1
    %30 = llvm.zext %29 : i1 to i64
    %31 = llvm.mlir.constant(0 : i64) : i64
    %32 = llvm.zext %28 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%31, %32, %30) : (i64, i64, i64) -> ()
    %33 = llvm.trunc %28 : i8 to i1
    %34 = llvm.mlir.constant(true) : i1
    %35 = llvm.xor %33, %34  : i1
    %36 = llvm.call @nd_bv8_in1() : () -> i8
    %37 = llvm.mlir.constant(true) : i1
    %38 = llvm.zext %37 : i1 to i64
    %39 = llvm.mlir.constant(1 : i64) : i64
    %40 = llvm.zext %36 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%39, %40, %38) : (i64, i64, i64) -> ()
    %41 = llvm.trunc %36 : i8 to i1
    %42 = llvm.and %41, %35  : i1
    %43 = llvm.mlir.constant(true) : i1
    %44 = llvm.xor %42, %43  : i1
    %45 = llvm.and %44, %27  : i1
    %46 = llvm.or %45, %25  : i1
    %47 = llvm.or %46, %23  : i1
    %48 = llvm.and %47, %21  : i1
    %49 = llvm.select %48, %19, %17 : i1, i3
    %50 = llvm.sub %5, %18  : i3
    %51 = llvm.icmp "ne" %5, %8 : i3
    %52 = llvm.mlir.constant(-1 : i4) : i4
    %53 = llvm.icmp "eq" %15, %52 : i4
    %54 = llvm.mlir.constant(-8 : i4) : i4
    %55 = llvm.icmp "eq" %15, %54 : i4
    %56 = llvm.or %55, %53  : i1
    %57 = llvm.bitcast %6 : i12 to vector<12xi1>
    %58 = "llvm.intr.vector.reduce.or"(%57) : (vector<12xi1>) -> i1
    %59 = llvm.mlir.constant(true) : i1
    %60 = llvm.xor %58, %59  : i1
    %61 = llvm.and %60, %56  : i1
    %62 = llvm.icmp "eq" %15, %52 : i4
    %63 = llvm.mlir.constant(-3 : i4) : i4
    %64 = llvm.icmp "eq" %15, %63 : i4
    %65 = llvm.mlir.constant(-5 : i4) : i4
    %66 = llvm.icmp "eq" %15, %65 : i4
    %67 = llvm.mlir.constant(-6 : i4) : i4
    %68 = llvm.icmp "eq" %15, %67 : i4
    %69 = llvm.or %68, %66  : i1
    %70 = llvm.or %69, %64  : i1
    %71 = llvm.or %70, %62  : i1
    %72 = llvm.mlir.constant(true) : i1
    %73 = llvm.xor %42, %72  : i1
    %74 = llvm.and %73, %71  : i1
    %75 = llvm.or %74, %61  : i1
    %76 = llvm.and %75, %51  : i1
    %77 = llvm.select %76, %50, %49 : i1, i3
    %78 = llvm.mlir.constant(1 : i12) : i12
    %79 = llvm.sub %6, %78  : i12
    %80 = llvm.call @nd_bv8_in6() : () -> i8
    %81 = llvm.mlir.constant(true) : i1
    %82 = llvm.zext %81 : i1 to i64
    %83 = llvm.mlir.constant(6 : i64) : i64
    %84 = llvm.zext %80 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%83, %84, %82) : (i64, i64, i64) -> ()
    %85 = llvm.trunc %80 : i8 to i1
    %86 = llvm.icmp "eq" %15, %52 : i4
    %87 = llvm.mlir.constant(-7 : i4) : i4
    %88 = llvm.icmp "eq" %15, %87 : i4
    %89 = llvm.icmp "eq" %15, %54 : i4
    %90 = llvm.or %89, %88  : i1
    %91 = llvm.or %90, %86  : i1
    %92 = llvm.and %58, %91  : i1
    %93 = llvm.and %92, %85  : i1
    %94 = llvm.select %93, %79, %6 : i1, i12
    %95 = llvm.call @nd_bv16_in3() : () -> i16
    %96 = llvm.mlir.constant(12 : i12) : i12
    %97 = llvm.zext %96 : i12 to i64
    %98 = llvm.mlir.constant(3 : i64) : i64
    %99 = llvm.zext %95 : i16 to i64
    llvm.call @btor2mlir_print_input_num(%98, %99, %97) : (i64, i64, i64) -> ()
    %100 = llvm.trunc %95 : i16 to i12
    %101 = llvm.mlir.constant(true) : i1
    %102 = llvm.xor %85, %101  : i1
    %103 = llvm.icmp "eq" %15, %24 : i4
    %104 = llvm.mlir.constant(true) : i1
    %105 = llvm.xor %42, %104  : i1
    %106 = llvm.and %105, %103  : i1
    %107 = llvm.mlir.constant(-4 : i4) : i4
    %108 = llvm.icmp "eq" %15, %107 : i4
    %109 = llvm.or %108, %106  : i1
    %110 = llvm.or %109, %102  : i1
    %111 = llvm.select %110, %100, %94 : i1, i12
    %112 = llvm.mlir.constant(-1 : i3) : i3
    %113 = llvm.icmp "eq" %5, %112 : i3
    %114 = llvm.mlir.constant(-2 : i3) : i3
    %115 = llvm.icmp "ne" %4, %114 : i3
    %116 = llvm.mlir.constant(false) : i1
    %117 = llvm.icmp "eq" %3, %116 : i1
    %118 = llvm.or %117, %115  : i1
    %119 = llvm.or %118, %113  : i1
    %120 = llvm.mlir.constant(true) : i1
    %121 = llvm.xor %119, %120  : i1
    %122 = llvm.and %7, %121  : i1
    %123 = llvm.mlir.constant(true) : i1
    %124 = llvm.xor %122, %123  : i1
    llvm.cond_br %124, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%7, %5, %77, %111 : i1, i3, i3, i12)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

