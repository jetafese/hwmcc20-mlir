module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @__SEA_assume(i1)
  llvm.func @nd_bv8_in7() -> i8
  llvm.func @nd_bv8_in6() -> i8
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @nd_bv8_in2() -> i8
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in1() -> i8
  llvm.func @nd_bv8_st24() -> i8
  llvm.func @nd_bv8_st22() -> i8
  llvm.func @nd_bv8_st21() -> i8
  llvm.func @nd_bv8_st20() -> i8
  llvm.func @nd_bv8_st19() -> i8
  llvm.func @nd_bv8_st18() -> i8
  llvm.func @nd_bv8_st17() -> i8
  llvm.func @nd_bv8_st16() -> i8
  llvm.func @nd_bv8_st15() -> i8
  llvm.func @nd_bv8_st14() -> i8
  llvm.func @nd_bv8_st13() -> i8
  llvm.func @nd_bv8_st12() -> i8
  llvm.func @nd_bv8_st11() -> i8
  llvm.func @nd_bv8_st10() -> i8
  llvm.func @nd_bv8_st9() -> i8
  llvm.func @nd_bv8_st8() -> i8
  llvm.func @nd_bv8_st7() -> i8
  llvm.func @nd_bv8_st6() -> i8
  llvm.func @nd_bv8_st5() -> i8
  llvm.func @nd_bv8_st4() -> i8
  llvm.func @nd_bv8_st3() -> i8
  llvm.func @nd_bv8_st2() -> i8
  llvm.func @nd_bv8_st1() -> i8
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv8_st0() -> i8
  llvm.func @main() {
    %0 = llvm.mlir.constant(true) : i1
    %1 = llvm.call @nd_bv8_st0() : () -> i8
    %2 = llvm.trunc %1 : i8 to i8
    %3 = llvm.call @nd_bv8_st1() : () -> i8
    %4 = llvm.trunc %3 : i8 to i6
    %5 = llvm.call @nd_bv8_st2() : () -> i8
    %6 = llvm.trunc %5 : i8 to i8
    %7 = llvm.call @nd_bv8_st3() : () -> i8
    %8 = llvm.trunc %7 : i8 to i8
    %9 = llvm.call @nd_bv8_st4() : () -> i8
    %10 = llvm.trunc %9 : i8 to i8
    %11 = llvm.call @nd_bv8_st5() : () -> i8
    %12 = llvm.trunc %11 : i8 to i8
    %13 = llvm.call @nd_bv8_st6() : () -> i8
    %14 = llvm.trunc %13 : i8 to i8
    %15 = llvm.call @nd_bv8_st7() : () -> i8
    %16 = llvm.trunc %15 : i8 to i8
    %17 = llvm.call @nd_bv8_st8() : () -> i8
    %18 = llvm.trunc %17 : i8 to i8
    %19 = llvm.call @nd_bv8_st9() : () -> i8
    %20 = llvm.trunc %19 : i8 to i8
    %21 = llvm.call @nd_bv8_st10() : () -> i8
    %22 = llvm.trunc %21 : i8 to i8
    %23 = llvm.call @nd_bv8_st11() : () -> i8
    %24 = llvm.trunc %23 : i8 to i8
    %25 = llvm.call @nd_bv8_st12() : () -> i8
    %26 = llvm.trunc %25 : i8 to i8
    %27 = llvm.call @nd_bv8_st13() : () -> i8
    %28 = llvm.trunc %27 : i8 to i8
    %29 = llvm.call @nd_bv8_st14() : () -> i8
    %30 = llvm.trunc %29 : i8 to i8
    %31 = llvm.call @nd_bv8_st15() : () -> i8
    %32 = llvm.trunc %31 : i8 to i8
    %33 = llvm.call @nd_bv8_st16() : () -> i8
    %34 = llvm.trunc %33 : i8 to i8
    %35 = llvm.call @nd_bv8_st17() : () -> i8
    %36 = llvm.trunc %35 : i8 to i8
    %37 = llvm.call @nd_bv8_st18() : () -> i8
    %38 = llvm.trunc %37 : i8 to i6
    %39 = llvm.call @nd_bv8_st19() : () -> i8
    %40 = llvm.trunc %39 : i8 to i1
    %41 = llvm.call @nd_bv8_st20() : () -> i8
    %42 = llvm.trunc %41 : i8 to i1
    %43 = llvm.call @nd_bv8_st21() : () -> i8
    %44 = llvm.trunc %43 : i8 to i6
    %45 = llvm.call @nd_bv8_st22() : () -> i8
    %46 = llvm.trunc %45 : i8 to i8
    %47 = llvm.call @nd_bv8_st24() : () -> i8
    %48 = llvm.trunc %47 : i8 to i6
    llvm.br ^bb1(%2, %4, %6, %8, %10, %12, %14, %16, %18, %20, %22, %24, %26, %28, %30, %32, %34, %36, %38, %40, %42, %44, %46, %0, %48 : i8, i6, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i6, i1, i1, i6, i8, i1, i6)
  ^bb1(%49: i8, %50: i6, %51: i8, %52: i8, %53: i8, %54: i8, %55: i8, %56: i8, %57: i8, %58: i8, %59: i8, %60: i8, %61: i8, %62: i8, %63: i8, %64: i8, %65: i8, %66: i8, %67: i6, %68: i1, %69: i1, %70: i6, %71: i8, %72: i1, %73: i6):  // 2 preds: ^bb0, ^bb2
    %74 = llvm.call @nd_bv8_in1() : () -> i8
    %75 = llvm.trunc %74 : i8 to i8
    %76 = llvm.mlir.constant(-16 : i5) : i5
    %77 = llvm.mlir.constant(0 : i6) : i6
    %78 = llvm.lshr %73, %77  : i6
    %79 = llvm.trunc %78 : i6 to i5
    %80 = llvm.icmp "eq" %79, %76 : i5
    %81 = llvm.call @nd_bv8_in3() : () -> i8
    %82 = llvm.trunc %81 : i8 to i1
    %83 = llvm.and %82, %80  : i1
    %84 = llvm.select %83, %75, %49 : i1, i8
    %85 = llvm.mlir.constant(0 : i8) : i8
    %86 = llvm.call @nd_bv8_in4() : () -> i8
    %87 = llvm.trunc %86 : i8 to i1
    %88 = llvm.select %87, %85, %84 : i1, i8
    %89 = llvm.call @nd_bv8_in2() : () -> i8
    %90 = llvm.trunc %89 : i8 to i1
    %91 = llvm.zext %90 : i1 to i6
    %92 = llvm.add %50, %91  : i6
    %93 = llvm.or %82, %90  : i1
    %94 = llvm.or %93, %87  : i1
    %95 = llvm.select %94, %92, %50 : i1, i6
    %96 = llvm.mlir.constant(0 : i6) : i6
    %97 = llvm.select %87, %96, %95 : i1, i6
    %98 = llvm.mlir.constant(-1 : i4) : i4
    %99 = llvm.zext %98 : i4 to i5
    %100 = llvm.icmp "eq" %79, %99 : i5
    %101 = llvm.and %82, %100  : i1
    %102 = llvm.select %101, %75, %51 : i1, i8
    %103 = llvm.select %87, %85, %102 : i1, i8
    %104 = llvm.mlir.constant(-2 : i4) : i4
    %105 = llvm.zext %104 : i4 to i5
    %106 = llvm.icmp "eq" %79, %105 : i5
    %107 = llvm.and %82, %106  : i1
    %108 = llvm.select %107, %75, %52 : i1, i8
    %109 = llvm.select %87, %85, %108 : i1, i8
    %110 = llvm.mlir.constant(-3 : i4) : i4
    %111 = llvm.zext %110 : i4 to i5
    %112 = llvm.icmp "eq" %79, %111 : i5
    %113 = llvm.and %82, %112  : i1
    %114 = llvm.select %113, %75, %53 : i1, i8
    %115 = llvm.select %87, %85, %114 : i1, i8
    %116 = llvm.mlir.constant(-4 : i4) : i4
    %117 = llvm.zext %116 : i4 to i5
    %118 = llvm.icmp "eq" %79, %117 : i5
    %119 = llvm.and %82, %118  : i1
    %120 = llvm.select %119, %75, %54 : i1, i8
    %121 = llvm.select %87, %85, %120 : i1, i8
    %122 = llvm.mlir.constant(-5 : i4) : i4
    %123 = llvm.zext %122 : i4 to i5
    %124 = llvm.icmp "eq" %79, %123 : i5
    %125 = llvm.and %82, %124  : i1
    %126 = llvm.select %125, %75, %55 : i1, i8
    %127 = llvm.select %87, %85, %126 : i1, i8
    %128 = llvm.mlir.constant(-6 : i4) : i4
    %129 = llvm.zext %128 : i4 to i5
    %130 = llvm.icmp "eq" %79, %129 : i5
    %131 = llvm.and %82, %130  : i1
    %132 = llvm.select %131, %75, %56 : i1, i8
    %133 = llvm.select %87, %85, %132 : i1, i8
    %134 = llvm.mlir.constant(-7 : i4) : i4
    %135 = llvm.zext %134 : i4 to i5
    %136 = llvm.icmp "eq" %79, %135 : i5
    %137 = llvm.and %82, %136  : i1
    %138 = llvm.select %137, %75, %57 : i1, i8
    %139 = llvm.select %87, %85, %138 : i1, i8
    %140 = llvm.mlir.constant(-8 : i4) : i4
    %141 = llvm.zext %140 : i4 to i5
    %142 = llvm.icmp "eq" %79, %141 : i5
    %143 = llvm.and %82, %142  : i1
    %144 = llvm.select %143, %75, %58 : i1, i8
    %145 = llvm.select %87, %85, %144 : i1, i8
    %146 = llvm.mlir.constant(-1 : i3) : i3
    %147 = llvm.zext %146 : i3 to i5
    %148 = llvm.icmp "eq" %79, %147 : i5
    %149 = llvm.and %82, %148  : i1
    %150 = llvm.select %149, %75, %59 : i1, i8
    %151 = llvm.select %87, %85, %150 : i1, i8
    %152 = llvm.mlir.constant(-2 : i3) : i3
    %153 = llvm.zext %152 : i3 to i5
    %154 = llvm.icmp "eq" %79, %153 : i5
    %155 = llvm.and %82, %154  : i1
    %156 = llvm.select %155, %75, %60 : i1, i8
    %157 = llvm.select %87, %85, %156 : i1, i8
    %158 = llvm.mlir.constant(-3 : i3) : i3
    %159 = llvm.zext %158 : i3 to i5
    %160 = llvm.icmp "eq" %79, %159 : i5
    %161 = llvm.and %82, %160  : i1
    %162 = llvm.select %161, %75, %61 : i1, i8
    %163 = llvm.select %87, %85, %162 : i1, i8
    %164 = llvm.mlir.constant(-4 : i3) : i3
    %165 = llvm.zext %164 : i3 to i5
    %166 = llvm.icmp "eq" %79, %165 : i5
    %167 = llvm.and %82, %166  : i1
    %168 = llvm.select %167, %75, %62 : i1, i8
    %169 = llvm.select %87, %85, %168 : i1, i8
    %170 = llvm.mlir.constant(-1 : i2) : i2
    %171 = llvm.zext %170 : i2 to i5
    %172 = llvm.icmp "eq" %79, %171 : i5
    %173 = llvm.and %82, %172  : i1
    %174 = llvm.select %173, %75, %63 : i1, i8
    %175 = llvm.select %87, %85, %174 : i1, i8
    %176 = llvm.mlir.constant(-2 : i2) : i2
    %177 = llvm.zext %176 : i2 to i5
    %178 = llvm.icmp "eq" %79, %177 : i5
    %179 = llvm.and %82, %178  : i1
    %180 = llvm.select %179, %75, %64 : i1, i8
    %181 = llvm.select %87, %85, %180 : i1, i8
    %182 = llvm.mlir.constant(true) : i1
    %183 = llvm.zext %182 : i1 to i5
    %184 = llvm.icmp "eq" %79, %183 : i5
    %185 = llvm.and %82, %184  : i1
    %186 = llvm.select %185, %75, %65 : i1, i8
    %187 = llvm.select %87, %85, %186 : i1, i8
    %188 = llvm.bitcast %79 : i5 to vector<5xi1>
    %189 = "llvm.intr.vector.reduce.or"(%188) : (vector<5xi1>) -> i1
    %190 = llvm.mlir.constant(true) : i1
    %191 = llvm.xor %189, %190  : i1
    %192 = llvm.and %82, %191  : i1
    %193 = llvm.select %192, %75, %66 : i1, i8
    %194 = llvm.select %87, %85, %193 : i1, i8
    %195 = llvm.zext %90 : i1 to i6
    %196 = llvm.zext %82 : i1 to i6
    %197 = llvm.add %67, %196  : i6
    %198 = llvm.sub %197, %195  : i6
    %199 = llvm.select %87, %96, %198 : i1, i6
    %200 = llvm.call @nd_bv8_in5() : () -> i8
    %201 = llvm.trunc %200 : i8 to i1
    %202 = llvm.and %201, %82  : i1
    %203 = llvm.or %68, %202  : i1
    %204 = llvm.mlir.constant(true) : i1
    %205 = llvm.xor %68, %204  : i1
    %206 = llvm.select %205, %203, %68 : i1, i1
    %207 = llvm.mlir.constant(false) : i1
    %208 = llvm.select %87, %207, %206 : i1, i1
    %209 = llvm.zext %90 : i1 to i6
    %210 = llvm.mlir.constant(true) : i1
    %211 = llvm.xor %68, %210  : i1
    %212 = llvm.and %82, %211  : i1
    %213 = llvm.zext %212 : i1 to i6
    %214 = llvm.add %70, %213  : i6
    %215 = llvm.sub %214, %209  : i6
    %216 = llvm.select %87, %96, %215 : i1, i6
    %217 = llvm.bitcast %216 : i6 to vector<6xi1>
    %218 = "llvm.intr.vector.reduce.or"(%217) : (vector<6xi1>) -> i1
    %219 = llvm.mlir.constant(true) : i1
    %220 = llvm.xor %218, %219  : i1
    %221 = llvm.bitcast %70 : i6 to vector<6xi1>
    %222 = "llvm.intr.vector.reduce.or"(%221) : (vector<6xi1>) -> i1
    %223 = llvm.mlir.constant(true) : i1
    %224 = llvm.xor %69, %223  : i1
    %225 = llvm.and %68, %224  : i1
    %226 = llvm.and %225, %222  : i1
    %227 = llvm.and %226, %220  : i1
    %228 = llvm.or %227, %69  : i1
    %229 = llvm.select %182, %228, %69 : i1, i1
    %230 = llvm.select %87, %207, %229 : i1, i1
    %231 = llvm.or %82, %90  : i1
    %232 = llvm.or %231, %87  : i1
    %233 = llvm.or %232, %68  : i1
    %234 = llvm.select %233, %216, %70 : i1, i6
    %235 = llvm.select %87, %96, %234 : i1, i6
    %236 = llvm.and %202, %205  : i1
    %237 = llvm.select %236, %75, %71 : i1, i8
    %238 = llvm.select %87, %85, %237 : i1, i8
    %239 = llvm.zext %82 : i1 to i6
    %240 = llvm.add %73, %239  : i6
    %241 = llvm.select %94, %240, %73 : i1, i6
    %242 = llvm.select %87, %96, %241 : i1, i6
    %243 = llvm.mlir.constant(true) : i1
    %244 = llvm.xor %182, %243  : i1
    %245 = llvm.icmp "eq" %87, %72 : i1
    %246 = llvm.or %245, %244  : i1
    llvm.call @__SEA_assume(%246) : (i1) -> ()
    %247 = llvm.mlir.constant(true) : i1
    %248 = llvm.xor %182, %247  : i1
    %249 = llvm.mlir.constant(true) : i1
    %250 = llvm.xor %82, %249  : i1
    %251 = llvm.mlir.constant(-15 : i5) : i5
    %252 = llvm.zext %251 : i5 to i6
    %253 = llvm.icmp "eq" %67, %252 : i6
    %254 = llvm.mlir.constant(true) : i1
    %255 = llvm.xor %253, %254  : i1
    %256 = llvm.or %255, %250  : i1
    %257 = llvm.or %256, %248  : i1
    llvm.call @__SEA_assume(%257) : (i1) -> ()
    %258 = llvm.mlir.constant(true) : i1
    %259 = llvm.xor %182, %258  : i1
    %260 = llvm.mlir.constant(true) : i1
    %261 = llvm.xor %90, %260  : i1
    %262 = llvm.bitcast %67 : i6 to vector<6xi1>
    %263 = "llvm.intr.vector.reduce.or"(%262) : (vector<6xi1>) -> i1
    %264 = llvm.mlir.constant(true) : i1
    %265 = llvm.xor %263, %264  : i1
    %266 = llvm.mlir.constant(true) : i1
    %267 = llvm.xor %265, %266  : i1
    %268 = llvm.or %267, %261  : i1
    %269 = llvm.or %268, %259  : i1
    llvm.call @__SEA_assume(%269) : (i1) -> ()
    %270 = llvm.call @nd_bv8_in6() : () -> i8
    %271 = llvm.trunc %270 : i8 to i8
    %272 = llvm.mlir.constant(0 : i6) : i6
    %273 = llvm.lshr %50, %272  : i6
    %274 = llvm.trunc %273 : i6 to i5
    %275 = llvm.icmp "eq" %274, %76 : i5
    %276 = llvm.select %275, %49, %271 : i1, i8
    %277 = llvm.zext %98 : i4 to i5
    %278 = llvm.icmp "eq" %274, %277 : i5
    %279 = llvm.select %278, %51, %276 : i1, i8
    %280 = llvm.zext %104 : i4 to i5
    %281 = llvm.icmp "eq" %274, %280 : i5
    %282 = llvm.select %281, %52, %279 : i1, i8
    %283 = llvm.zext %110 : i4 to i5
    %284 = llvm.icmp "eq" %274, %283 : i5
    %285 = llvm.select %284, %53, %282 : i1, i8
    %286 = llvm.zext %116 : i4 to i5
    %287 = llvm.icmp "eq" %274, %286 : i5
    %288 = llvm.select %287, %54, %285 : i1, i8
    %289 = llvm.zext %122 : i4 to i5
    %290 = llvm.icmp "eq" %274, %289 : i5
    %291 = llvm.select %290, %55, %288 : i1, i8
    %292 = llvm.zext %128 : i4 to i5
    %293 = llvm.icmp "eq" %274, %292 : i5
    %294 = llvm.select %293, %56, %291 : i1, i8
    %295 = llvm.zext %134 : i4 to i5
    %296 = llvm.icmp "eq" %274, %295 : i5
    %297 = llvm.select %296, %57, %294 : i1, i8
    %298 = llvm.zext %140 : i4 to i5
    %299 = llvm.icmp "eq" %274, %298 : i5
    %300 = llvm.select %299, %58, %297 : i1, i8
    %301 = llvm.zext %146 : i3 to i5
    %302 = llvm.icmp "eq" %274, %301 : i5
    %303 = llvm.select %302, %59, %300 : i1, i8
    %304 = llvm.zext %152 : i3 to i5
    %305 = llvm.icmp "eq" %274, %304 : i5
    %306 = llvm.select %305, %60, %303 : i1, i8
    %307 = llvm.zext %158 : i3 to i5
    %308 = llvm.icmp "eq" %274, %307 : i5
    %309 = llvm.select %308, %61, %306 : i1, i8
    %310 = llvm.zext %164 : i3 to i5
    %311 = llvm.icmp "eq" %274, %310 : i5
    %312 = llvm.select %311, %62, %309 : i1, i8
    %313 = llvm.zext %170 : i2 to i5
    %314 = llvm.icmp "eq" %274, %313 : i5
    %315 = llvm.select %314, %63, %312 : i1, i8
    %316 = llvm.zext %176 : i2 to i5
    %317 = llvm.icmp "eq" %274, %316 : i5
    %318 = llvm.select %317, %64, %315 : i1, i8
    %319 = llvm.zext %182 : i1 to i5
    %320 = llvm.icmp "eq" %274, %319 : i5
    %321 = llvm.select %320, %65, %318 : i1, i8
    %322 = llvm.bitcast %274 : i5 to vector<5xi1>
    %323 = "llvm.intr.vector.reduce.or"(%322) : (vector<5xi1>) -> i1
    %324 = llvm.mlir.constant(true) : i1
    %325 = llvm.xor %323, %324  : i1
    %326 = llvm.select %325, %66, %321 : i1, i8
    %327 = llvm.icmp "eq" %71, %326 : i8
    %328 = llvm.mlir.constant(true) : i1
    %329 = llvm.xor %227, %328  : i1
    %330 = llvm.or %329, %327  : i1
    %331 = llvm.call @nd_bv8_in7() : () -> i8
    %332 = llvm.trunc %331 : i8 to i1
    %333 = llvm.select %72, %332, %330 : i1, i1
    %334 = llvm.mlir.constant(true) : i1
    %335 = llvm.xor %333, %334  : i1
    %336 = llvm.select %72, %207, %182 : i1, i1
    %337 = llvm.and %336, %335  : i1
    %338 = llvm.mlir.constant(true) : i1
    %339 = llvm.xor %337, %338  : i1
    llvm.cond_br %339, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%88, %97, %103, %109, %115, %121, %127, %133, %139, %145, %151, %157, %163, %169, %175, %181, %187, %194, %199, %208, %230, %235, %238, %207, %242 : i8, i6, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i6, i1, i1, i6, i8, i1, i6)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

