module {
  func @main() {
    %0 = btor.constant true
    %1 = btor.nd_state 0 : i128
    %2 = btor.nd_state 1 : i5
    %3 = btor.nd_state 2 : i128
    %4 = btor.nd_state 3 : i128
    %5 = btor.nd_state 4 : i128
    %6 = btor.nd_state 5 : i128
    %7 = btor.nd_state 6 : i128
    %8 = btor.nd_state 7 : i128
    %9 = btor.nd_state 8 : i128
    %10 = btor.nd_state 9 : i128
    %11 = btor.nd_state 10 : i5
    %12 = btor.nd_state 11 : i1
    %13 = btor.nd_state 12 : i1
    %14 = btor.nd_state 13 : i5
    %15 = btor.nd_state 14 : i128
    %16 = btor.nd_state 16 : i5
    br ^bb1(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15, %0, %16 : i128, i5, i128, i128, i128, i128, i128, i128, i128, i128, i5, i1, i1, i5, i128, i1, i5)
  ^bb1(%17: i128, %18: i5, %19: i128, %20: i128, %21: i128, %22: i128, %23: i128, %24: i128, %25: i128, %26: i128, %27: i5, %28: i1, %29: i1, %30: i5, %31: i128, %32: i1, %33: i5):  // 2 preds: ^bb0, ^bb1
    %34 = btor.input 1 : i128
    %35 = btor.constant -8 : i4
    %36 = btor.constant 3 : i5
    %37 = btor.constant 0 : i5
    %38 = btor.slice %33, %36, %37 : i5, i4
    %39 = btor.cmp eq, %38, %35 : i4
    %40 = btor.input 3 : i1
    %41 = btor.and %40, %39 : i1
    %42 = btor.ite %41, %34, %17 : i128
    %43 = btor.constant 0 : i128
    %44 = btor.input 4 : i1
    %45 = btor.ite %44, %43, %42 : i128
    %46 = btor.input 2 : i1
    %47 = btor.uext %46 : i1 to i5
    %48 = btor.add %18, %47 : i5
    %49 = btor.or %40, %46 : i1
    %50 = btor.or %49, %44 : i1
    %51 = btor.ite %50, %48, %18 : i5
    %52 = btor.constant 0 : i5
    %53 = btor.ite %44, %52, %51 : i5
    %54 = btor.constant -1 : i3
    %55 = btor.uext %54 : i3 to i4
    %56 = btor.cmp eq, %38, %55 : i4
    %57 = btor.and %40, %56 : i1
    %58 = btor.ite %57, %34, %19 : i128
    %59 = btor.ite %44, %43, %58 : i128
    %60 = btor.constant -2 : i3
    %61 = btor.uext %60 : i3 to i4
    %62 = btor.cmp eq, %38, %61 : i4
    %63 = btor.and %40, %62 : i1
    %64 = btor.ite %63, %34, %20 : i128
    %65 = btor.ite %44, %43, %64 : i128
    %66 = btor.constant -3 : i3
    %67 = btor.uext %66 : i3 to i4
    %68 = btor.cmp eq, %38, %67 : i4
    %69 = btor.and %40, %68 : i1
    %70 = btor.ite %69, %34, %21 : i128
    %71 = btor.ite %44, %43, %70 : i128
    %72 = btor.constant -4 : i3
    %73 = btor.uext %72 : i3 to i4
    %74 = btor.cmp eq, %38, %73 : i4
    %75 = btor.and %40, %74 : i1
    %76 = btor.ite %75, %34, %22 : i128
    %77 = btor.ite %44, %43, %76 : i128
    %78 = btor.constant -1 : i2
    %79 = btor.uext %78 : i2 to i4
    %80 = btor.cmp eq, %38, %79 : i4
    %81 = btor.and %40, %80 : i1
    %82 = btor.ite %81, %34, %23 : i128
    %83 = btor.ite %44, %43, %82 : i128
    %84 = btor.constant -2 : i2
    %85 = btor.uext %84 : i2 to i4
    %86 = btor.cmp eq, %38, %85 : i4
    %87 = btor.and %40, %86 : i1
    %88 = btor.ite %87, %34, %24 : i128
    %89 = btor.ite %44, %43, %88 : i128
    %90 = btor.constant true
    %91 = btor.uext %90 : i1 to i4
    %92 = btor.cmp eq, %38, %91 : i4
    %93 = btor.and %40, %92 : i1
    %94 = btor.ite %93, %34, %25 : i128
    %95 = btor.ite %44, %43, %94 : i128
    %96 = btor.redor %38 : i4
    %97 = btor.not %96 : i1
    %98 = btor.and %40, %97 : i1
    %99 = btor.ite %98, %34, %26 : i128
    %100 = btor.ite %44, %43, %99 : i128
    %101 = btor.uext %46 : i1 to i5
    %102 = btor.uext %40 : i1 to i5
    %103 = btor.add %27, %102 : i5
    %104 = btor.sub %103, %101 : i5
    %105 = btor.ite %44, %52, %104 : i5
    %106 = btor.input 5 : i1
    %107 = btor.and %106, %40 : i1
    %108 = btor.or %28, %107 : i1
    %109 = btor.not %28 : i1
    %110 = btor.ite %109, %108, %28 : i1
    %111 = btor.constant false
    %112 = btor.ite %44, %111, %110 : i1
    %113 = btor.uext %46 : i1 to i5
    %114 = btor.not %28 : i1
    %115 = btor.and %40, %114 : i1
    %116 = btor.uext %115 : i1 to i5
    %117 = btor.add %30, %116 : i5
    %118 = btor.sub %117, %113 : i5
    %119 = btor.ite %44, %52, %118 : i5
    %120 = btor.redor %119 : i5
    %121 = btor.not %120 : i1
    %122 = btor.redor %30 : i5
    %123 = btor.not %29 : i1
    %124 = btor.and %28, %123 : i1
    %125 = btor.and %124, %122 : i1
    %126 = btor.and %125, %121 : i1
    %127 = btor.or %126, %29 : i1
    %128 = btor.ite %90, %127, %29 : i1
    %129 = btor.ite %44, %111, %128 : i1
    %130 = btor.or %40, %46 : i1
    %131 = btor.or %130, %44 : i1
    %132 = btor.or %131, %28 : i1
    %133 = btor.ite %132, %119, %30 : i5
    %134 = btor.ite %44, %52, %133 : i5
    %135 = btor.and %107, %109 : i1
    %136 = btor.ite %135, %34, %31 : i128
    %137 = btor.ite %44, %43, %136 : i128
    %138 = btor.uext %40 : i1 to i5
    %139 = btor.add %33, %138 : i5
    %140 = btor.ite %50, %139, %33 : i5
    %141 = btor.ite %44, %52, %140 : i5
    %142 = btor.not %90 : i1
    %143 = btor.cmp eq, %44, %32 : i1
    %144 = btor.or %143, %142 : i1
    btor.constraint(%144)
    %145 = btor.not %90 : i1
    %146 = btor.not %40 : i1
    %147 = btor.constant -7 : i4
    %148 = btor.uext %147 : i4 to i5
    %149 = btor.cmp eq, %27, %148 : i5
    %150 = btor.not %149 : i1
    %151 = btor.or %150, %146 : i1
    %152 = btor.or %151, %145 : i1
    btor.constraint(%152)
    %153 = btor.not %90 : i1
    %154 = btor.not %46 : i1
    %155 = btor.redor %27 : i5
    %156 = btor.not %155 : i1
    %157 = btor.not %156 : i1
    %158 = btor.or %157, %154 : i1
    %159 = btor.or %158, %153 : i1
    btor.constraint(%159)
    %160 = btor.input 6 : i128
    %161 = btor.constant 3 : i5
    %162 = btor.constant 0 : i5
    %163 = btor.slice %18, %161, %162 : i5, i4
    %164 = btor.cmp eq, %163, %35 : i4
    %165 = btor.ite %164, %17, %160 : i128
    %166 = btor.uext %54 : i3 to i4
    %167 = btor.cmp eq, %163, %166 : i4
    %168 = btor.ite %167, %19, %165 : i128
    %169 = btor.uext %60 : i3 to i4
    %170 = btor.cmp eq, %163, %169 : i4
    %171 = btor.ite %170, %20, %168 : i128
    %172 = btor.uext %66 : i3 to i4
    %173 = btor.cmp eq, %163, %172 : i4
    %174 = btor.ite %173, %21, %171 : i128
    %175 = btor.uext %72 : i3 to i4
    %176 = btor.cmp eq, %163, %175 : i4
    %177 = btor.ite %176, %22, %174 : i128
    %178 = btor.uext %78 : i2 to i4
    %179 = btor.cmp eq, %163, %178 : i4
    %180 = btor.ite %179, %23, %177 : i128
    %181 = btor.uext %84 : i2 to i4
    %182 = btor.cmp eq, %163, %181 : i4
    %183 = btor.ite %182, %24, %180 : i128
    %184 = btor.uext %90 : i1 to i4
    %185 = btor.cmp eq, %163, %184 : i4
    %186 = btor.ite %185, %25, %183 : i128
    %187 = btor.redor %163 : i4
    %188 = btor.not %187 : i1
    %189 = btor.ite %188, %26, %186 : i128
    %190 = btor.cmp eq, %31, %189 : i128
    %191 = btor.not %126 : i1
    %192 = btor.or %191, %190 : i1
    %193 = btor.input 7 : i1
    %194 = btor.ite %32, %193, %192 : i1
    %195 = btor.not %194 : i1
    %196 = btor.ite %32, %111, %90 : i1
    %197 = btor.and %196, %195 : i1
    btor.assert_not(%197)
    br ^bb1(%45, %53, %59, %65, %71, %77, %83, %89, %95, %100, %105, %112, %129, %134, %137, %111, %141 : i128, i5, i128, i128, i128, i128, i128, i128, i128, i128, i5, i1, i1, i5, i128, i1, i5)
  }
}
