module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @__SEA_assume(i1)
  llvm.func @nd_bv8_in7() -> i8
  llvm.func @nd_bv16_in2() -> i16
  llvm.func @nd_bv8_in6() -> i8
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @nd_bv16_in1() -> i16
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @nd_bv16_st13() -> i16
  llvm.func @nd_bv16_st12() -> i16
  llvm.func @nd_bv16_st11() -> i16
  llvm.func @nd_bv16_st10() -> i16
  llvm.func @nd_bv16_st9() -> i16
  llvm.func @nd_bv16_st8() -> i16
  llvm.func @nd_bv16_st7() -> i16
  llvm.func @nd_bv16_st5() -> i16
  llvm.func @nd_bv8_st4() -> i8
  llvm.func @nd_bv8_st3() -> i8
  llvm.func @nd_bv8_st2() -> i8
  llvm.func @nd_bv8_st1() -> i8
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv16_st0() -> i16
  llvm.func @main() {
    %0 = llvm.call @nd_bv16_st0() : () -> i16
    %1 = llvm.mlir.constant(16 : i16) : i16
    %2 = llvm.zext %1 : i16 to i64
    %3 = llvm.mlir.constant(0 : i64) : i64
    %4 = llvm.zext %0 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%3, %4, %2) : (i64, i64, i64) -> ()
    %5 = llvm.trunc %0 : i16 to i16
    %6 = llvm.call @nd_bv8_st1() : () -> i8
    %7 = llvm.mlir.constant(4 : i4) : i4
    %8 = llvm.zext %7 : i4 to i64
    %9 = llvm.mlir.constant(1 : i64) : i64
    %10 = llvm.zext %6 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%9, %10, %8) : (i64, i64, i64) -> ()
    %11 = llvm.trunc %6 : i8 to i4
    %12 = llvm.call @nd_bv8_st2() : () -> i8
    %13 = llvm.mlir.constant(true) : i1
    %14 = llvm.zext %13 : i1 to i64
    %15 = llvm.mlir.constant(2 : i64) : i64
    %16 = llvm.zext %12 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%15, %16, %14) : (i64, i64, i64) -> ()
    %17 = llvm.trunc %12 : i8 to i1
    %18 = llvm.call @nd_bv8_st3() : () -> i8
    %19 = llvm.mlir.constant(true) : i1
    %20 = llvm.zext %19 : i1 to i64
    %21 = llvm.mlir.constant(3 : i64) : i64
    %22 = llvm.zext %18 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%21, %22, %20) : (i64, i64, i64) -> ()
    %23 = llvm.trunc %18 : i8 to i1
    %24 = llvm.call @nd_bv8_st4() : () -> i8
    %25 = llvm.mlir.constant(4 : i4) : i4
    %26 = llvm.zext %25 : i4 to i64
    %27 = llvm.mlir.constant(4 : i64) : i64
    %28 = llvm.zext %24 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%27, %28, %26) : (i64, i64, i64) -> ()
    %29 = llvm.trunc %24 : i8 to i4
    %30 = llvm.call @nd_bv16_st5() : () -> i16
    %31 = llvm.mlir.constant(16 : i16) : i16
    %32 = llvm.zext %31 : i16 to i64
    %33 = llvm.mlir.constant(5 : i64) : i64
    %34 = llvm.zext %30 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%33, %34, %32) : (i64, i64, i64) -> ()
    %35 = llvm.trunc %30 : i16 to i16
    %36 = llvm.mlir.constant(true) : i1
    %37 = llvm.call @nd_bv16_st7() : () -> i16
    %38 = llvm.mlir.constant(16 : i16) : i16
    %39 = llvm.zext %38 : i16 to i64
    %40 = llvm.mlir.constant(7 : i64) : i64
    %41 = llvm.zext %37 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%40, %41, %39) : (i64, i64, i64) -> ()
    %42 = llvm.trunc %37 : i16 to i16
    %43 = llvm.call @nd_bv16_st8() : () -> i16
    %44 = llvm.mlir.constant(16 : i16) : i16
    %45 = llvm.zext %44 : i16 to i64
    %46 = llvm.mlir.constant(8 : i64) : i64
    %47 = llvm.zext %43 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%46, %47, %45) : (i64, i64, i64) -> ()
    %48 = llvm.trunc %43 : i16 to i16
    %49 = llvm.call @nd_bv16_st9() : () -> i16
    %50 = llvm.mlir.constant(16 : i16) : i16
    %51 = llvm.zext %50 : i16 to i64
    %52 = llvm.mlir.constant(9 : i64) : i64
    %53 = llvm.zext %49 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%52, %53, %51) : (i64, i64, i64) -> ()
    %54 = llvm.trunc %49 : i16 to i16
    %55 = llvm.call @nd_bv16_st10() : () -> i16
    %56 = llvm.mlir.constant(16 : i16) : i16
    %57 = llvm.zext %56 : i16 to i64
    %58 = llvm.mlir.constant(10 : i64) : i64
    %59 = llvm.zext %55 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%58, %59, %57) : (i64, i64, i64) -> ()
    %60 = llvm.trunc %55 : i16 to i16
    %61 = llvm.call @nd_bv16_st11() : () -> i16
    %62 = llvm.mlir.constant(16 : i16) : i16
    %63 = llvm.zext %62 : i16 to i64
    %64 = llvm.mlir.constant(11 : i64) : i64
    %65 = llvm.zext %61 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%64, %65, %63) : (i64, i64, i64) -> ()
    %66 = llvm.trunc %61 : i16 to i16
    %67 = llvm.call @nd_bv16_st12() : () -> i16
    %68 = llvm.mlir.constant(16 : i16) : i16
    %69 = llvm.zext %68 : i16 to i64
    %70 = llvm.mlir.constant(12 : i64) : i64
    %71 = llvm.zext %67 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%70, %71, %69) : (i64, i64, i64) -> ()
    %72 = llvm.trunc %67 : i16 to i16
    %73 = llvm.call @nd_bv16_st13() : () -> i16
    %74 = llvm.mlir.constant(16 : i16) : i16
    %75 = llvm.zext %74 : i16 to i64
    %76 = llvm.mlir.constant(13 : i64) : i64
    %77 = llvm.zext %73 : i16 to i64
    llvm.call @btor2mlir_print_state_num(%76, %77, %75) : (i64, i64, i64) -> ()
    %78 = llvm.trunc %73 : i16 to i16
    llvm.br ^bb1(%5, %11, %17, %23, %29, %35, %36, %42, %48, %54, %60, %66, %72, %78 : i16, i4, i1, i1, i4, i16, i1, i16, i16, i16, i16, i16, i16, i16)
  ^bb1(%79: i16, %80: i4, %81: i1, %82: i1, %83: i4, %84: i16, %85: i1, %86: i16, %87: i16, %88: i16, %89: i16, %90: i16, %91: i16, %92: i16):  // 2 preds: ^bb0, ^bb2
    %93 = llvm.mlir.constant(0 : i16) : i16
    %94 = llvm.call @nd_bv8_in3() : () -> i8
    %95 = llvm.mlir.constant(true) : i1
    %96 = llvm.zext %95 : i1 to i64
    %97 = llvm.mlir.constant(3 : i64) : i64
    %98 = llvm.zext %94 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%97, %98, %96) : (i64, i64, i64) -> ()
    %99 = llvm.trunc %94 : i8 to i1
    %100 = llvm.select %99, %86, %93 : i1, i16
    %101 = llvm.call @nd_bv16_in1() : () -> i16
    %102 = llvm.mlir.constant(16 : i16) : i16
    %103 = llvm.zext %102 : i16 to i64
    %104 = llvm.mlir.constant(1 : i64) : i64
    %105 = llvm.zext %101 : i16 to i64
    llvm.call @btor2mlir_print_input_num(%104, %105, %103) : (i64, i64, i64) -> ()
    %106 = llvm.trunc %101 : i16 to i16
    %107 = llvm.zext %99 : i1 to i32
    %108 = llvm.zext %80 : i4 to i32
    %109 = llvm.sub %108, %107  : i32
    %110 = llvm.bitcast %109 : i32 to vector<32xi1>
    %111 = "llvm.intr.vector.reduce.or"(%110) : (vector<32xi1>) -> i1
    %112 = llvm.mlir.constant(true) : i1
    %113 = llvm.xor %111, %112  : i1
    %114 = llvm.call @nd_bv8_in4() : () -> i8
    %115 = llvm.mlir.constant(true) : i1
    %116 = llvm.zext %115 : i1 to i64
    %117 = llvm.mlir.constant(4 : i64) : i64
    %118 = llvm.zext %114 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%117, %118, %116) : (i64, i64, i64) -> ()
    %119 = llvm.trunc %114 : i8 to i1
    %120 = llvm.and %119, %113  : i1
    %121 = llvm.select %120, %106, %100 : i1, i16
    %122 = llvm.bitcast %80 : i4 to vector<4xi1>
    %123 = "llvm.intr.vector.reduce.or"(%122) : (vector<4xi1>) -> i1
    %124 = llvm.mlir.constant(true) : i1
    %125 = llvm.xor %123, %124  : i1
    %126 = llvm.and %119, %125  : i1
    %127 = llvm.or %99, %126  : i1
    %128 = llvm.select %127, %121, %79 : i1, i16
    %129 = llvm.call @nd_bv8_in5() : () -> i8
    %130 = llvm.mlir.constant(true) : i1
    %131 = llvm.zext %130 : i1 to i64
    %132 = llvm.mlir.constant(5 : i64) : i64
    %133 = llvm.zext %129 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%132, %133, %131) : (i64, i64, i64) -> ()
    %134 = llvm.trunc %129 : i8 to i1
    %135 = llvm.select %134, %93, %128 : i1, i16
    %136 = llvm.zext %99 : i1 to i4
    %137 = llvm.zext %119 : i1 to i4
    %138 = llvm.add %80, %137  : i4
    %139 = llvm.sub %138, %136  : i4
    %140 = llvm.mlir.constant(0 : i4) : i4
    %141 = llvm.select %134, %140, %139 : i1, i4
    %142 = llvm.call @nd_bv8_in6() : () -> i8
    %143 = llvm.mlir.constant(true) : i1
    %144 = llvm.zext %143 : i1 to i64
    %145 = llvm.mlir.constant(6 : i64) : i64
    %146 = llvm.zext %142 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%145, %146, %144) : (i64, i64, i64) -> ()
    %147 = llvm.trunc %142 : i8 to i1
    %148 = llvm.and %147, %119  : i1
    %149 = llvm.or %81, %148  : i1
    %150 = llvm.mlir.constant(true) : i1
    %151 = llvm.xor %81, %150  : i1
    %152 = llvm.select %151, %149, %81 : i1, i1
    %153 = llvm.mlir.constant(false) : i1
    %154 = llvm.select %134, %153, %152 : i1, i1
    %155 = llvm.zext %99 : i1 to i4
    %156 = llvm.mlir.constant(true) : i1
    %157 = llvm.xor %81, %156  : i1
    %158 = llvm.and %119, %157  : i1
    %159 = llvm.zext %158 : i1 to i4
    %160 = llvm.add %83, %159  : i4
    %161 = llvm.sub %160, %155  : i4
    %162 = llvm.select %134, %140, %161 : i1, i4
    %163 = llvm.bitcast %162 : i4 to vector<4xi1>
    %164 = "llvm.intr.vector.reduce.or"(%163) : (vector<4xi1>) -> i1
    %165 = llvm.mlir.constant(true) : i1
    %166 = llvm.xor %164, %165  : i1
    %167 = llvm.bitcast %83 : i4 to vector<4xi1>
    %168 = "llvm.intr.vector.reduce.or"(%167) : (vector<4xi1>) -> i1
    %169 = llvm.mlir.constant(true) : i1
    %170 = llvm.xor %82, %169  : i1
    %171 = llvm.and %81, %170  : i1
    %172 = llvm.and %171, %168  : i1
    %173 = llvm.and %172, %166  : i1
    %174 = llvm.or %173, %82  : i1
    %175 = llvm.mlir.constant(true) : i1
    %176 = llvm.select %175, %174, %82 : i1, i1
    %177 = llvm.select %134, %153, %176 : i1, i1
    %178 = llvm.or %119, %99  : i1
    %179 = llvm.or %178, %134  : i1
    %180 = llvm.or %179, %81  : i1
    %181 = llvm.select %180, %162, %83 : i1, i4
    %182 = llvm.select %134, %140, %181 : i1, i4
    %183 = llvm.and %148, %151  : i1
    %184 = llvm.select %183, %106, %84 : i1, i16
    %185 = llvm.select %134, %93, %184 : i1, i16
    %186 = llvm.select %99, %87, %93 : i1, i16
    %187 = llvm.zext %175 : i1 to i32
    %188 = llvm.icmp "eq" %109, %187 : i32
    %189 = llvm.and %119, %188  : i1
    %190 = llvm.select %189, %106, %186 : i1, i16
    %191 = llvm.zext %175 : i1 to i4
    %192 = llvm.icmp "eq" %80, %191 : i4
    %193 = llvm.and %119, %192  : i1
    %194 = llvm.or %99, %193  : i1
    %195 = llvm.select %194, %190, %86 : i1, i16
    %196 = llvm.select %134, %93, %195 : i1, i16
    %197 = llvm.select %99, %88, %93 : i1, i16
    %198 = llvm.mlir.constant(-2 : i2) : i2
    %199 = llvm.zext %198 : i2 to i32
    %200 = llvm.icmp "eq" %109, %199 : i32
    %201 = llvm.and %119, %200  : i1
    %202 = llvm.select %201, %106, %197 : i1, i16
    %203 = llvm.zext %198 : i2 to i4
    %204 = llvm.icmp "eq" %80, %203 : i4
    %205 = llvm.and %119, %204  : i1
    %206 = llvm.or %99, %205  : i1
    %207 = llvm.select %206, %202, %87 : i1, i16
    %208 = llvm.select %134, %93, %207 : i1, i16
    %209 = llvm.select %99, %89, %93 : i1, i16
    %210 = llvm.mlir.constant(-1 : i2) : i2
    %211 = llvm.zext %210 : i2 to i32
    %212 = llvm.icmp "eq" %109, %211 : i32
    %213 = llvm.and %119, %212  : i1
    %214 = llvm.select %213, %106, %209 : i1, i16
    %215 = llvm.zext %210 : i2 to i4
    %216 = llvm.icmp "eq" %80, %215 : i4
    %217 = llvm.and %119, %216  : i1
    %218 = llvm.or %99, %217  : i1
    %219 = llvm.select %218, %214, %88 : i1, i16
    %220 = llvm.select %134, %93, %219 : i1, i16
    %221 = llvm.select %99, %90, %93 : i1, i16
    %222 = llvm.mlir.constant(-4 : i3) : i3
    %223 = llvm.zext %222 : i3 to i32
    %224 = llvm.icmp "eq" %109, %223 : i32
    %225 = llvm.and %119, %224  : i1
    %226 = llvm.select %225, %106, %221 : i1, i16
    %227 = llvm.zext %222 : i3 to i4
    %228 = llvm.icmp "eq" %80, %227 : i4
    %229 = llvm.and %119, %228  : i1
    %230 = llvm.or %99, %229  : i1
    %231 = llvm.select %230, %226, %89 : i1, i16
    %232 = llvm.select %134, %93, %231 : i1, i16
    %233 = llvm.select %99, %91, %93 : i1, i16
    %234 = llvm.mlir.constant(-3 : i3) : i3
    %235 = llvm.zext %234 : i3 to i32
    %236 = llvm.icmp "eq" %109, %235 : i32
    %237 = llvm.and %119, %236  : i1
    %238 = llvm.select %237, %106, %233 : i1, i16
    %239 = llvm.zext %234 : i3 to i4
    %240 = llvm.icmp "eq" %80, %239 : i4
    %241 = llvm.and %119, %240  : i1
    %242 = llvm.or %99, %241  : i1
    %243 = llvm.select %242, %238, %90 : i1, i16
    %244 = llvm.select %134, %93, %243 : i1, i16
    %245 = llvm.select %99, %92, %93 : i1, i16
    %246 = llvm.mlir.constant(-2 : i3) : i3
    %247 = llvm.zext %246 : i3 to i32
    %248 = llvm.icmp "eq" %109, %247 : i32
    %249 = llvm.and %119, %248  : i1
    %250 = llvm.select %249, %106, %245 : i1, i16
    %251 = llvm.zext %246 : i3 to i4
    %252 = llvm.icmp "eq" %80, %251 : i4
    %253 = llvm.and %119, %252  : i1
    %254 = llvm.or %99, %253  : i1
    %255 = llvm.select %254, %250, %91 : i1, i16
    %256 = llvm.select %134, %93, %255 : i1, i16
    %257 = llvm.call @nd_bv16_in2() : () -> i16
    %258 = llvm.mlir.constant(16 : i16) : i16
    %259 = llvm.zext %258 : i16 to i64
    %260 = llvm.mlir.constant(2 : i64) : i64
    %261 = llvm.zext %257 : i16 to i64
    llvm.call @btor2mlir_print_input_num(%260, %261, %259) : (i64, i64, i64) -> ()
    %262 = llvm.trunc %257 : i16 to i16
    %263 = llvm.mlir.constant(-1 : i3) : i3
    %264 = llvm.zext %263 : i3 to i4
    %265 = llvm.icmp "eq" %80, %264 : i4
    %266 = llvm.and %119, %265  : i1
    %267 = llvm.or %99, %266  : i1
    %268 = llvm.select %267, %262, %92 : i1, i16
    %269 = llvm.select %134, %93, %268 : i1, i16
    %270 = llvm.mlir.constant(true) : i1
    %271 = llvm.xor %175, %270  : i1
    %272 = llvm.mlir.constant(true) : i1
    %273 = llvm.xor %99, %272  : i1
    %274 = llvm.mlir.constant(true) : i1
    %275 = llvm.xor %125, %274  : i1
    %276 = llvm.or %275, %273  : i1
    %277 = llvm.or %276, %271  : i1
    llvm.call @__SEA_assume(%277) : (i1) -> ()
    %278 = llvm.mlir.constant(true) : i1
    %279 = llvm.xor %175, %278  : i1
    %280 = llvm.mlir.constant(true) : i1
    %281 = llvm.xor %119, %280  : i1
    %282 = llvm.mlir.constant(-8 : i4) : i4
    %283 = llvm.icmp "uge" %80, %282 : i4
    %284 = llvm.mlir.constant(true) : i1
    %285 = llvm.xor %283, %284  : i1
    %286 = llvm.or %285, %281  : i1
    %287 = llvm.or %286, %279  : i1
    llvm.call @__SEA_assume(%287) : (i1) -> ()
    %288 = llvm.mlir.constant(true) : i1
    %289 = llvm.xor %175, %288  : i1
    %290 = llvm.icmp "eq" %134, %85 : i1
    %291 = llvm.or %290, %289  : i1
    llvm.call @__SEA_assume(%291) : (i1) -> ()
    %292 = llvm.mlir.constant(true) : i1
    %293 = llvm.xor %175, %292  : i1
    %294 = llvm.mlir.constant(true) : i1
    %295 = llvm.xor %119, %294  : i1
    %296 = llvm.mlir.constant(true) : i1
    %297 = llvm.xor %283, %296  : i1
    %298 = llvm.or %297, %295  : i1
    %299 = llvm.or %298, %293  : i1
    llvm.call @__SEA_assume(%299) : (i1) -> ()
    %300 = llvm.mlir.constant(true) : i1
    %301 = llvm.xor %175, %300  : i1
    %302 = llvm.mlir.constant(true) : i1
    %303 = llvm.xor %99, %302  : i1
    %304 = llvm.mlir.constant(true) : i1
    %305 = llvm.xor %125, %304  : i1
    %306 = llvm.or %305, %303  : i1
    %307 = llvm.or %306, %301  : i1
    llvm.call @__SEA_assume(%307) : (i1) -> ()
    %308 = llvm.icmp "eq" %84, %79 : i16
    %309 = llvm.mlir.constant(true) : i1
    %310 = llvm.xor %173, %309  : i1
    %311 = llvm.or %310, %308  : i1
    %312 = llvm.call @nd_bv8_in7() : () -> i8
    %313 = llvm.mlir.constant(true) : i1
    %314 = llvm.zext %313 : i1 to i64
    %315 = llvm.mlir.constant(7 : i64) : i64
    %316 = llvm.zext %312 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%315, %316, %314) : (i64, i64, i64) -> ()
    %317 = llvm.trunc %312 : i8 to i1
    %318 = llvm.select %85, %317, %311 : i1, i1
    %319 = llvm.mlir.constant(true) : i1
    %320 = llvm.xor %318, %319  : i1
    %321 = llvm.select %85, %153, %175 : i1, i1
    %322 = llvm.and %321, %320  : i1
    %323 = llvm.mlir.constant(true) : i1
    %324 = llvm.xor %322, %323  : i1
    llvm.cond_br %324, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%135, %141, %154, %177, %182, %185, %153, %196, %208, %220, %232, %244, %256, %269 : i16, i4, i1, i1, i4, i16, i1, i16, i16, i16, i16, i16, i16, i16)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

