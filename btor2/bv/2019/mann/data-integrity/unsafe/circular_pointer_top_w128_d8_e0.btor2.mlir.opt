module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @__SEA_assume(i1)
  llvm.func @nd_bv8_in7() -> i8
  llvm.func @nd_bv128_in6() -> i128
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @nd_bv8_in2() -> i8
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv128_in1() -> i128
  llvm.func @nd_bv8_st16() -> i8
  llvm.func @nd_bv128_st14() -> i128
  llvm.func @nd_bv8_st13() -> i8
  llvm.func @nd_bv8_st12() -> i8
  llvm.func @nd_bv8_st11() -> i8
  llvm.func @nd_bv8_st10() -> i8
  llvm.func @nd_bv128_st9() -> i128
  llvm.func @nd_bv128_st8() -> i128
  llvm.func @nd_bv128_st7() -> i128
  llvm.func @nd_bv128_st6() -> i128
  llvm.func @nd_bv128_st5() -> i128
  llvm.func @nd_bv128_st4() -> i128
  llvm.func @nd_bv128_st3() -> i128
  llvm.func @nd_bv128_st2() -> i128
  llvm.func @nd_bv8_st1() -> i8
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv128_st0() -> i128
  llvm.func @main() {
    %0 = llvm.call @nd_bv128_st0() : () -> i128
    %1 = llvm.trunc %0 : i128 to i128
    %2 = llvm.call @nd_bv8_st1() : () -> i8
    %3 = llvm.mlir.constant(5 : i5) : i5
    %4 = llvm.zext %3 : i5 to i64
    %5 = llvm.mlir.constant(1 : i64) : i64
    %6 = llvm.zext %2 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%5, %6, %4) : (i64, i64, i64) -> ()
    %7 = llvm.trunc %2 : i8 to i5
    %8 = llvm.call @nd_bv128_st2() : () -> i128
    %9 = llvm.trunc %8 : i128 to i128
    %10 = llvm.call @nd_bv128_st3() : () -> i128
    %11 = llvm.trunc %10 : i128 to i128
    %12 = llvm.call @nd_bv128_st4() : () -> i128
    %13 = llvm.trunc %12 : i128 to i128
    %14 = llvm.call @nd_bv128_st5() : () -> i128
    %15 = llvm.trunc %14 : i128 to i128
    %16 = llvm.call @nd_bv128_st6() : () -> i128
    %17 = llvm.trunc %16 : i128 to i128
    %18 = llvm.call @nd_bv128_st7() : () -> i128
    %19 = llvm.trunc %18 : i128 to i128
    %20 = llvm.call @nd_bv128_st8() : () -> i128
    %21 = llvm.trunc %20 : i128 to i128
    %22 = llvm.call @nd_bv128_st9() : () -> i128
    %23 = llvm.trunc %22 : i128 to i128
    %24 = llvm.call @nd_bv8_st10() : () -> i8
    %25 = llvm.mlir.constant(5 : i5) : i5
    %26 = llvm.zext %25 : i5 to i64
    %27 = llvm.mlir.constant(10 : i64) : i64
    %28 = llvm.zext %24 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%27, %28, %26) : (i64, i64, i64) -> ()
    %29 = llvm.trunc %24 : i8 to i5
    %30 = llvm.call @nd_bv8_st11() : () -> i8
    %31 = llvm.mlir.constant(true) : i1
    %32 = llvm.zext %31 : i1 to i64
    %33 = llvm.mlir.constant(11 : i64) : i64
    %34 = llvm.zext %30 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%33, %34, %32) : (i64, i64, i64) -> ()
    %35 = llvm.trunc %30 : i8 to i1
    %36 = llvm.call @nd_bv8_st12() : () -> i8
    %37 = llvm.mlir.constant(true) : i1
    %38 = llvm.zext %37 : i1 to i64
    %39 = llvm.mlir.constant(12 : i64) : i64
    %40 = llvm.zext %36 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%39, %40, %38) : (i64, i64, i64) -> ()
    %41 = llvm.trunc %36 : i8 to i1
    %42 = llvm.call @nd_bv8_st13() : () -> i8
    %43 = llvm.mlir.constant(5 : i5) : i5
    %44 = llvm.zext %43 : i5 to i64
    %45 = llvm.mlir.constant(13 : i64) : i64
    %46 = llvm.zext %42 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%45, %46, %44) : (i64, i64, i64) -> ()
    %47 = llvm.trunc %42 : i8 to i5
    %48 = llvm.call @nd_bv128_st14() : () -> i128
    %49 = llvm.trunc %48 : i128 to i128
    %50 = llvm.mlir.constant(true) : i1
    %51 = llvm.call @nd_bv8_st16() : () -> i8
    %52 = llvm.mlir.constant(5 : i5) : i5
    %53 = llvm.zext %52 : i5 to i64
    %54 = llvm.mlir.constant(16 : i64) : i64
    %55 = llvm.zext %51 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%54, %55, %53) : (i64, i64, i64) -> ()
    %56 = llvm.trunc %51 : i8 to i5
    llvm.br ^bb1(%1, %7, %9, %11, %13, %15, %17, %19, %21, %23, %29, %35, %41, %47, %49, %50, %56 : i128, i5, i128, i128, i128, i128, i128, i128, i128, i128, i5, i1, i1, i5, i128, i1, i5)
  ^bb1(%57: i128, %58: i5, %59: i128, %60: i128, %61: i128, %62: i128, %63: i128, %64: i128, %65: i128, %66: i128, %67: i5, %68: i1, %69: i1, %70: i5, %71: i128, %72: i1, %73: i5):  // 2 preds: ^bb0, ^bb2
    %74 = llvm.call @nd_bv128_in1() : () -> i128
    %75 = llvm.trunc %74 : i128 to i128
    %76 = llvm.mlir.constant(-8 : i4) : i4
    %77 = llvm.mlir.constant(0 : i5) : i5
    %78 = llvm.lshr %73, %77  : i5
    %79 = llvm.trunc %78 : i5 to i4
    %80 = llvm.icmp "eq" %79, %76 : i4
    %81 = llvm.call @nd_bv8_in3() : () -> i8
    %82 = llvm.mlir.constant(true) : i1
    %83 = llvm.zext %82 : i1 to i64
    %84 = llvm.mlir.constant(3 : i64) : i64
    %85 = llvm.zext %81 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%84, %85, %83) : (i64, i64, i64) -> ()
    %86 = llvm.trunc %81 : i8 to i1
    %87 = llvm.and %86, %80  : i1
    %88 = llvm.select %87, %75, %57 : i1, i128
    %89 = llvm.mlir.constant(0 : i128) : i128
    %90 = llvm.call @nd_bv8_in4() : () -> i8
    %91 = llvm.mlir.constant(true) : i1
    %92 = llvm.zext %91 : i1 to i64
    %93 = llvm.mlir.constant(4 : i64) : i64
    %94 = llvm.zext %90 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%93, %94, %92) : (i64, i64, i64) -> ()
    %95 = llvm.trunc %90 : i8 to i1
    %96 = llvm.select %95, %89, %88 : i1, i128
    %97 = llvm.call @nd_bv8_in2() : () -> i8
    %98 = llvm.mlir.constant(true) : i1
    %99 = llvm.zext %98 : i1 to i64
    %100 = llvm.mlir.constant(2 : i64) : i64
    %101 = llvm.zext %97 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%100, %101, %99) : (i64, i64, i64) -> ()
    %102 = llvm.trunc %97 : i8 to i1
    %103 = llvm.zext %102 : i1 to i5
    %104 = llvm.add %58, %103  : i5
    %105 = llvm.or %86, %102  : i1
    %106 = llvm.or %105, %95  : i1
    %107 = llvm.select %106, %104, %58 : i1, i5
    %108 = llvm.mlir.constant(0 : i5) : i5
    %109 = llvm.select %95, %108, %107 : i1, i5
    %110 = llvm.mlir.constant(-1 : i3) : i3
    %111 = llvm.zext %110 : i3 to i4
    %112 = llvm.icmp "eq" %79, %111 : i4
    %113 = llvm.and %86, %112  : i1
    %114 = llvm.select %113, %75, %59 : i1, i128
    %115 = llvm.select %95, %89, %114 : i1, i128
    %116 = llvm.mlir.constant(-2 : i3) : i3
    %117 = llvm.zext %116 : i3 to i4
    %118 = llvm.icmp "eq" %79, %117 : i4
    %119 = llvm.and %86, %118  : i1
    %120 = llvm.select %119, %75, %60 : i1, i128
    %121 = llvm.select %95, %89, %120 : i1, i128
    %122 = llvm.mlir.constant(-3 : i3) : i3
    %123 = llvm.zext %122 : i3 to i4
    %124 = llvm.icmp "eq" %79, %123 : i4
    %125 = llvm.and %86, %124  : i1
    %126 = llvm.select %125, %75, %61 : i1, i128
    %127 = llvm.select %95, %89, %126 : i1, i128
    %128 = llvm.mlir.constant(-4 : i3) : i3
    %129 = llvm.zext %128 : i3 to i4
    %130 = llvm.icmp "eq" %79, %129 : i4
    %131 = llvm.and %86, %130  : i1
    %132 = llvm.select %131, %75, %62 : i1, i128
    %133 = llvm.select %95, %89, %132 : i1, i128
    %134 = llvm.mlir.constant(-1 : i2) : i2
    %135 = llvm.zext %134 : i2 to i4
    %136 = llvm.icmp "eq" %79, %135 : i4
    %137 = llvm.and %86, %136  : i1
    %138 = llvm.select %137, %75, %63 : i1, i128
    %139 = llvm.select %95, %89, %138 : i1, i128
    %140 = llvm.mlir.constant(-2 : i2) : i2
    %141 = llvm.zext %140 : i2 to i4
    %142 = llvm.icmp "eq" %79, %141 : i4
    %143 = llvm.and %86, %142  : i1
    %144 = llvm.select %143, %75, %64 : i1, i128
    %145 = llvm.select %95, %89, %144 : i1, i128
    %146 = llvm.mlir.constant(true) : i1
    %147 = llvm.zext %146 : i1 to i4
    %148 = llvm.icmp "eq" %79, %147 : i4
    %149 = llvm.and %86, %148  : i1
    %150 = llvm.select %149, %75, %65 : i1, i128
    %151 = llvm.select %95, %89, %150 : i1, i128
    %152 = llvm.bitcast %79 : i4 to vector<4xi1>
    %153 = "llvm.intr.vector.reduce.or"(%152) : (vector<4xi1>) -> i1
    %154 = llvm.mlir.constant(true) : i1
    %155 = llvm.xor %153, %154  : i1
    %156 = llvm.and %86, %155  : i1
    %157 = llvm.select %156, %75, %66 : i1, i128
    %158 = llvm.select %95, %89, %157 : i1, i128
    %159 = llvm.zext %102 : i1 to i5
    %160 = llvm.zext %86 : i1 to i5
    %161 = llvm.add %67, %160  : i5
    %162 = llvm.sub %161, %159  : i5
    %163 = llvm.select %95, %108, %162 : i1, i5
    %164 = llvm.call @nd_bv8_in5() : () -> i8
    %165 = llvm.mlir.constant(true) : i1
    %166 = llvm.zext %165 : i1 to i64
    %167 = llvm.mlir.constant(5 : i64) : i64
    %168 = llvm.zext %164 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%167, %168, %166) : (i64, i64, i64) -> ()
    %169 = llvm.trunc %164 : i8 to i1
    %170 = llvm.and %169, %86  : i1
    %171 = llvm.or %68, %170  : i1
    %172 = llvm.mlir.constant(true) : i1
    %173 = llvm.xor %68, %172  : i1
    %174 = llvm.select %173, %171, %68 : i1, i1
    %175 = llvm.mlir.constant(false) : i1
    %176 = llvm.select %95, %175, %174 : i1, i1
    %177 = llvm.zext %102 : i1 to i5
    %178 = llvm.mlir.constant(true) : i1
    %179 = llvm.xor %68, %178  : i1
    %180 = llvm.and %86, %179  : i1
    %181 = llvm.zext %180 : i1 to i5
    %182 = llvm.add %70, %181  : i5
    %183 = llvm.sub %182, %177  : i5
    %184 = llvm.select %95, %108, %183 : i1, i5
    %185 = llvm.bitcast %184 : i5 to vector<5xi1>
    %186 = "llvm.intr.vector.reduce.or"(%185) : (vector<5xi1>) -> i1
    %187 = llvm.mlir.constant(true) : i1
    %188 = llvm.xor %186, %187  : i1
    %189 = llvm.bitcast %70 : i5 to vector<5xi1>
    %190 = "llvm.intr.vector.reduce.or"(%189) : (vector<5xi1>) -> i1
    %191 = llvm.mlir.constant(true) : i1
    %192 = llvm.xor %69, %191  : i1
    %193 = llvm.and %68, %192  : i1
    %194 = llvm.and %193, %190  : i1
    %195 = llvm.and %194, %188  : i1
    %196 = llvm.or %195, %69  : i1
    %197 = llvm.select %146, %196, %69 : i1, i1
    %198 = llvm.select %95, %175, %197 : i1, i1
    %199 = llvm.or %86, %102  : i1
    %200 = llvm.or %199, %95  : i1
    %201 = llvm.or %200, %68  : i1
    %202 = llvm.select %201, %184, %70 : i1, i5
    %203 = llvm.select %95, %108, %202 : i1, i5
    %204 = llvm.and %170, %173  : i1
    %205 = llvm.select %204, %75, %71 : i1, i128
    %206 = llvm.select %95, %89, %205 : i1, i128
    %207 = llvm.zext %86 : i1 to i5
    %208 = llvm.add %73, %207  : i5
    %209 = llvm.select %106, %208, %73 : i1, i5
    %210 = llvm.select %95, %108, %209 : i1, i5
    %211 = llvm.mlir.constant(true) : i1
    %212 = llvm.xor %146, %211  : i1
    %213 = llvm.icmp "eq" %95, %72 : i1
    %214 = llvm.or %213, %212  : i1
    llvm.call @__SEA_assume(%214) : (i1) -> ()
    %215 = llvm.mlir.constant(true) : i1
    %216 = llvm.xor %146, %215  : i1
    %217 = llvm.mlir.constant(true) : i1
    %218 = llvm.xor %86, %217  : i1
    %219 = llvm.mlir.constant(-7 : i4) : i4
    %220 = llvm.zext %219 : i4 to i5
    %221 = llvm.icmp "eq" %67, %220 : i5
    %222 = llvm.mlir.constant(true) : i1
    %223 = llvm.xor %221, %222  : i1
    %224 = llvm.or %223, %218  : i1
    %225 = llvm.or %224, %216  : i1
    llvm.call @__SEA_assume(%225) : (i1) -> ()
    %226 = llvm.mlir.constant(true) : i1
    %227 = llvm.xor %146, %226  : i1
    %228 = llvm.mlir.constant(true) : i1
    %229 = llvm.xor %102, %228  : i1
    %230 = llvm.bitcast %67 : i5 to vector<5xi1>
    %231 = "llvm.intr.vector.reduce.or"(%230) : (vector<5xi1>) -> i1
    %232 = llvm.mlir.constant(true) : i1
    %233 = llvm.xor %231, %232  : i1
    %234 = llvm.mlir.constant(true) : i1
    %235 = llvm.xor %233, %234  : i1
    %236 = llvm.or %235, %229  : i1
    %237 = llvm.or %236, %227  : i1
    llvm.call @__SEA_assume(%237) : (i1) -> ()
    %238 = llvm.call @nd_bv128_in6() : () -> i128
    %239 = llvm.trunc %238 : i128 to i128
    %240 = llvm.mlir.constant(0 : i5) : i5
    %241 = llvm.lshr %58, %240  : i5
    %242 = llvm.trunc %241 : i5 to i4
    %243 = llvm.icmp "eq" %242, %76 : i4
    %244 = llvm.select %243, %57, %239 : i1, i128
    %245 = llvm.zext %110 : i3 to i4
    %246 = llvm.icmp "eq" %242, %245 : i4
    %247 = llvm.select %246, %59, %244 : i1, i128
    %248 = llvm.zext %116 : i3 to i4
    %249 = llvm.icmp "eq" %242, %248 : i4
    %250 = llvm.select %249, %60, %247 : i1, i128
    %251 = llvm.zext %122 : i3 to i4
    %252 = llvm.icmp "eq" %242, %251 : i4
    %253 = llvm.select %252, %61, %250 : i1, i128
    %254 = llvm.zext %128 : i3 to i4
    %255 = llvm.icmp "eq" %242, %254 : i4
    %256 = llvm.select %255, %62, %253 : i1, i128
    %257 = llvm.zext %134 : i2 to i4
    %258 = llvm.icmp "eq" %242, %257 : i4
    %259 = llvm.select %258, %63, %256 : i1, i128
    %260 = llvm.zext %140 : i2 to i4
    %261 = llvm.icmp "eq" %242, %260 : i4
    %262 = llvm.select %261, %64, %259 : i1, i128
    %263 = llvm.zext %146 : i1 to i4
    %264 = llvm.icmp "eq" %242, %263 : i4
    %265 = llvm.select %264, %65, %262 : i1, i128
    %266 = llvm.bitcast %242 : i4 to vector<4xi1>
    %267 = "llvm.intr.vector.reduce.or"(%266) : (vector<4xi1>) -> i1
    %268 = llvm.mlir.constant(true) : i1
    %269 = llvm.xor %267, %268  : i1
    %270 = llvm.select %269, %66, %265 : i1, i128
    %271 = llvm.icmp "eq" %71, %270 : i128
    %272 = llvm.mlir.constant(true) : i1
    %273 = llvm.xor %195, %272  : i1
    %274 = llvm.or %273, %271  : i1
    %275 = llvm.call @nd_bv8_in7() : () -> i8
    %276 = llvm.mlir.constant(true) : i1
    %277 = llvm.zext %276 : i1 to i64
    %278 = llvm.mlir.constant(7 : i64) : i64
    %279 = llvm.zext %275 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%278, %279, %277) : (i64, i64, i64) -> ()
    %280 = llvm.trunc %275 : i8 to i1
    %281 = llvm.select %72, %280, %274 : i1, i1
    %282 = llvm.mlir.constant(true) : i1
    %283 = llvm.xor %281, %282  : i1
    %284 = llvm.select %72, %175, %146 : i1, i1
    %285 = llvm.and %284, %283  : i1
    %286 = llvm.mlir.constant(true) : i1
    %287 = llvm.xor %285, %286  : i1
    llvm.cond_br %287, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%96, %109, %115, %121, %127, %133, %139, %145, %151, %158, %163, %176, %198, %203, %206, %175, %210 : i128, i5, i128, i128, i128, i128, i128, i128, i128, i128, i5, i1, i1, i5, i128, i1, i5)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

