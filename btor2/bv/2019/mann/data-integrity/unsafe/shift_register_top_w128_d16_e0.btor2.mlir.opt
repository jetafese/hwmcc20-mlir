module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @__SEA_assume(i1)
  llvm.func @nd_bv8_in7() -> i8
  llvm.func @nd_bv128_in2() -> i128
  llvm.func @nd_bv8_in6() -> i8
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @nd_bv128_in1() -> i128
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @nd_bv128_st21() -> i128
  llvm.func @nd_bv128_st20() -> i128
  llvm.func @nd_bv128_st19() -> i128
  llvm.func @nd_bv128_st18() -> i128
  llvm.func @nd_bv128_st17() -> i128
  llvm.func @nd_bv128_st16() -> i128
  llvm.func @nd_bv128_st15() -> i128
  llvm.func @nd_bv128_st14() -> i128
  llvm.func @nd_bv128_st13() -> i128
  llvm.func @nd_bv128_st12() -> i128
  llvm.func @nd_bv128_st11() -> i128
  llvm.func @nd_bv128_st10() -> i128
  llvm.func @nd_bv128_st9() -> i128
  llvm.func @nd_bv128_st8() -> i128
  llvm.func @nd_bv128_st7() -> i128
  llvm.func @nd_bv128_st5() -> i128
  llvm.func @nd_bv8_st4() -> i8
  llvm.func @nd_bv8_st3() -> i8
  llvm.func @nd_bv8_st2() -> i8
  llvm.func @nd_bv8_st1() -> i8
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv128_st0() -> i128
  llvm.func @main() {
    %0 = llvm.call @nd_bv128_st0() : () -> i128
    %1 = llvm.trunc %0 : i128 to i128
    %2 = llvm.call @nd_bv8_st1() : () -> i8
    %3 = llvm.mlir.constant(5 : i5) : i5
    %4 = llvm.zext %3 : i5 to i64
    %5 = llvm.mlir.constant(1 : i64) : i64
    %6 = llvm.zext %2 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%5, %6, %4) : (i64, i64, i64) -> ()
    %7 = llvm.trunc %2 : i8 to i5
    %8 = llvm.call @nd_bv8_st2() : () -> i8
    %9 = llvm.mlir.constant(true) : i1
    %10 = llvm.zext %9 : i1 to i64
    %11 = llvm.mlir.constant(2 : i64) : i64
    %12 = llvm.zext %8 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%11, %12, %10) : (i64, i64, i64) -> ()
    %13 = llvm.trunc %8 : i8 to i1
    %14 = llvm.call @nd_bv8_st3() : () -> i8
    %15 = llvm.mlir.constant(true) : i1
    %16 = llvm.zext %15 : i1 to i64
    %17 = llvm.mlir.constant(3 : i64) : i64
    %18 = llvm.zext %14 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%17, %18, %16) : (i64, i64, i64) -> ()
    %19 = llvm.trunc %14 : i8 to i1
    %20 = llvm.call @nd_bv8_st4() : () -> i8
    %21 = llvm.mlir.constant(5 : i5) : i5
    %22 = llvm.zext %21 : i5 to i64
    %23 = llvm.mlir.constant(4 : i64) : i64
    %24 = llvm.zext %20 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%23, %24, %22) : (i64, i64, i64) -> ()
    %25 = llvm.trunc %20 : i8 to i5
    %26 = llvm.call @nd_bv128_st5() : () -> i128
    %27 = llvm.trunc %26 : i128 to i128
    %28 = llvm.mlir.constant(true) : i1
    %29 = llvm.call @nd_bv128_st7() : () -> i128
    %30 = llvm.trunc %29 : i128 to i128
    %31 = llvm.call @nd_bv128_st8() : () -> i128
    %32 = llvm.trunc %31 : i128 to i128
    %33 = llvm.call @nd_bv128_st9() : () -> i128
    %34 = llvm.trunc %33 : i128 to i128
    %35 = llvm.call @nd_bv128_st10() : () -> i128
    %36 = llvm.trunc %35 : i128 to i128
    %37 = llvm.call @nd_bv128_st11() : () -> i128
    %38 = llvm.trunc %37 : i128 to i128
    %39 = llvm.call @nd_bv128_st12() : () -> i128
    %40 = llvm.trunc %39 : i128 to i128
    %41 = llvm.call @nd_bv128_st13() : () -> i128
    %42 = llvm.trunc %41 : i128 to i128
    %43 = llvm.call @nd_bv128_st14() : () -> i128
    %44 = llvm.trunc %43 : i128 to i128
    %45 = llvm.call @nd_bv128_st15() : () -> i128
    %46 = llvm.trunc %45 : i128 to i128
    %47 = llvm.call @nd_bv128_st16() : () -> i128
    %48 = llvm.trunc %47 : i128 to i128
    %49 = llvm.call @nd_bv128_st17() : () -> i128
    %50 = llvm.trunc %49 : i128 to i128
    %51 = llvm.call @nd_bv128_st18() : () -> i128
    %52 = llvm.trunc %51 : i128 to i128
    %53 = llvm.call @nd_bv128_st19() : () -> i128
    %54 = llvm.trunc %53 : i128 to i128
    %55 = llvm.call @nd_bv128_st20() : () -> i128
    %56 = llvm.trunc %55 : i128 to i128
    %57 = llvm.call @nd_bv128_st21() : () -> i128
    %58 = llvm.trunc %57 : i128 to i128
    llvm.br ^bb1(%1, %7, %13, %19, %25, %27, %28, %30, %32, %34, %36, %38, %40, %42, %44, %46, %48, %50, %52, %54, %56, %58 : i128, i5, i1, i1, i5, i128, i1, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128)
  ^bb1(%59: i128, %60: i5, %61: i1, %62: i1, %63: i5, %64: i128, %65: i1, %66: i128, %67: i128, %68: i128, %69: i128, %70: i128, %71: i128, %72: i128, %73: i128, %74: i128, %75: i128, %76: i128, %77: i128, %78: i128, %79: i128, %80: i128):  // 2 preds: ^bb0, ^bb2
    %81 = llvm.mlir.constant(0 : i128) : i128
    %82 = llvm.call @nd_bv8_in3() : () -> i8
    %83 = llvm.mlir.constant(true) : i1
    %84 = llvm.zext %83 : i1 to i64
    %85 = llvm.mlir.constant(3 : i64) : i64
    %86 = llvm.zext %82 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%85, %86, %84) : (i64, i64, i64) -> ()
    %87 = llvm.trunc %82 : i8 to i1
    %88 = llvm.select %87, %72, %81 : i1, i128
    %89 = llvm.call @nd_bv128_in1() : () -> i128
    %90 = llvm.trunc %89 : i128 to i128
    %91 = llvm.zext %87 : i1 to i32
    %92 = llvm.zext %60 : i5 to i32
    %93 = llvm.sub %92, %91  : i32
    %94 = llvm.bitcast %93 : i32 to vector<32xi1>
    %95 = "llvm.intr.vector.reduce.or"(%94) : (vector<32xi1>) -> i1
    %96 = llvm.mlir.constant(true) : i1
    %97 = llvm.xor %95, %96  : i1
    %98 = llvm.call @nd_bv8_in4() : () -> i8
    %99 = llvm.mlir.constant(true) : i1
    %100 = llvm.zext %99 : i1 to i64
    %101 = llvm.mlir.constant(4 : i64) : i64
    %102 = llvm.zext %98 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%101, %102, %100) : (i64, i64, i64) -> ()
    %103 = llvm.trunc %98 : i8 to i1
    %104 = llvm.and %103, %97  : i1
    %105 = llvm.select %104, %90, %88 : i1, i128
    %106 = llvm.bitcast %60 : i5 to vector<5xi1>
    %107 = "llvm.intr.vector.reduce.or"(%106) : (vector<5xi1>) -> i1
    %108 = llvm.mlir.constant(true) : i1
    %109 = llvm.xor %107, %108  : i1
    %110 = llvm.and %103, %109  : i1
    %111 = llvm.or %87, %110  : i1
    %112 = llvm.select %111, %105, %59 : i1, i128
    %113 = llvm.call @nd_bv8_in5() : () -> i8
    %114 = llvm.mlir.constant(true) : i1
    %115 = llvm.zext %114 : i1 to i64
    %116 = llvm.mlir.constant(5 : i64) : i64
    %117 = llvm.zext %113 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%116, %117, %115) : (i64, i64, i64) -> ()
    %118 = llvm.trunc %113 : i8 to i1
    %119 = llvm.select %118, %81, %112 : i1, i128
    %120 = llvm.zext %87 : i1 to i5
    %121 = llvm.zext %103 : i1 to i5
    %122 = llvm.add %60, %121  : i5
    %123 = llvm.sub %122, %120  : i5
    %124 = llvm.mlir.constant(0 : i5) : i5
    %125 = llvm.select %118, %124, %123 : i1, i5
    %126 = llvm.call @nd_bv8_in6() : () -> i8
    %127 = llvm.mlir.constant(true) : i1
    %128 = llvm.zext %127 : i1 to i64
    %129 = llvm.mlir.constant(6 : i64) : i64
    %130 = llvm.zext %126 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%129, %130, %128) : (i64, i64, i64) -> ()
    %131 = llvm.trunc %126 : i8 to i1
    %132 = llvm.and %131, %103  : i1
    %133 = llvm.or %61, %132  : i1
    %134 = llvm.mlir.constant(true) : i1
    %135 = llvm.xor %61, %134  : i1
    %136 = llvm.select %135, %133, %61 : i1, i1
    %137 = llvm.mlir.constant(false) : i1
    %138 = llvm.select %118, %137, %136 : i1, i1
    %139 = llvm.zext %87 : i1 to i5
    %140 = llvm.mlir.constant(true) : i1
    %141 = llvm.xor %61, %140  : i1
    %142 = llvm.and %103, %141  : i1
    %143 = llvm.zext %142 : i1 to i5
    %144 = llvm.add %63, %143  : i5
    %145 = llvm.sub %144, %139  : i5
    %146 = llvm.select %118, %124, %145 : i1, i5
    %147 = llvm.bitcast %146 : i5 to vector<5xi1>
    %148 = "llvm.intr.vector.reduce.or"(%147) : (vector<5xi1>) -> i1
    %149 = llvm.mlir.constant(true) : i1
    %150 = llvm.xor %148, %149  : i1
    %151 = llvm.bitcast %63 : i5 to vector<5xi1>
    %152 = "llvm.intr.vector.reduce.or"(%151) : (vector<5xi1>) -> i1
    %153 = llvm.mlir.constant(true) : i1
    %154 = llvm.xor %62, %153  : i1
    %155 = llvm.and %61, %154  : i1
    %156 = llvm.and %155, %152  : i1
    %157 = llvm.and %156, %150  : i1
    %158 = llvm.or %157, %62  : i1
    %159 = llvm.mlir.constant(true) : i1
    %160 = llvm.select %159, %158, %62 : i1, i1
    %161 = llvm.select %118, %137, %160 : i1, i1
    %162 = llvm.or %103, %87  : i1
    %163 = llvm.or %162, %118  : i1
    %164 = llvm.or %163, %61  : i1
    %165 = llvm.select %164, %146, %63 : i1, i5
    %166 = llvm.select %118, %124, %165 : i1, i5
    %167 = llvm.and %132, %135  : i1
    %168 = llvm.select %167, %90, %64 : i1, i128
    %169 = llvm.select %118, %81, %168 : i1, i128
    %170 = llvm.select %87, %67, %81 : i1, i128
    %171 = llvm.mlir.constant(-6 : i4) : i4
    %172 = llvm.zext %171 : i4 to i32
    %173 = llvm.icmp "eq" %93, %172 : i32
    %174 = llvm.and %103, %173  : i1
    %175 = llvm.select %174, %90, %170 : i1, i128
    %176 = llvm.zext %171 : i4 to i5
    %177 = llvm.icmp "eq" %60, %176 : i5
    %178 = llvm.and %103, %177  : i1
    %179 = llvm.or %87, %178  : i1
    %180 = llvm.select %179, %175, %66 : i1, i128
    %181 = llvm.select %118, %81, %180 : i1, i128
    %182 = llvm.select %87, %68, %81 : i1, i128
    %183 = llvm.mlir.constant(-5 : i4) : i4
    %184 = llvm.zext %183 : i4 to i32
    %185 = llvm.icmp "eq" %93, %184 : i32
    %186 = llvm.and %103, %185  : i1
    %187 = llvm.select %186, %90, %182 : i1, i128
    %188 = llvm.zext %183 : i4 to i5
    %189 = llvm.icmp "eq" %60, %188 : i5
    %190 = llvm.and %103, %189  : i1
    %191 = llvm.or %87, %190  : i1
    %192 = llvm.select %191, %187, %67 : i1, i128
    %193 = llvm.select %118, %81, %192 : i1, i128
    %194 = llvm.select %87, %69, %81 : i1, i128
    %195 = llvm.mlir.constant(-4 : i4) : i4
    %196 = llvm.zext %195 : i4 to i32
    %197 = llvm.icmp "eq" %93, %196 : i32
    %198 = llvm.and %103, %197  : i1
    %199 = llvm.select %198, %90, %194 : i1, i128
    %200 = llvm.zext %195 : i4 to i5
    %201 = llvm.icmp "eq" %60, %200 : i5
    %202 = llvm.and %103, %201  : i1
    %203 = llvm.or %87, %202  : i1
    %204 = llvm.select %203, %199, %68 : i1, i128
    %205 = llvm.select %118, %81, %204 : i1, i128
    %206 = llvm.select %87, %70, %81 : i1, i128
    %207 = llvm.mlir.constant(-3 : i4) : i4
    %208 = llvm.zext %207 : i4 to i32
    %209 = llvm.icmp "eq" %93, %208 : i32
    %210 = llvm.and %103, %209  : i1
    %211 = llvm.select %210, %90, %206 : i1, i128
    %212 = llvm.zext %207 : i4 to i5
    %213 = llvm.icmp "eq" %60, %212 : i5
    %214 = llvm.and %103, %213  : i1
    %215 = llvm.or %87, %214  : i1
    %216 = llvm.select %215, %211, %69 : i1, i128
    %217 = llvm.select %118, %81, %216 : i1, i128
    %218 = llvm.select %87, %71, %81 : i1, i128
    %219 = llvm.mlir.constant(-2 : i4) : i4
    %220 = llvm.zext %219 : i4 to i32
    %221 = llvm.icmp "eq" %93, %220 : i32
    %222 = llvm.and %103, %221  : i1
    %223 = llvm.select %222, %90, %218 : i1, i128
    %224 = llvm.zext %219 : i4 to i5
    %225 = llvm.icmp "eq" %60, %224 : i5
    %226 = llvm.and %103, %225  : i1
    %227 = llvm.or %87, %226  : i1
    %228 = llvm.select %227, %223, %70 : i1, i128
    %229 = llvm.select %118, %81, %228 : i1, i128
    %230 = llvm.call @nd_bv128_in2() : () -> i128
    %231 = llvm.trunc %230 : i128 to i128
    %232 = llvm.mlir.constant(-1 : i4) : i4
    %233 = llvm.zext %232 : i4 to i5
    %234 = llvm.icmp "eq" %60, %233 : i5
    %235 = llvm.and %103, %234  : i1
    %236 = llvm.or %87, %235  : i1
    %237 = llvm.select %236, %231, %71 : i1, i128
    %238 = llvm.select %118, %81, %237 : i1, i128
    %239 = llvm.select %87, %73, %81 : i1, i128
    %240 = llvm.zext %159 : i1 to i32
    %241 = llvm.icmp "eq" %93, %240 : i32
    %242 = llvm.and %103, %241  : i1
    %243 = llvm.select %242, %90, %239 : i1, i128
    %244 = llvm.zext %159 : i1 to i5
    %245 = llvm.icmp "eq" %60, %244 : i5
    %246 = llvm.and %103, %245  : i1
    %247 = llvm.or %87, %246  : i1
    %248 = llvm.select %247, %243, %72 : i1, i128
    %249 = llvm.select %118, %81, %248 : i1, i128
    %250 = llvm.select %87, %74, %81 : i1, i128
    %251 = llvm.mlir.constant(-2 : i2) : i2
    %252 = llvm.zext %251 : i2 to i32
    %253 = llvm.icmp "eq" %93, %252 : i32
    %254 = llvm.and %103, %253  : i1
    %255 = llvm.select %254, %90, %250 : i1, i128
    %256 = llvm.zext %251 : i2 to i5
    %257 = llvm.icmp "eq" %60, %256 : i5
    %258 = llvm.and %103, %257  : i1
    %259 = llvm.or %87, %258  : i1
    %260 = llvm.select %259, %255, %73 : i1, i128
    %261 = llvm.select %118, %81, %260 : i1, i128
    %262 = llvm.select %87, %75, %81 : i1, i128
    %263 = llvm.mlir.constant(-1 : i2) : i2
    %264 = llvm.zext %263 : i2 to i32
    %265 = llvm.icmp "eq" %93, %264 : i32
    %266 = llvm.and %103, %265  : i1
    %267 = llvm.select %266, %90, %262 : i1, i128
    %268 = llvm.zext %263 : i2 to i5
    %269 = llvm.icmp "eq" %60, %268 : i5
    %270 = llvm.and %103, %269  : i1
    %271 = llvm.or %87, %270  : i1
    %272 = llvm.select %271, %267, %74 : i1, i128
    %273 = llvm.select %118, %81, %272 : i1, i128
    %274 = llvm.select %87, %76, %81 : i1, i128
    %275 = llvm.mlir.constant(-4 : i3) : i3
    %276 = llvm.zext %275 : i3 to i32
    %277 = llvm.icmp "eq" %93, %276 : i32
    %278 = llvm.and %103, %277  : i1
    %279 = llvm.select %278, %90, %274 : i1, i128
    %280 = llvm.zext %275 : i3 to i5
    %281 = llvm.icmp "eq" %60, %280 : i5
    %282 = llvm.and %103, %281  : i1
    %283 = llvm.or %87, %282  : i1
    %284 = llvm.select %283, %279, %75 : i1, i128
    %285 = llvm.select %118, %81, %284 : i1, i128
    %286 = llvm.select %87, %77, %81 : i1, i128
    %287 = llvm.mlir.constant(-3 : i3) : i3
    %288 = llvm.zext %287 : i3 to i32
    %289 = llvm.icmp "eq" %93, %288 : i32
    %290 = llvm.and %103, %289  : i1
    %291 = llvm.select %290, %90, %286 : i1, i128
    %292 = llvm.zext %287 : i3 to i5
    %293 = llvm.icmp "eq" %60, %292 : i5
    %294 = llvm.and %103, %293  : i1
    %295 = llvm.or %87, %294  : i1
    %296 = llvm.select %295, %291, %76 : i1, i128
    %297 = llvm.select %118, %81, %296 : i1, i128
    %298 = llvm.select %87, %78, %81 : i1, i128
    %299 = llvm.mlir.constant(-2 : i3) : i3
    %300 = llvm.zext %299 : i3 to i32
    %301 = llvm.icmp "eq" %93, %300 : i32
    %302 = llvm.and %103, %301  : i1
    %303 = llvm.select %302, %90, %298 : i1, i128
    %304 = llvm.zext %299 : i3 to i5
    %305 = llvm.icmp "eq" %60, %304 : i5
    %306 = llvm.and %103, %305  : i1
    %307 = llvm.or %87, %306  : i1
    %308 = llvm.select %307, %303, %77 : i1, i128
    %309 = llvm.select %118, %81, %308 : i1, i128
    %310 = llvm.select %87, %79, %81 : i1, i128
    %311 = llvm.mlir.constant(-1 : i3) : i3
    %312 = llvm.zext %311 : i3 to i32
    %313 = llvm.icmp "eq" %93, %312 : i32
    %314 = llvm.and %103, %313  : i1
    %315 = llvm.select %314, %90, %310 : i1, i128
    %316 = llvm.zext %311 : i3 to i5
    %317 = llvm.icmp "eq" %60, %316 : i5
    %318 = llvm.and %103, %317  : i1
    %319 = llvm.or %87, %318  : i1
    %320 = llvm.select %319, %315, %78 : i1, i128
    %321 = llvm.select %118, %81, %320 : i1, i128
    %322 = llvm.select %87, %80, %81 : i1, i128
    %323 = llvm.mlir.constant(-8 : i4) : i4
    %324 = llvm.zext %323 : i4 to i32
    %325 = llvm.icmp "eq" %93, %324 : i32
    %326 = llvm.and %103, %325  : i1
    %327 = llvm.select %326, %90, %322 : i1, i128
    %328 = llvm.zext %323 : i4 to i5
    %329 = llvm.icmp "eq" %60, %328 : i5
    %330 = llvm.and %103, %329  : i1
    %331 = llvm.or %87, %330  : i1
    %332 = llvm.select %331, %327, %79 : i1, i128
    %333 = llvm.select %118, %81, %332 : i1, i128
    %334 = llvm.select %87, %66, %81 : i1, i128
    %335 = llvm.mlir.constant(-7 : i4) : i4
    %336 = llvm.zext %335 : i4 to i32
    %337 = llvm.icmp "eq" %93, %336 : i32
    %338 = llvm.and %103, %337  : i1
    %339 = llvm.select %338, %90, %334 : i1, i128
    %340 = llvm.zext %335 : i4 to i5
    %341 = llvm.icmp "eq" %60, %340 : i5
    %342 = llvm.and %103, %341  : i1
    %343 = llvm.or %87, %342  : i1
    %344 = llvm.select %343, %339, %80 : i1, i128
    %345 = llvm.select %118, %81, %344 : i1, i128
    %346 = llvm.mlir.constant(true) : i1
    %347 = llvm.xor %159, %346  : i1
    %348 = llvm.mlir.constant(true) : i1
    %349 = llvm.xor %87, %348  : i1
    %350 = llvm.mlir.constant(true) : i1
    %351 = llvm.xor %109, %350  : i1
    %352 = llvm.or %351, %349  : i1
    %353 = llvm.or %352, %347  : i1
    llvm.call @__SEA_assume(%353) : (i1) -> ()
    %354 = llvm.mlir.constant(true) : i1
    %355 = llvm.xor %159, %354  : i1
    %356 = llvm.mlir.constant(true) : i1
    %357 = llvm.xor %103, %356  : i1
    %358 = llvm.mlir.constant(-16 : i5) : i5
    %359 = llvm.icmp "uge" %60, %358 : i5
    %360 = llvm.mlir.constant(true) : i1
    %361 = llvm.xor %359, %360  : i1
    %362 = llvm.or %361, %357  : i1
    %363 = llvm.or %362, %355  : i1
    llvm.call @__SEA_assume(%363) : (i1) -> ()
    %364 = llvm.mlir.constant(true) : i1
    %365 = llvm.xor %159, %364  : i1
    %366 = llvm.icmp "eq" %118, %65 : i1
    %367 = llvm.or %366, %365  : i1
    llvm.call @__SEA_assume(%367) : (i1) -> ()
    %368 = llvm.mlir.constant(true) : i1
    %369 = llvm.xor %159, %368  : i1
    %370 = llvm.mlir.constant(true) : i1
    %371 = llvm.xor %103, %370  : i1
    %372 = llvm.mlir.constant(true) : i1
    %373 = llvm.xor %359, %372  : i1
    %374 = llvm.or %373, %371  : i1
    %375 = llvm.or %374, %369  : i1
    llvm.call @__SEA_assume(%375) : (i1) -> ()
    %376 = llvm.mlir.constant(true) : i1
    %377 = llvm.xor %159, %376  : i1
    %378 = llvm.mlir.constant(true) : i1
    %379 = llvm.xor %87, %378  : i1
    %380 = llvm.mlir.constant(true) : i1
    %381 = llvm.xor %109, %380  : i1
    %382 = llvm.or %381, %379  : i1
    %383 = llvm.or %382, %377  : i1
    llvm.call @__SEA_assume(%383) : (i1) -> ()
    %384 = llvm.icmp "eq" %64, %59 : i128
    %385 = llvm.mlir.constant(true) : i1
    %386 = llvm.xor %157, %385  : i1
    %387 = llvm.or %386, %384  : i1
    %388 = llvm.call @nd_bv8_in7() : () -> i8
    %389 = llvm.mlir.constant(true) : i1
    %390 = llvm.zext %389 : i1 to i64
    %391 = llvm.mlir.constant(7 : i64) : i64
    %392 = llvm.zext %388 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%391, %392, %390) : (i64, i64, i64) -> ()
    %393 = llvm.trunc %388 : i8 to i1
    %394 = llvm.select %65, %393, %387 : i1, i1
    %395 = llvm.mlir.constant(true) : i1
    %396 = llvm.xor %394, %395  : i1
    %397 = llvm.select %65, %137, %159 : i1, i1
    %398 = llvm.and %397, %396  : i1
    %399 = llvm.mlir.constant(true) : i1
    %400 = llvm.xor %398, %399  : i1
    llvm.cond_br %400, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%119, %125, %138, %161, %166, %169, %137, %181, %193, %205, %217, %229, %238, %249, %261, %273, %285, %297, %309, %321, %333, %345 : i128, i5, i1, i1, i5, i128, i1, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128, i128)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

