module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @__SEA_assume(i1)
  llvm.func @nd_bv8_in7() -> i8
  llvm.func @nd_bv64_in6() -> i64
  llvm.func @nd_bv8_in5() -> i8
  llvm.func @nd_bv8_in2() -> i8
  llvm.func @nd_bv8_in4() -> i8
  llvm.func @nd_bv8_in3() -> i8
  llvm.func @btor2mlir_print_input_num(i64, i64, i64)
  llvm.func @nd_bv64_in1() -> i64
  llvm.func @nd_bv8_st16() -> i8
  llvm.func @nd_bv64_st14() -> i64
  llvm.func @nd_bv8_st13() -> i8
  llvm.func @nd_bv8_st12() -> i8
  llvm.func @nd_bv8_st11() -> i8
  llvm.func @nd_bv8_st10() -> i8
  llvm.func @nd_bv64_st9() -> i64
  llvm.func @nd_bv64_st8() -> i64
  llvm.func @nd_bv64_st7() -> i64
  llvm.func @nd_bv64_st6() -> i64
  llvm.func @nd_bv64_st5() -> i64
  llvm.func @nd_bv64_st4() -> i64
  llvm.func @nd_bv64_st3() -> i64
  llvm.func @nd_bv64_st2() -> i64
  llvm.func @nd_bv8_st1() -> i8
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv64_st0() -> i64
  llvm.func @main() {
    %0 = llvm.call @nd_bv64_st0() : () -> i64
    %1 = llvm.mlir.constant(64 : i64) : i64
    %2 = llvm.zext %1 : i64 to i64
    %3 = llvm.mlir.constant(0 : i64) : i64
    %4 = llvm.zext %0 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%3, %4, %2) : (i64, i64, i64) -> ()
    %5 = llvm.trunc %0 : i64 to i64
    %6 = llvm.call @nd_bv8_st1() : () -> i8
    %7 = llvm.mlir.constant(5 : i5) : i5
    %8 = llvm.zext %7 : i5 to i64
    %9 = llvm.mlir.constant(1 : i64) : i64
    %10 = llvm.zext %6 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%9, %10, %8) : (i64, i64, i64) -> ()
    %11 = llvm.trunc %6 : i8 to i5
    %12 = llvm.call @nd_bv64_st2() : () -> i64
    %13 = llvm.mlir.constant(64 : i64) : i64
    %14 = llvm.zext %13 : i64 to i64
    %15 = llvm.mlir.constant(2 : i64) : i64
    %16 = llvm.zext %12 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%15, %16, %14) : (i64, i64, i64) -> ()
    %17 = llvm.trunc %12 : i64 to i64
    %18 = llvm.call @nd_bv64_st3() : () -> i64
    %19 = llvm.mlir.constant(64 : i64) : i64
    %20 = llvm.zext %19 : i64 to i64
    %21 = llvm.mlir.constant(3 : i64) : i64
    %22 = llvm.zext %18 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%21, %22, %20) : (i64, i64, i64) -> ()
    %23 = llvm.trunc %18 : i64 to i64
    %24 = llvm.call @nd_bv64_st4() : () -> i64
    %25 = llvm.mlir.constant(64 : i64) : i64
    %26 = llvm.zext %25 : i64 to i64
    %27 = llvm.mlir.constant(4 : i64) : i64
    %28 = llvm.zext %24 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%27, %28, %26) : (i64, i64, i64) -> ()
    %29 = llvm.trunc %24 : i64 to i64
    %30 = llvm.call @nd_bv64_st5() : () -> i64
    %31 = llvm.mlir.constant(64 : i64) : i64
    %32 = llvm.zext %31 : i64 to i64
    %33 = llvm.mlir.constant(5 : i64) : i64
    %34 = llvm.zext %30 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%33, %34, %32) : (i64, i64, i64) -> ()
    %35 = llvm.trunc %30 : i64 to i64
    %36 = llvm.call @nd_bv64_st6() : () -> i64
    %37 = llvm.mlir.constant(64 : i64) : i64
    %38 = llvm.zext %37 : i64 to i64
    %39 = llvm.mlir.constant(6 : i64) : i64
    %40 = llvm.zext %36 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%39, %40, %38) : (i64, i64, i64) -> ()
    %41 = llvm.trunc %36 : i64 to i64
    %42 = llvm.call @nd_bv64_st7() : () -> i64
    %43 = llvm.mlir.constant(64 : i64) : i64
    %44 = llvm.zext %43 : i64 to i64
    %45 = llvm.mlir.constant(7 : i64) : i64
    %46 = llvm.zext %42 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%45, %46, %44) : (i64, i64, i64) -> ()
    %47 = llvm.trunc %42 : i64 to i64
    %48 = llvm.call @nd_bv64_st8() : () -> i64
    %49 = llvm.mlir.constant(64 : i64) : i64
    %50 = llvm.zext %49 : i64 to i64
    %51 = llvm.mlir.constant(8 : i64) : i64
    %52 = llvm.zext %48 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%51, %52, %50) : (i64, i64, i64) -> ()
    %53 = llvm.trunc %48 : i64 to i64
    %54 = llvm.call @nd_bv64_st9() : () -> i64
    %55 = llvm.mlir.constant(64 : i64) : i64
    %56 = llvm.zext %55 : i64 to i64
    %57 = llvm.mlir.constant(9 : i64) : i64
    %58 = llvm.zext %54 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%57, %58, %56) : (i64, i64, i64) -> ()
    %59 = llvm.trunc %54 : i64 to i64
    %60 = llvm.call @nd_bv8_st10() : () -> i8
    %61 = llvm.mlir.constant(5 : i5) : i5
    %62 = llvm.zext %61 : i5 to i64
    %63 = llvm.mlir.constant(10 : i64) : i64
    %64 = llvm.zext %60 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%63, %64, %62) : (i64, i64, i64) -> ()
    %65 = llvm.trunc %60 : i8 to i5
    %66 = llvm.call @nd_bv8_st11() : () -> i8
    %67 = llvm.mlir.constant(true) : i1
    %68 = llvm.zext %67 : i1 to i64
    %69 = llvm.mlir.constant(11 : i64) : i64
    %70 = llvm.zext %66 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%69, %70, %68) : (i64, i64, i64) -> ()
    %71 = llvm.trunc %66 : i8 to i1
    %72 = llvm.call @nd_bv8_st12() : () -> i8
    %73 = llvm.mlir.constant(true) : i1
    %74 = llvm.zext %73 : i1 to i64
    %75 = llvm.mlir.constant(12 : i64) : i64
    %76 = llvm.zext %72 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%75, %76, %74) : (i64, i64, i64) -> ()
    %77 = llvm.trunc %72 : i8 to i1
    %78 = llvm.call @nd_bv8_st13() : () -> i8
    %79 = llvm.mlir.constant(5 : i5) : i5
    %80 = llvm.zext %79 : i5 to i64
    %81 = llvm.mlir.constant(13 : i64) : i64
    %82 = llvm.zext %78 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%81, %82, %80) : (i64, i64, i64) -> ()
    %83 = llvm.trunc %78 : i8 to i5
    %84 = llvm.call @nd_bv64_st14() : () -> i64
    %85 = llvm.mlir.constant(64 : i64) : i64
    %86 = llvm.zext %85 : i64 to i64
    %87 = llvm.mlir.constant(14 : i64) : i64
    %88 = llvm.zext %84 : i64 to i64
    llvm.call @btor2mlir_print_state_num(%87, %88, %86) : (i64, i64, i64) -> ()
    %89 = llvm.trunc %84 : i64 to i64
    %90 = llvm.mlir.constant(true) : i1
    %91 = llvm.call @nd_bv8_st16() : () -> i8
    %92 = llvm.mlir.constant(5 : i5) : i5
    %93 = llvm.zext %92 : i5 to i64
    %94 = llvm.mlir.constant(16 : i64) : i64
    %95 = llvm.zext %91 : i8 to i64
    llvm.call @btor2mlir_print_state_num(%94, %95, %93) : (i64, i64, i64) -> ()
    %96 = llvm.trunc %91 : i8 to i5
    llvm.br ^bb1(%5, %11, %17, %23, %29, %35, %41, %47, %53, %59, %65, %71, %77, %83, %89, %90, %96 : i64, i5, i64, i64, i64, i64, i64, i64, i64, i64, i5, i1, i1, i5, i64, i1, i5)
  ^bb1(%97: i64, %98: i5, %99: i64, %100: i64, %101: i64, %102: i64, %103: i64, %104: i64, %105: i64, %106: i64, %107: i5, %108: i1, %109: i1, %110: i5, %111: i64, %112: i1, %113: i5):  // 2 preds: ^bb0, ^bb2
    %114 = llvm.call @nd_bv64_in1() : () -> i64
    %115 = llvm.mlir.constant(64 : i64) : i64
    %116 = llvm.zext %115 : i64 to i64
    %117 = llvm.mlir.constant(1 : i64) : i64
    %118 = llvm.zext %114 : i64 to i64
    llvm.call @btor2mlir_print_input_num(%117, %118, %116) : (i64, i64, i64) -> ()
    %119 = llvm.trunc %114 : i64 to i64
    %120 = llvm.mlir.constant(-8 : i4) : i4
    %121 = llvm.mlir.constant(0 : i5) : i5
    %122 = llvm.lshr %113, %121  : i5
    %123 = llvm.trunc %122 : i5 to i4
    %124 = llvm.icmp "eq" %123, %120 : i4
    %125 = llvm.call @nd_bv8_in3() : () -> i8
    %126 = llvm.mlir.constant(true) : i1
    %127 = llvm.zext %126 : i1 to i64
    %128 = llvm.mlir.constant(3 : i64) : i64
    %129 = llvm.zext %125 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%128, %129, %127) : (i64, i64, i64) -> ()
    %130 = llvm.trunc %125 : i8 to i1
    %131 = llvm.and %130, %124  : i1
    %132 = llvm.select %131, %119, %97 : i1, i64
    %133 = llvm.mlir.constant(0 : i64) : i64
    %134 = llvm.call @nd_bv8_in4() : () -> i8
    %135 = llvm.mlir.constant(true) : i1
    %136 = llvm.zext %135 : i1 to i64
    %137 = llvm.mlir.constant(4 : i64) : i64
    %138 = llvm.zext %134 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%137, %138, %136) : (i64, i64, i64) -> ()
    %139 = llvm.trunc %134 : i8 to i1
    %140 = llvm.select %139, %133, %132 : i1, i64
    %141 = llvm.call @nd_bv8_in2() : () -> i8
    %142 = llvm.mlir.constant(true) : i1
    %143 = llvm.zext %142 : i1 to i64
    %144 = llvm.mlir.constant(2 : i64) : i64
    %145 = llvm.zext %141 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%144, %145, %143) : (i64, i64, i64) -> ()
    %146 = llvm.trunc %141 : i8 to i1
    %147 = llvm.zext %146 : i1 to i5
    %148 = llvm.add %98, %147  : i5
    %149 = llvm.or %130, %146  : i1
    %150 = llvm.or %149, %139  : i1
    %151 = llvm.select %150, %148, %98 : i1, i5
    %152 = llvm.mlir.constant(0 : i5) : i5
    %153 = llvm.select %139, %152, %151 : i1, i5
    %154 = llvm.mlir.constant(-1 : i3) : i3
    %155 = llvm.zext %154 : i3 to i4
    %156 = llvm.icmp "eq" %123, %155 : i4
    %157 = llvm.and %130, %156  : i1
    %158 = llvm.select %157, %119, %99 : i1, i64
    %159 = llvm.select %139, %133, %158 : i1, i64
    %160 = llvm.mlir.constant(-2 : i3) : i3
    %161 = llvm.zext %160 : i3 to i4
    %162 = llvm.icmp "eq" %123, %161 : i4
    %163 = llvm.and %130, %162  : i1
    %164 = llvm.select %163, %119, %100 : i1, i64
    %165 = llvm.select %139, %133, %164 : i1, i64
    %166 = llvm.mlir.constant(-3 : i3) : i3
    %167 = llvm.zext %166 : i3 to i4
    %168 = llvm.icmp "eq" %123, %167 : i4
    %169 = llvm.and %130, %168  : i1
    %170 = llvm.select %169, %119, %101 : i1, i64
    %171 = llvm.select %139, %133, %170 : i1, i64
    %172 = llvm.mlir.constant(-4 : i3) : i3
    %173 = llvm.zext %172 : i3 to i4
    %174 = llvm.icmp "eq" %123, %173 : i4
    %175 = llvm.and %130, %174  : i1
    %176 = llvm.select %175, %119, %102 : i1, i64
    %177 = llvm.select %139, %133, %176 : i1, i64
    %178 = llvm.mlir.constant(-1 : i2) : i2
    %179 = llvm.zext %178 : i2 to i4
    %180 = llvm.icmp "eq" %123, %179 : i4
    %181 = llvm.and %130, %180  : i1
    %182 = llvm.select %181, %119, %103 : i1, i64
    %183 = llvm.select %139, %133, %182 : i1, i64
    %184 = llvm.mlir.constant(-2 : i2) : i2
    %185 = llvm.zext %184 : i2 to i4
    %186 = llvm.icmp "eq" %123, %185 : i4
    %187 = llvm.and %130, %186  : i1
    %188 = llvm.select %187, %119, %104 : i1, i64
    %189 = llvm.select %139, %133, %188 : i1, i64
    %190 = llvm.mlir.constant(true) : i1
    %191 = llvm.zext %190 : i1 to i4
    %192 = llvm.icmp "eq" %123, %191 : i4
    %193 = llvm.and %130, %192  : i1
    %194 = llvm.select %193, %119, %105 : i1, i64
    %195 = llvm.select %139, %133, %194 : i1, i64
    %196 = llvm.bitcast %123 : i4 to vector<4xi1>
    %197 = "llvm.intr.vector.reduce.or"(%196) : (vector<4xi1>) -> i1
    %198 = llvm.mlir.constant(true) : i1
    %199 = llvm.xor %197, %198  : i1
    %200 = llvm.and %130, %199  : i1
    %201 = llvm.select %200, %119, %106 : i1, i64
    %202 = llvm.select %139, %133, %201 : i1, i64
    %203 = llvm.zext %146 : i1 to i5
    %204 = llvm.zext %130 : i1 to i5
    %205 = llvm.add %107, %204  : i5
    %206 = llvm.sub %205, %203  : i5
    %207 = llvm.select %139, %152, %206 : i1, i5
    %208 = llvm.call @nd_bv8_in5() : () -> i8
    %209 = llvm.mlir.constant(true) : i1
    %210 = llvm.zext %209 : i1 to i64
    %211 = llvm.mlir.constant(5 : i64) : i64
    %212 = llvm.zext %208 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%211, %212, %210) : (i64, i64, i64) -> ()
    %213 = llvm.trunc %208 : i8 to i1
    %214 = llvm.and %213, %130  : i1
    %215 = llvm.or %108, %214  : i1
    %216 = llvm.mlir.constant(true) : i1
    %217 = llvm.xor %108, %216  : i1
    %218 = llvm.select %217, %215, %108 : i1, i1
    %219 = llvm.mlir.constant(false) : i1
    %220 = llvm.select %139, %219, %218 : i1, i1
    %221 = llvm.zext %146 : i1 to i5
    %222 = llvm.mlir.constant(true) : i1
    %223 = llvm.xor %108, %222  : i1
    %224 = llvm.and %130, %223  : i1
    %225 = llvm.zext %224 : i1 to i5
    %226 = llvm.add %110, %225  : i5
    %227 = llvm.sub %226, %221  : i5
    %228 = llvm.select %139, %152, %227 : i1, i5
    %229 = llvm.bitcast %228 : i5 to vector<5xi1>
    %230 = "llvm.intr.vector.reduce.or"(%229) : (vector<5xi1>) -> i1
    %231 = llvm.mlir.constant(true) : i1
    %232 = llvm.xor %230, %231  : i1
    %233 = llvm.bitcast %110 : i5 to vector<5xi1>
    %234 = "llvm.intr.vector.reduce.or"(%233) : (vector<5xi1>) -> i1
    %235 = llvm.mlir.constant(true) : i1
    %236 = llvm.xor %109, %235  : i1
    %237 = llvm.and %108, %236  : i1
    %238 = llvm.and %237, %234  : i1
    %239 = llvm.and %238, %232  : i1
    %240 = llvm.or %239, %109  : i1
    %241 = llvm.select %190, %240, %109 : i1, i1
    %242 = llvm.select %139, %219, %241 : i1, i1
    %243 = llvm.or %130, %146  : i1
    %244 = llvm.or %243, %139  : i1
    %245 = llvm.or %244, %108  : i1
    %246 = llvm.select %245, %228, %110 : i1, i5
    %247 = llvm.select %139, %152, %246 : i1, i5
    %248 = llvm.and %214, %217  : i1
    %249 = llvm.select %248, %119, %111 : i1, i64
    %250 = llvm.select %139, %133, %249 : i1, i64
    %251 = llvm.zext %130 : i1 to i5
    %252 = llvm.add %113, %251  : i5
    %253 = llvm.select %150, %252, %113 : i1, i5
    %254 = llvm.select %139, %152, %253 : i1, i5
    %255 = llvm.mlir.constant(true) : i1
    %256 = llvm.xor %190, %255  : i1
    %257 = llvm.icmp "eq" %139, %112 : i1
    %258 = llvm.or %257, %256  : i1
    llvm.call @__SEA_assume(%258) : (i1) -> ()
    %259 = llvm.mlir.constant(true) : i1
    %260 = llvm.xor %190, %259  : i1
    %261 = llvm.mlir.constant(true) : i1
    %262 = llvm.xor %130, %261  : i1
    %263 = llvm.mlir.constant(-7 : i4) : i4
    %264 = llvm.zext %263 : i4 to i5
    %265 = llvm.icmp "eq" %107, %264 : i5
    %266 = llvm.mlir.constant(true) : i1
    %267 = llvm.xor %265, %266  : i1
    %268 = llvm.or %267, %262  : i1
    %269 = llvm.or %268, %260  : i1
    llvm.call @__SEA_assume(%269) : (i1) -> ()
    %270 = llvm.mlir.constant(true) : i1
    %271 = llvm.xor %190, %270  : i1
    %272 = llvm.mlir.constant(true) : i1
    %273 = llvm.xor %146, %272  : i1
    %274 = llvm.bitcast %107 : i5 to vector<5xi1>
    %275 = "llvm.intr.vector.reduce.or"(%274) : (vector<5xi1>) -> i1
    %276 = llvm.mlir.constant(true) : i1
    %277 = llvm.xor %275, %276  : i1
    %278 = llvm.mlir.constant(true) : i1
    %279 = llvm.xor %277, %278  : i1
    %280 = llvm.or %279, %273  : i1
    %281 = llvm.or %280, %271  : i1
    llvm.call @__SEA_assume(%281) : (i1) -> ()
    %282 = llvm.call @nd_bv64_in6() : () -> i64
    %283 = llvm.mlir.constant(64 : i64) : i64
    %284 = llvm.zext %283 : i64 to i64
    %285 = llvm.mlir.constant(6 : i64) : i64
    %286 = llvm.zext %282 : i64 to i64
    llvm.call @btor2mlir_print_input_num(%285, %286, %284) : (i64, i64, i64) -> ()
    %287 = llvm.trunc %282 : i64 to i64
    %288 = llvm.mlir.constant(0 : i5) : i5
    %289 = llvm.lshr %98, %288  : i5
    %290 = llvm.trunc %289 : i5 to i4
    %291 = llvm.icmp "eq" %290, %120 : i4
    %292 = llvm.select %291, %97, %287 : i1, i64
    %293 = llvm.zext %154 : i3 to i4
    %294 = llvm.icmp "eq" %290, %293 : i4
    %295 = llvm.select %294, %99, %292 : i1, i64
    %296 = llvm.zext %160 : i3 to i4
    %297 = llvm.icmp "eq" %290, %296 : i4
    %298 = llvm.select %297, %100, %295 : i1, i64
    %299 = llvm.zext %166 : i3 to i4
    %300 = llvm.icmp "eq" %290, %299 : i4
    %301 = llvm.select %300, %101, %298 : i1, i64
    %302 = llvm.zext %172 : i3 to i4
    %303 = llvm.icmp "eq" %290, %302 : i4
    %304 = llvm.select %303, %102, %301 : i1, i64
    %305 = llvm.zext %178 : i2 to i4
    %306 = llvm.icmp "eq" %290, %305 : i4
    %307 = llvm.select %306, %103, %304 : i1, i64
    %308 = llvm.zext %184 : i2 to i4
    %309 = llvm.icmp "eq" %290, %308 : i4
    %310 = llvm.select %309, %104, %307 : i1, i64
    %311 = llvm.zext %190 : i1 to i4
    %312 = llvm.icmp "eq" %290, %311 : i4
    %313 = llvm.select %312, %105, %310 : i1, i64
    %314 = llvm.bitcast %290 : i4 to vector<4xi1>
    %315 = "llvm.intr.vector.reduce.or"(%314) : (vector<4xi1>) -> i1
    %316 = llvm.mlir.constant(true) : i1
    %317 = llvm.xor %315, %316  : i1
    %318 = llvm.select %317, %106, %313 : i1, i64
    %319 = llvm.icmp "eq" %111, %318 : i64
    %320 = llvm.mlir.constant(true) : i1
    %321 = llvm.xor %239, %320  : i1
    %322 = llvm.or %321, %319  : i1
    %323 = llvm.call @nd_bv8_in7() : () -> i8
    %324 = llvm.mlir.constant(true) : i1
    %325 = llvm.zext %324 : i1 to i64
    %326 = llvm.mlir.constant(7 : i64) : i64
    %327 = llvm.zext %323 : i8 to i64
    llvm.call @btor2mlir_print_input_num(%326, %327, %325) : (i64, i64, i64) -> ()
    %328 = llvm.trunc %323 : i8 to i1
    %329 = llvm.select %112, %328, %322 : i1, i1
    %330 = llvm.mlir.constant(true) : i1
    %331 = llvm.xor %329, %330  : i1
    %332 = llvm.select %112, %219, %190 : i1, i1
    %333 = llvm.and %332, %331  : i1
    %334 = llvm.mlir.constant(true) : i1
    %335 = llvm.xor %333, %334  : i1
    llvm.cond_br %335, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%140, %153, %159, %165, %171, %177, %183, %189, %195, %202, %207, %220, %242, %247, %250, %219, %254 : i64, i5, i64, i64, i64, i64, i64, i64, i64, i64, i5, i1, i1, i5, i64, i1, i5)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

